CREATE TRIGGER "act_balance_update_from_act_mst"
----------------
 after update order 1 on
"DBA"."act_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "d_new_amount" decimal(14,2);
  declare "d_old_amount" decimal(14,2);
  declare "s_lc_code" char(6);
  declare "dt_date" date;
  select "days"("d_ac_year_st_date",-1) into "dt_date" from "system_parameter";
  if "New_name"."c_drug_licence_no_1" is null and "OLD_name"."c_drug_licence_no_1" is not null then
    delete from "act_license_det" where "act_license_det"."c_act_code" = "new_name"."c_coDe"
      and "act_license_det"."c_license_code" = 'L00001'
  else
    select "c_license_code" into "s_lc_code" from "act_license_det" where "act_license_det"."c_act_code" = "new_name"."c_coDe"
      and "act_license_det"."c_license_code" = 'L00001';
    if sqlstate = '02000' then
      if "new_name"."c_drug_licence_no_1" is not null then
        insert into "act_license_det"( "c_act_code","c_license_code","c_license_no","d_valid_to","d_date","c_user","d_ldate","c_luser" ) values
          ( "new_name"."c_code",'L00001',"TRIM"("new_name"."c_drug_licence_no_1"),"new_name"."d_dl_date","uf_default_date"(),"new_name"."c_user",null,null ) 
      end if
    else update "act_license_det" set "c_license_no" = "new_name"."c_drug_licence_no_1","d_valid_to" = "new_name"."d_dl_date","c_luser" = "new_name"."c_luser",
        "d_ldate" = "uf_default_date"()
        where "act_license_det"."c_act_code" = "new_name"."c_coDe"
        and "act_license_det"."c_license_code" = 'L00001'
    end if end if;
  if "New_name"."c_drug_licence_no_2" is null and "OLD_name"."c_drug_licence_no_2" is not null then
    delete from "act_license_det" where "act_license_det"."c_act_code" = "new_name"."c_coDe"
      and "act_license_det"."c_license_code" = 'L00002'
  else
    select "c_license_code" into "s_lc_code" from "act_license_det" where "act_license_det"."c_act_code" = "new_name"."c_coDe"
      and "act_license_det"."c_license_code" = 'L00002';
    if sqlstate = '02000' then
      if "new_name"."c_drug_licence_no_2" is not null then
        insert into "act_license_det"( "c_act_code","c_license_code","c_license_no","d_valid_to","d_date","c_user","d_ldate","c_luser" ) values
          ( "new_name"."c_code",'L00002',"TRIM"("new_name"."c_drug_licence_no_2"),null,"uf_default_date"(),"new_name"."c_user",null,null ) 
      end if
    else update "act_license_det" set "c_license_no" = "new_name"."c_drug_licence_no_2","c_luser" = "new_name"."c_luser","d_ldate" = "uf_default_date"()
        where "act_license_det"."c_act_code" = "new_name"."c_coDe" and "act_license_det"."c_act_code" = 'L00002'
    end if end if;
  if "New_name"."c_narcotic_dl_no" is null and "OLD_name"."c_narcotic_dl_no" is not null then
    delete from "act_license_det" where "act_license_det"."c_act_code" = "new_name"."c_coDe"
      and "act_license_det"."c_license_code" = 'L00003'
  else
    select "c_license_code" into "s_lc_code" from "act_license_det" where "act_license_det"."c_act_code" = "new_name"."c_coDe"
      and "act_license_det"."c_license_code" = 'L00003';
    if sqlstate = '02000' then
      if "new_name"."c_narcotic_dl_no" is not null then
        insert into "act_license_det"( "c_act_code","c_license_code","c_license_no","d_valid_to","d_date","c_user","d_ldate","c_luser" ) values
          ( "new_name"."c_code",'L00003',"TRIM"("new_name"."c_narcotic_dl_no"),null,"uf_default_date"(),"new_name"."c_user",null,null ) 
      end if
    else update "act_license_det" set "c_license_no" = "new_name"."c_narcotic_dl_no","c_luser" = "new_name"."c_luser","d_ldate" = "uf_default_date"()
        where "act_license_det"."c_act_code" = "new_name"."c_coDe"
        and "act_license_det"."c_license_code" = 'L00003'
    end if end if;
  if "New_name"."c_food_lic_no" is null and "OLD_name"."c_food_lic_no" is not null then
    delete from "act_license_det" where "act_license_det"."c_act_code" = "new_name"."c_coDe"
      and "act_license_det"."c_license_code" = 'L00004'
  else
    select "c_license_code" into "s_lc_code" from "act_license_det" where "act_license_det"."c_act_code" = "new_name"."c_coDe"
      and "act_license_det"."c_license_code" = 'L00004';
    if sqlstate = '02000' then
      if "new_name"."c_food_lic_no" is not null then
        insert into "act_license_det"( "c_act_code","c_license_code","c_license_no","d_valid_to","d_date","c_user","d_ldate","c_luser" ) values
          ( "new_name"."c_code",'L00004',"TRIM"("new_name"."c_food_lic_no"),null,"uf_default_date"(),"new_name"."c_user",null,null ) 
      end if
    else update "act_license_det" set "c_license_no" = "new_name"."c_food_lic_no","c_luser" = "new_name"."c_luser","d_ldate" = "uf_default_date"()
        where "act_license_det"."c_act_code" = "new_name"."c_coDe"
        and "act_license_det"."c_license_code" = 'L00004'
    end if end if;
  if "old_name"."n_op_bal" = 0 and "new_name"."n_op_bal" = 0 then
    return
  end if;
  if "new_name"."c_credit_debit" = 'C' then
    set "d_new_amount" = (-1)*"new_name"."n_op_bal"
  else
    set "d_new_amount" = "new_name"."n_op_bal"
  end if;
  if "old_name"."c_credit_debit" = 'C' then
    set "d_old_amount" = (-1)*"old_name"."n_op_bal"
  else
    set "d_old_amount" = "old_name"."n_op_bal"
  end if;
  if "d_old_amount" = "d_new_amount" then
    return
  end if;
  if "old_name"."n_op_bal" = 0 and "new_name"."n_op_bal" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values( 'OP',
      -1,"new_name"."c_code","dt_date","d_new_amount",'~~~~~~' ) ;
    update "ledger" set "n_amount" = "n_amount"-"d_new_amount"
      where "c_prefix" = 'OP' and "n_tran_no" = (-1) and "c_act_code" = '~~~~~~'
  end if;
  if "old_name"."n_op_bal" <> 0 and "new_name"."n_op_bal" = 0 then
    delete from "ledger"
      where "c_prefix" = 'OP'
      and "n_tran_no" = (-1)
      and "c_act_code" = "old_name"."c_code";
    update "ledger" set "n_amount" = "n_amount"+"d_old_amount"
      where "c_prefix" = 'OP' and "n_tran_no" = (-1) and "c_act_code" = '~~~~~~'
  end if;
  if "old_name"."n_op_bal" <> 0 and "new_name"."n_op_bal" <> 0 then
    update "ledger" set "n_amount" = "d_new_amount"
      where "c_prefix" = 'OP' and "n_tran_no" = (-1) and "c_act_code" = "old_name"."c_code";
    update "ledger" set "n_amount" = "ledger"."n_amount"+"d_old_amount"-"d_new_amount"
      where "c_prefix" = 'OP' and "n_tran_no" = (-1) and "c_act_code" = '~~~~~~'
  end if
end;
CREATE TRIGGER "act_balance_update_from_ledger" after insert order 5 on
"DBA"."ledger"
referencing new as "new_name"
for each row
begin
  declare "customer" numeric(1);
  declare "supplier" numeric(1);
  select "isnull"("n_customer",0),"isnull"("n_supplier",0) into "customer","supplier" from "act_mst" where "c_code" = "new_name"."c_act_code";
  if("customer"+"supplier") > 0 then
    update "act_balance" set "act_balance"."n_cur_bal" = "act_balance"."n_cur_bal"+"new_name"."n_amount"
      where "act_balance"."c_act_code" = "new_name"."c_act_code"
  end if
end;
CREATE TRIGGER "cash_depo.delete_ledger_delete" after delete order 3
on "DBA".cash_depo
referencing old as old_name
for each row
begin
  delete from ledger
    where ledger.c_prefix=old_name.c_prefix
    and ledger.n_tran_no=old_name.n_srno;
  delete from remarks
    where remarks.c_prefix=old_name.c_prefix
    and remarks.n_tran_id=old_name.n_srno
end;
CREATE TRIGGER "cash_depo.insert_ledger_insert" after insert order 1
on "DBA".cash_depo
referencing new as new_name
for each row
begin
  insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
    new_name.c_prefix,new_name.n_srno,'CASH',new_name.d_depo_date,
    -new_name.n_total,new_name.c_bank_code);
  insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
    new_name.c_prefix,new_name.n_srno,new_name.c_bank_code,new_name.d_depo_date,
    new_name.n_total,'CASH');
  insert into remarks(c_prefix,c_chq_no,d_chq_dt,n_tran_id,c_remark) values(
    new_name.c_prefix,null,null,new_name.n_srno,new_name.c_remark)
end;
CREATE TRIGGER "cash_depo.update_ledger_update" after update order 2 on
"DBA"."cash_depo"
referencing old as "old_name" new as "new_name"
for each row
begin
  update "ledger"
    set "d_date" = "new_name"."d_depo_date",
    "n_amount" = -"new_name"."n_total",
    "c_opp_act_code" = "new_name"."c_bank_code"
    where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno"
    and "ledger"."c_act_code" = 'CASH';
  update "ledger"
    set "c_act_code" = "new_name"."c_bank_code",
    "d_date" = "new_name"."d_depo_date",
    "n_amount" = "new_name"."n_total"
    where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno"
    and "ledger"."c_act_code" = "old_name"."c_bank_code";
  update "remarks" set "c_remark" = "NEW_NAME"."c_remark"
    where "remarks"."c_prefix" = "old_name"."c_prefix"
    and "remarks"."n_tran_id" = "new_name"."n_srno"
end;
CREATE TRIGGER "cash_with.delete_ledger_delete" after delete order 3
on "DBA".cash_with
referencing old as old_name
for each row
begin
  delete from ledger
    where ledger.c_prefix=old_name.c_prefix
    and ledger.n_tran_no=old_name.n_srno;
  delete from remarks
    where remarks.c_prefix=old_name.c_prefix
    and remarks.n_tran_id=old_name.n_srno
end;
CREATE TRIGGER "cash_with.insert_insert_ledger" after insert order 1
on "DBA".cash_with
referencing new as new_name
for each row
begin
  insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
    new_name.c_prefix,new_name.n_srno,new_name.c_bank_code,new_name.d_with_date,
    -new_name.n_total,'CASH');
  insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
    new_name.c_prefix,new_name.n_srno,'CASH',new_name.d_with_date,
    new_name.n_total,new_name.c_bank_code);
  insert into remarks(c_prefix,c_chq_no,d_chq_dt,n_tran_id,c_remark) values(
    new_name.c_prefix,new_name.c_chq_no,null,new_name.n_srno,new_name.c_remark)
end;
CREATE TRIGGER "cash_with.update_ledger_update" after update order 2
on "DBA".cash_with
referencing old as old_name new as new_name
for each row
begin
  update ledger set
    c_act_code=new_name.c_bank_code,
    d_date=new_name.d_with_date,
    n_amount=-new_name.n_total
    where ledger.c_prefix=old_name.c_prefix
    and ledger.n_tran_no=old_name.n_srno
    and ledger.c_act_code=old_name.c_bank_code;
  update ledger set
    d_date=new_name.d_with_date,
    n_amount=new_name.n_total,
    c_opp_act_code=new_name.c_bank_code
    where ledger.c_prefix=old_name.c_prefix
    and ledger.n_tran_no=old_name.n_srno
    and ledger.c_act_code='CASH';
  update remarks set
    c_remark=new_name.c_remark,
    c_chq_no=new_name.c_chq_no
    where remarks.c_prefix=new_name.c_prefix
    and remarks.n_tran_id=new_name.n_srno
end;
CREATE TRIGGER "cust_rec_det_new_process.delete_update_invoice_out_balance" after delete order 3 on
"DBA"."cust_rec_det_new_process"
referencing old as "old_name"
for each row
begin
  declare @cust_code char(6);
  declare @doc_date_old,@doc_date_new date;
  declare @new_settled_amt numeric(18,2);
  declare @c_sett_prefix_old,@c_sett_prefix_new,@c_doc_prefix_old,@c_doc_prefix_new char(2);
  declare @c_sett_year_old,@c_sett_year_new,@c_doc_year_old,@c_doc_year_new char(2);
  declare @sett_doc_old,@sett_doc_new,@n_doc_old,@n_doc_new numeric(18);
  set @c_sett_prefix_old = "old_name"."c_prefix";
  set @sett_doc_old = "old_name"."n_invoice_no";
  set @c_sett_year_old = "old_name"."c_year";
  set @c_doc_prefix_old = "uf_get_pk_component"("old_name"."n_srno",3);
  set @c_doc_year_old = "uf_get_pk_component"("old_name"."n_srno",1);
  set @n_doc_old = "old_name"."n_srno";
  update "invoice_mst" set "n_stop_trigger" = "n_stop_trigger"+1,"invoice_mst"."n_inv_bal_amt"
     = "invoice_mst"."n_inv_bal_amt"+"old_name"."n_amount"-"old_name"."n_return_amount"
    where "invoice_mst"."c_prefix" = "old_name"."c_prefix"
    and "invoice_mst"."n_srno" = "old_name"."n_invoice_no";
  delete from "tds_collected_billwise" where "n_srno" = "old_name"."n_srno" and "n_inv_no" = "old_name"."n_invoice_no" and "c_inv_prefix" = "old_name"."c_prefix";
  delete from "settle_mst"
    where "n_srno" = @n_doc_old
    and "c_prefix" = @c_doc_prefix_old
    and "c_year" = @c_doc_year_old
    and "n_srno1" = @sett_doc_old
    and "c_prefix1" = @c_sett_prefix_old
    and "c_year1" = @c_sett_year_old
end;
CREATE TRIGGER "cust_rec_det_new_process.insert_update_invoice_balance_amt" after insert order 1 on
"DBA"."cust_rec_det_new_process"
referencing new as "new_name"
for each row
begin
  declare @cust_code char(6);
  declare @doc_date,@doc_sett_date date;
  declare @new_settled_amt numeric(18,2);
  declare @c_doc_prefix,@c_doc_year,@c_sett_year,@c_sett_prefix char(2);
  declare @n_doc_no,@n_sett_doc_no numeric(18);
  set @n_doc_no = "new_name"."n_srno";
  set @c_doc_prefix = "uf_get_pk_component"("new_name"."n_srno",3);
  set @c_doc_year = "uf_get_pk_component"("new_name"."n_srno",1);
  set @doc_date = "new_name"."d_date";
  set @c_sett_prefix = "new_name"."c_prefix";
  set @n_sett_doc_no = "new_name"."n_invoice_no";
  set @cust_code = "new_name"."c_cust_code";
  set @c_sett_year = "new_name"."c_year";
  update "invoice_mst" set "n_stop_trigger" = "n_stop_trigger"+1,"invoice_mst"."n_inv_bal_amt"
     = "invoice_mst"."n_inv_bal_amt"-"new_name"."n_amount"+"new_name"."n_return_amount"
    where "invoice_mst"."c_prefix" = "new_name"."c_prefix"
    and "invoice_mst"."n_srno" = "new_name"."n_invoice_no";
  if "isnull"("new_name"."n_tds_amt",0) <> 0 then
    insert into "tds_collected_billwise"
      ( "n_srno","n_inv_no","c_inv_prefix","n_tds_amt","n_return" ) values
      ( "new_name"."n_srno","new_name"."n_invoice_no","new_name"."c_prefix","new_name"."n_tds_amt",0 ) 
  end if;
  set @new_settled_amt = "new_name"."n_amount"+"new_name"."n_return_amount";
  if "isnull"("new_name"."n_return_amount",0) = 0 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1","n_srno1",
      "n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values
      ( @c_doc_year,@c_doc_prefix,@n_doc_no,@c_sett_year,@c_sett_prefix,@n_sett_doc_no,
      -1*(@new_settled_amt),@cust_code,@doc_date,@doc_date,1 ) 
  end if
end;
CREATE TRIGGER "cust_rec_det_new_process.update_update_invoice_mst_balance" after update order 2 on
"DBA"."cust_rec_det_new_process"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @cust_code char(6);
  declare @doc_date_old,@doc_date_new,@doc_date date;
  declare @new_settled_amt numeric(18,2);
  declare @c_sett_prefix_old,@c_sett_prefix_new,@c_doc_prefix_old,@c_doc_prefix_new char(2);
  declare @c_sett_year_old,@c_sett_year_new,@c_doc_year_old,@c_doc_year_new char(2);
  declare @sett_doc_old,@sett_doc_new,@n_doc_old,@n_doc_new numeric(18);
  set @c_sett_prefix_old = "old_name"."c_prefix";
  set @c_sett_prefix_new = "new_name"."c_prefix";
  set @sett_doc_old = "old_name"."n_invoice_no";
  set @sett_doc_new = "new_name"."n_invoice_no";
  set @cust_code = "new_name"."c_cust_code";
  set @c_sett_year_new = "new_name"."c_year";
  set @c_sett_year_old = "old_name"."c_year";
  --set @c_sett_year_new = null;
  set @c_doc_prefix_old = "uf_get_pk_component"("old_name"."n_srno",3);
  set @c_doc_prefix_new = "uf_get_pk_component"("new_name"."n_srno",3);
  set @c_doc_year_new = "uf_get_pk_component"("new_name"."n_srno",1);
  set @c_doc_year_old = "uf_get_pk_component"("old_name"."n_srno",1);
  set @n_doc_old = "old_name"."n_srno";
  set @n_doc_new = "new_name"."n_srno";
  set @doc_date = "new_name"."d_date";
  update "invoice_mst" set "n_stop_trigger" = "n_stop_trigger"+1,"invoice_mst"."n_inv_bal_amt"
     = "invoice_mst"."n_inv_bal_amt"+"old_name"."n_amount"-"new_name"."n_amount"-"old_name"."n_return_amount"+"new_name"."n_return_amount",
    "n_chq_return" = "isnull"("n_chq_return",0)+if "isnull"("old_name"."n_return_amount",0) = 0 and "isnull"("new_name"."n_return_amount",0) <> 0 then 1 else 0 endif
    where "invoice_mst"."c_prefix" = "old_name"."c_prefix"
    and "invoice_mst"."n_srno" = "old_name"."n_invoice_no";
  if "isnull"("new_name"."n_tds_amt",0) <> 0 then
    delete from "tds_collected_billwise" where "n_srno" = "old_name"."n_srno" and "n_inv_no" = "old_name"."n_invoice_no" and "c_inv_prefix" = "old_name"."c_prefix";
    insert into "tds_collected_billwise"
      ( "n_srno","n_inv_no","c_inv_prefix","n_tds_amt","n_return" ) values
      ( "new_name"."n_srno","new_name"."n_invoice_no","new_name"."c_prefix","new_name"."n_tds_amt",if "isnull"("new_name"."n_return_amount",0) > 0 then 1 else 0 endif ) 
  end if;
  delete from "settle_mst"
    where "n_srno" = @n_doc_old
    and "c_prefix" = @c_doc_prefix_old
    and "c_year" = @c_doc_year_old
    and "n_srno1" = @sett_doc_old
    and "c_prefix1" = @c_sett_prefix_old
    and "c_year1" = @c_sett_year_old;
  set @new_settled_amt = "new_name"."n_amount"+"new_name"."n_return_amount";
  if "isnull"("new_name"."n_return_amount",0) = 0 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1","n_srno1",
      "n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values
      ( @c_doc_year_new,@c_doc_prefix_new,@n_doc_new,@c_sett_year_new,@c_sett_prefix_new,@sett_doc_new,
      -1*(@new_settled_amt),@cust_code,@doc_date,@doc_date,1 ) 
  end if
end;
CREATE TRIGGER "cust_rec_det.insert_update_invoice_balance_amt" after insert order 1 on
"DBA"."cust_rec_det"
referencing new as "new_name"
for each row
begin
  declare @cust_code char(6);
  declare @doc_date,@doc_sett_date date;
  declare @new_settled_amt numeric(18,2);
  declare @c_doc_prefix,@c_doc_year,@c_sett_year,@c_sett_prefix char(2);
  declare @n_doc_no,@n_sett_doc_no numeric(18);
  set @n_doc_no = "new_name"."n_srno";
  set @c_doc_prefix = "uf_get_pk_component"("new_name"."n_srno",3);
  set @c_doc_year = "uf_get_pk_component"("new_name"."n_srno",1);
  set @doc_date = "new_name"."d_date";
  set @c_sett_prefix = "new_name"."c_prefix";
  set @n_sett_doc_no = "new_name"."n_invoice_no";
  set @c_sett_year = null;
  update "invoice_mst" set "n_stop_trigger" = "n_stop_trigger"+1,"invoice_mst"."n_inv_bal_amt"
     = "invoice_mst"."n_inv_bal_amt"-"new_name"."n_amount"+"new_name"."n_return_amount"
    where "invoice_mst"."c_prefix" = "new_name"."c_prefix"
    and "invoice_mst"."n_srno" = "new_name"."n_invoice_no";
  if "isnull"("new_name"."n_tds_amt",0) <> 0 then
    insert into "tds_collected_billwise"
      ( "n_srno","n_inv_no","c_inv_prefix","n_tds_amt","n_return" ) values
      ( "new_name"."n_srno","new_name"."n_invoice_no","new_name"."c_prefix","new_name"."n_tds_amt",0 ) 
  end if;
  set @cust_code = "new_name"."c_cust_code";
  set @c_sett_year = "new_name"."c_year";
  set @new_settled_amt = "new_name"."n_amount"+"new_name"."n_return_amount";
  if "isnull"("new_name"."n_return_amount",0) = 0 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1","n_srno1",
      "n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values
      ( @c_doc_year,@c_doc_prefix,@n_doc_no,@c_sett_year,@c_sett_prefix,@n_sett_doc_no,
      -1*(@new_settled_amt),@cust_code,@doc_date,@doc_date,1 ) 
  end if
end;
CREATE TRIGGER "cust_rec_det.update_update_invoice_mst_balance" after update order 2 on
"DBA"."cust_rec_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @cust_code char(6);
  declare @doc_date,@doc_date_old,@doc_date_new date;
  declare @new_settled_amt numeric(18,2);
  declare @c_sett_prefix_old,@c_sett_prefix_new,@c_doc_prefix_old,@c_doc_prefix_new char(2);
  declare @c_sett_year_old,@c_sett_year_new,@c_doc_year_old,@c_doc_year_new char(2);
  declare @sett_doc_old,@sett_doc_new,@n_doc_old,@n_doc_new numeric(18);
  set @c_sett_prefix_old = "old_name"."c_prefix";
  set @c_sett_prefix_new = "new_name"."c_prefix";
  set @sett_doc_old = "old_name"."n_invoice_no";
  set @sett_doc_new = "new_name"."n_invoice_no";
  set @c_sett_year_old = "old_name"."c_year";
  set @c_sett_year_new = null;
  set @c_doc_prefix_old = "uf_get_pk_component"("old_name"."n_srno",3);
  set @c_doc_prefix_new = "uf_get_pk_component"("new_name"."n_srno",3);
  set @c_doc_year_new = "uf_get_pk_component"("new_name"."n_srno",1);
  set @c_doc_year_old = "uf_get_pk_component"("old_name"."n_srno",1);
  set @n_doc_old = "old_name"."n_srno";
  set @n_doc_new = "new_name"."n_srno";
  select "d_rec_date" into @doc_date from "cust_rec" where "n_srno" = "new_name"."n_srno";
  update "invoice_mst" set "n_stop_trigger" = "n_stop_trigger"+1,"invoice_mst"."n_inv_bal_amt"
     = "invoice_mst"."n_inv_bal_amt"+"old_name"."n_amount"-"new_name"."n_amount"-"old_name"."n_return_amount"+"new_name"."n_return_amount",
    "n_chq_return" = "isnull"("n_chq_return",0)+1
    where "invoice_mst"."c_prefix" = "old_name"."c_prefix"
    and "invoice_mst"."n_srno" = "old_name"."n_invoice_no";
  if "isnull"("new_name"."n_tds_amt",0) <> 0 then
    delete from "tds_collected_billwise" where "n_srno" = "old_name"."n_srno" and "n_inv_no" = "old_name"."n_invoice_no" and "c_inv_prefix" = "old_name"."c_prefix";
    insert into "tds_collected_billwise"
      ( "n_srno","n_inv_no","c_inv_prefix","n_tds_amt","n_return" ) values
      ( "new_name"."n_srno","new_name"."n_invoice_no","new_name"."c_prefix","new_name"."n_tds_amt",if "isnull"("new_name"."n_return_amount",0) > 0 then 1 else 0 endif ) 
  end if;
  delete from "settle_mst"
    where "n_srno" = @n_doc_old
    and "c_prefix" = @c_doc_prefix_old
    and "c_year" = @c_doc_year_old
    and "n_srno1" = @sett_doc_old
    and "c_prefix1" = @c_sett_prefix_old
    and "c_year1" = @c_sett_year_old;
  set @c_sett_year_new = "new_name"."c_year";
  set @doc_date = "new_name"."d_date";
  set @cust_code = "new_name"."c_cust_code";
  set @new_settled_amt = "new_name"."n_amount"+"new_name"."n_return_amount";
  if "isnull"("new_name"."n_return_amount",0) = 0 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1","n_srno1",
      "n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values
      ( @c_doc_year_new,@c_doc_prefix_new,@n_doc_new,@c_sett_year_new,@c_sett_prefix_new,@sett_doc_new,
      -1*(@new_settled_amt),@cust_code,@doc_date,@doc_date,1 ) 
  end if
end;
CREATE TRIGGER "cust_rec_new_process.delete_update_invoice_balance" before delete order 2 on
"DBA"."cust_rec_new_process"
referencing old as "old_name"
for each row
begin
  declare "d_manual_receipt" decimal(1);
  select "n_enable_manual_receipt" into "d_manual_receipt" from "system_parameter";
  if "old_name"."n_ref_no" <> 0 and "d_manual_receipt" <> 0 then
    update "manual_receipt" set "n_flag" = 0 where "manual_receipt"."n_srno" = "old_name"."n_ref_no"
  end if;
  delete from "ledger"
    where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno";
  delete from "cust_advance"
    where "cust_advance"."c_prefix" = "old_name"."c_prefix"
    and "cust_advance"."n_srno" = "old_name"."n_srno";
  delete from "remarks"
    where "remarks"."c_prefix" = "old_name"."c_prefix"
    and "remarks"."n_tran_id" = "old_name"."n_srno";
  update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = null,
    "crnt_mst"."n_inv_recp_no" = 0 where "crnt_mst"."c_prefix" = "old_name"."c_crnt_prefix" and "crnt_mst"."n_srno" = "old_name"."n_crnt_no";
  update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
    "mdadj_mst"."n_inv_recp_no" = 0 where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_prefix" and "mdadj_mst"."n_srno" = "old_name"."n_crnt_no";
  update "cust_advance" set "cust_advance"."c_inv_prefix" = null,
    "cust_advance"."n_inv_no" = 0 where "cust_advance"."c_prefix" = "old_name"."c_adv_prefix" and "cust_advance"."n_srno" = "old_name"."n_adv_no";
  update "mdadj_adv_mst" set "mdadj_adv_mst"."c_inv_recp_prefix" = null,"mdadj_adv_mst"."n_inv_recp_no" = 0
    where "mdadj_adv_mst"."c_prefix" = "old_name"."c_adv_prefix" and "mdadj_adv_mst"."n_srno" = "old_name"."n_adv_no";
  update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = null,
    "cust_dbnt"."n_inv_recp_no" = 0 where "cust_dbnt"."c_prefix" = "old_name"."c_dbnt_prefix" and "cust_dbnt"."n_srno" = "old_name"."n_dbnt_no";
  update "mdadj_dbnt_mst" set "mdadj_dbnt_mst"."c_inv_recp_prefix" = null,
    "mdadj_dbnt_mst"."n_inv_recp_no" = 0 where "mdadj_dbnt_mst"."c_prefix" = "old_name"."c_dbnt_prefix" and "mdadj_dbnt_mst"."n_srno" = "old_name"."n_dbnt_no";
  insert into "deleted_mst"( "c_prefix","n_srno","d_date","c_code","n_amount","c_remark" ) values
    ( "old_name"."c_prefix","old_name"."n_srno","old_name"."d_rec_date","old_name"."c_cust_code","old_name"."n_total","old_name"."c_debit_act_code" ) ;
  update "cust_tmp_rec" set "c_ref_prefix" = null,"n_ref_srno" = 0,"n_status" = 0
    where "cust_tmp_rec"."c_prefix" = "old_name"."c_proof_prefix" and "cust_tmp_rec"."n_srno" = "old_name"."n_proof_srno";
  call "usp_check_update_last_tran_info"(1,"old_name"."c_cust_code",8,"old_name"."c_prefix","old_name"."n_srno","old_name"."d_rec_date");
  delete from "settle_mst_header"
    where "c_year" = "old_name"."c_year"
    and "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
end;
CREATE TRIGGER "cust_rec_new_process.insert_ledger_invoice_update" before insert order 1 on
-----------------------------------------------------------------------------
"DBA"."cust_rec_new_process"
referencing new as "new_name"
for each row
begin
  declare "kasar_amount" decimal(14,2);
  declare "cust_total" decimal(14,2);
  declare "d_manual_receipt" decimal(1);
  declare "debit_act_code" char(6);
  declare "cust_opp_act_code",@disc_act_code,@debit_act_code_new char(6);
  declare "b_reconcile" decimal(1);
  declare "b1_reconcile" decimal(1);
  /*Totally 3 Sections -
1. When Cheque or Cash Entry is Entered
2. When Cheque Gets Reconciled
3. When Cheque Gets Returned
*/
  if "new_name"."n_cash_cr_cust" = 1 and "new_name"."c_debit_act_code" = 'CASH' then
    if "new_name"."n_advance" = 0 and "new_name"."n_detail" = 1 then
      return
    end if
  end if;
  if "new_name"."c_debit_act_code" = 'CASH' then
    set "debit_act_code" = 'CASH';
    set "cust_opp_act_code" = 'CASH';
    set "b_reconcile" = 1
  else
    set "debit_act_code" = 'RCRECV';
    if("new_name"."d_reconcile_date" is not null and "new_name"."n_return" = 0) then
      set "cust_opp_act_code" = "new_name"."c_debit_act_code";
      set "b_reconcile" = 1
    else
      set "cust_opp_act_code" = 'RCRECV';
      set "b_reconcile" = 0
    end if end if;
  if "new_name"."c_disc_act" is null then
    set @disc_act_code = '-DISRC'
  else
    set @disc_act_code = "new_name"."c_disc_act"
  end if;
  /*
//Deleting Old Entry Not Applicable for Insert
delete from ledger
where ledger.c_prefix=old_name.c_prefix
and ledger.n_tran_no=old_name.n_srno;
delete from remarks
where remarks.c_prefix=old_name.c_prefix
and remarks.n_tran_id=old_name.n_srno;
*/
  //Set Coin Adjustment Amount
  if "new_name"."n_advance" = 0 then
    set "kasar_amount" = "new_name"."n_total"-"new_name"."n_chq_amount"+"new_name"."n_disc";
    set "cust_total" = "new_name"."n_total"+"new_name"."n_disc"
  else
    set "kasar_amount" = 0;
    set "cust_total" = "new_name"."n_chq_amount"
  end if;
  //Update Manual Receipt Table if Enabled for Tracking
  select "n_enable_manual_receipt" into "d_manual_receipt" from "system_parameter";
  if "new_name"."n_ref_no" <> 0 and "d_manual_receipt" <> 0 then
    update "manual_receipt" set "n_flag" = 1 where "manual_receipt"."n_srno" = "new_name"."n_ref_no"
  end if;
  //Insert Remark 
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_chq_no","new_name"."d_chq_dt",if "new_name"."n_return" = 1 then ': Check Returned : ' endif+"isNUll"("new_name"."c_remark",'') ) ;
  if "new_name"."n_yearend_flag" = 0 then
    insert into "settle_mst_header"
      ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
      "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
      "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
      "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
      "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
      "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
      "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type","n_ref_no","d_ref_date" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."d_rec_date","new_name"."c_cust_code","new_name"."c_sman_code","new_name"."c_col_agent","b_reconcile",0,"new_name"."n_reverse_disc","new_name"."n_chq_amount","new_name"."n_total",
      0,0,"new_name"."n_crnt_no","new_name"."c_crnt_prefix","new_name"."n_crnt_amt","new_name"."n_dbnt_no","new_name"."c_dbnt_prefix","new_name"."n_dbnt_amt",
      "new_name"."n_adv_no","new_name"."c_adv_prefix","new_name"."n_adv_amt",0,null,0,0,0,0,0,0,0,
      null,0,0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,0,0,null,null,
      0,"new_name"."c_return_user","new_name"."c_sys_ip","new_name"."c_computer_name",0,0,"new_name"."c_ref_id",0,null,"new_name"."n_inv_disc_amt","new_name"."n_reverse_other_charge",
      "new_name"."n_other_charge",0,null,"new_name"."c_chq_no","new_name"."d_chq_dt",0,0,0,null,null,0,
      "new_name"."c_remark","new_name"."n_out_station","new_name"."c_debit_act_code","new_name"."n_advance",0,0,0,null,
      "new_name"."c_act_code",6,"new_name"."n_ref_no",null ) 
  end if;
  //1st Section 
  //Update Credit Note Settlement Details
  if "new_name"."n_return" = 0 and "new_name"."n_crnt_no" <> 0 and "new_name"."n_yearend_flag" = 0 then
    if "new_name"."c_crnt_prefix" = 'MD' then
      update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("mdadj_mst"."c_prefix" = "new_name"."c_crnt_prefix"
        and "mdadj_mst"."n_srno" = "new_name"."n_crnt_no")
        and "mdadj_mst"."c_inv_recp_prefix" is null
        and "mdadj_mst"."n_inv_recp_no" = 0
    else
      update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "crnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("crnt_mst"."c_prefix" = "new_name"."c_crnt_prefix"
        and "crnt_mst"."n_srno" = "new_name"."n_crnt_no")
        and "crnt_mst"."c_inv_recp_prefix" is null
        and "crnt_mst"."n_inv_recp_no" = 0
    end if;
    if sqlstate = '02000' then
      raiserror 18000 "Credit note is already settlled. You cannot Save this Customer Receipt. "
    end if end if;
  //Update Debit Note Settlement Details
  if "new_name"."n_return" = 0 and "new_name"."n_dbnt_no" <> 0 and "new_name"."c_dbnt_prefix" <> 'MB' and "new_name"."n_yearend_flag" = 0 then
    update "cust_dbnt"
      set "cust_dbnt"."c_inv_recp_prefix" = "new_name"."c_prefix",
      "cust_dbnt"."n_inv_recp_no" = "new_name"."n_srno"
      where "cust_dbnt"."c_prefix" = "new_name"."c_dbnt_prefix"
      and "cust_dbnt"."n_srno" = "new_name"."n_dbnt_no"
      and "cust_dbnt"."c_inv_recp_prefix" is null
      and "cust_dbnt"."n_inv_recp_no" = 0;
    if sqlstate = '02000' then
      raiserror 18000 "Debit note is already settlled. You cannot Save this customer receipt. "
    end if end if;
  //Update Multi Debit Note Settlement Details
  if "new_name"."n_return" = 0 and "new_name"."n_dbnt_no" <> 0 and "new_name"."c_dbnt_prefix" = 'MB' and "new_name"."n_yearend_flag" = 0 then
    update "mdadj_dbnt_mst"
      set "mdadj_dbnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
      "mdadj_dbnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
      where "mdadj_dbnt_mst"."c_prefix" = "new_name"."c_dbnt_prefix"
      and "mdadj_dbnt_mst"."n_srno" = "new_name"."n_dbnt_no"
      and "mdadj_dbnt_mst"."c_inv_recp_prefix" is null
      and "mdadj_dbnt_mst"."n_inv_recp_no" = 0;
    if sqlstate = '02000' then
      raiserror 18000 "Debit note is already settlled. You cannot Save this customer receipt. "
    end if end if;
  //Update Advance Note Settlement Details
  if "new_name"."n_return" = 0 and "new_name"."n_adv_no" <> 0 and "new_name"."n_yearend_flag" = 0 then
    if "new_name"."c_adv_prefix" = 'MV' then
      update "mdadj_adv_mst"
        set "mdadj_adv_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "mdadj_adv_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where "mdadj_adv_mst"."c_prefix" = "new_name"."c_adv_prefix"
        and "mdadj_adv_mst"."n_srno" = "new_name"."n_adv_no"
        and "mdadj_adv_mst"."c_inv_recp_prefix" is null
        and "mdadj_adv_mst"."n_inv_recp_no" = 0
    else
      update "cust_advance"
        set "cust_advance"."c_inv_prefix" = "new_name"."c_prefix",
        "cust_advance"."n_inv_no" = "new_name"."n_srno"
        where "cust_advance"."c_prefix" = "new_name"."c_adv_prefix"
        and "cust_advance"."n_srno" = "new_name"."n_adv_no"
        and "cust_advance"."c_inv_prefix" is null
        and "cust_advance"."n_inv_no" = 0
    end if;
    //if this advance not is already settled then will give error message 
    if sqlstate = '02000' then
      raiserror 18000 "Advance note is already settled. You cannot Save this Receipt. "
    end if end if;
  //Update Discount in Ledger
  if "new_name"."n_discount_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",@disc_act_code,"new_name"."d_rec_date",
      "new_name"."n_discount_amt","new_name"."c_cust_code" ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","new_name"."d_rec_date",
      -"new_name"."n_discount_amt",@disc_act_code ) 
  end if;
  if "new_name"."n_disc" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",@disc_act_code,"new_name"."d_rec_date",
      -1*"new_name"."n_disc","new_name"."c_cust_code" ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","new_name"."d_rec_date",
      "new_name"."n_disc",@disc_act_code ) 
  end if;
  //Update Other Charges in Ledger
  if "new_name"."n_other_charge" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'OCHARG',"new_name"."d_rec_date",
      "new_name"."n_other_charge","new_name"."c_cust_code" ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","new_name"."d_rec_date",
      -"new_name"."n_other_charge",'OCHARG' ) 
  end if;
  //Update Cheque Amount to Cash, Bank or Reconcile Account
  if "new_name"."n_chq_amount" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","debit_act_code","new_name"."d_rec_date",
      "new_name"."n_chq_amount","new_name"."c_cust_code" ) 
  end if;
  //TDS  
  if "new_name"."n_tds_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tds_act_code","new_name"."d_rec_date",
      "isnull"("new_name"."n_tds_amt",0),"new_name"."c_cust_code" ) 
  end if;
  //Update Total Amount to Customer Account
  if "cust_total" <> 0 or "new_name"."n_tds_amt" <> 0 then
    if "new_name"."n_cash_cr_cust" = 1 then
      if "new_name"."n_detail" = 0 and "new_name"."n_advance" = 1 then
        set @debit_act_code_new = "new_name"."c_cust_code"
      else
        set @debit_act_code_new = 'CASH'
      end if end if;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",if "new_name"."n_cash_cr_cust" = 1 then @debit_act_code_new else "new_name"."c_cust_code" endif,"new_name"."d_rec_date",
      -("cust_total"+"isnull"("new_name"."n_tds_amt",0)),"cust_opp_act_code" ) 
  end if;
  //Update Diffence Amount to Kasar Account or as Advance Note
  if "kasar_amount" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"new_name"."d_rec_date",
      "kasar_amount","new_name"."c_cust_code" ) 
  end if;
  if "new_name"."n_advance" = 1 then
    select "n_reconsile" into "b1_reconcile" from "cust_advance"
      where "cust_advance"."c_prefix" = "new_name"."c_prefix"
      and "cust_advance"."n_srno" = "new_name"."n_srno";
    if sqlcode = 0 then
      update "cust_advance" set "c_cust_code" = "new_name"."c_cust_code",
        "d_adv_date" = "new_name"."d_rec_date",
        "n_total" = "new_name"."n_chq_amount"-"new_name"."n_total"-"new_name"."n_disc",
        "n_reconsile" = "b_reconcile"
        where "cust_advance"."c_prefix" = "new_name"."c_prefix"
        and "cust_advance"."n_srno" = "new_name"."n_srno"
    else
      insert into "cust_advance"( "c_prefix","n_srno","c_cust_code","d_adv_date","n_total","n_inv_no","n_reconsile","c_year","n_yearend_flag" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code",
        "new_name"."d_rec_date","new_name"."n_chq_amount"-"new_name"."n_total"-"new_name"."n_disc",0,"b_reconcile","new_name"."c_year","new_name"."n_yearend_flag" ) 
    end if end if;
  //2nd Section 
  //When Cheque Get Reconciled
  if "new_name"."d_reconcile_date" is not null and "new_name"."c_debit_act_code" <> 'CASH' then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'RCRECV',"new_name"."d_reconcile_date",
      -"new_name"."n_chq_amount","new_name"."c_debit_act_code" ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_debit_act_code","new_name"."d_reconcile_date",
      "new_name"."n_chq_amount","new_name"."c_cust_code" ) 
  end if;
  //3rd Section 
  //If Cheque Returns (Assumption that Reconciliation Date is not null (Because Bank need to be Credited)
  if "new_name"."d_reconcile_date" is not null and "new_name"."n_return" = 1 then
    //Update Receipt Det to Zero
    update "cust_rec_det_new_process" set "cust_rec_det_new_process"."n_return_amount" = "cust_rec_det_new_process"."n_amount"
      where "cust_rec_det_new_process"."n_srno" = "new_name"."n_srno";
    //Update Discount in Ledger
    if "new_name"."n_discount_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",@disc_act_code,"isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        -"new_name"."n_discount_amt","new_name"."c_cust_code" ) ;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        "new_name"."n_discount_amt",@disc_act_code ) 
    end if;
    //Update Other Charges in Ledger
    if "new_name"."n_other_charge" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",'OCHARG',"isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        -"new_name"."n_other_charge","new_name"."c_cust_code" ) ;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        "new_name"."n_other_charge",'OCHARG' ) 
    end if;
    //Update Cheque Amount to Cash, Bank or Reconcile Account
    if "new_name"."n_chq_amount" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        "new_name"."n_chq_amount","new_name"."c_debit_act_code" ) 
    end if;
    //TDS
    if "new_name"."n_tds_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tds_act_code","isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        -"isnull"("new_name"."n_tds_amt",0),"new_name"."c_debit_act_code" ) 
    end if;
    //Update Total Amount to Customer Account
    if "cust_total" <> 0 or "new_name"."n_tds_amt" <> 0 then
      if "new_name"."n_cash_cr_cust" = 1 then
        if "new_name"."n_detail" = 0 and "new_name"."n_advance" = 1 then
          set @debit_act_code_new = "new_name"."c_cust_code"
        else
          set @debit_act_code_new = 'CASH'
        end if end if;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",if "new_name"."n_cash_cr_cust" = 1 then @debit_act_code_new else "new_name"."c_cust_code" endif,"isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        ("cust_total"+"isnull"("new_name"."n_tds_amt",0)),"cust_opp_act_code" ) 
    end if;
    //Update Diffence Amount to Kasar Account or as Advance Note
    if "kasar_amount" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        -"kasar_amount","new_name"."c_cust_code" ) 
    end if;
    if "new_name"."n_advance" = 1 then
      delete from "cust_advance"
        where "cust_advance"."c_prefix" = "new_name"."c_prefix"
        and "cust_advance"."n_srno" = "new_name"."n_srno"
    end if end if;
  if "new_name"."c_act_code" is not null and "new_name"."c_act_code" <> '' and "new_name"."c_debit_act_code" = 'CASH' then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_act_code","new_name"."d_rec_date",
      "new_name"."n_total",'CASH' ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CASH',"new_name"."d_rec_date",
      -"new_name"."n_total","new_name"."c_act_code" ) 
  end if;
  call "usp_check_update_last_tran_info"(0,"new_name"."c_cust_code",8,"new_name"."c_prefix","new_name"."n_srno","new_name"."d_rec_date")
end;
CREATE TRIGGER "cust_rec_new_process.update_update ledger_invoice_balance" after update order 1 on
"DBA"."cust_rec_new_process"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "kasar_amount" decimal(14,2);
  declare "cust_total" decimal(14,2);
  declare "d_manual_receipt" decimal(1);
  declare "debit_act_code" char(6);
  declare "cust_opp_act_code",@disc_act_code,@debit_act_code_new char(6);
  declare "b_reconcile" decimal(1);
  declare "b1_reconcile" decimal(1);
  if "old_name"."n_stop_trigger" <> "new_name"."n_stop_trigger" then
    return
  end if;
  /*Totally 3 Sections -
1. When Cheque or Cash Entry is Entered
2. When Cheque Gets Reconciled
3. When Cheque Gets Returned
*/
  if "new_name"."c_debit_act_code" = 'CASH' then
    set "debit_act_code" = 'CASH';
    set "cust_opp_act_code" = 'CASH';
    set "b_reconcile" = 1
  else
    set "debit_act_code" = 'RCRECV';
    if("new_name"."d_reconcile_date" is not null and "new_name"."n_return" = 0) then
      set "cust_opp_act_code" = "new_name"."c_debit_act_code";
      set "b_reconcile" = 1
    else
      set "cust_opp_act_code" = 'RCRECV';
      set "b_reconcile" = 0
    end if end if;
  if "old_name"."n_slip_no" = 0 and "new_name"."n_slip_no" <> 0 then
    return
  end if;
  if "new_name"."c_disc_act" is null then
    set @disc_act_code = '-DISRC'
  else
    set @disc_act_code = "new_name"."c_disc_act"
  end if;
  //Set Coin Adjustment Amount
  if "new_name"."n_advance" = 0 then
    set "kasar_amount" = "new_name"."n_total"-"new_name"."n_chq_amount"+"new_name"."n_disc";
    set "cust_total" = "new_name"."n_total"+"new_name"."n_disc"
  else
    set "kasar_amount" = 0;
    set "cust_total" = "new_name"."n_chq_amount"
  end if;
  //Deleting Old Entry
  delete from "ledger"
    where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno";
  if "new_name"."n_cash_cr_cust" = 1 and "new_name"."c_debit_act_code" = 'CASH' then
    if "new_name"."n_advance" = 0 and "new_name"."n_detail" = 1 then
      return
    end if
  end if;
  delete from "remarks"
    where "remarks"."c_prefix" = "old_name"."c_prefix"
    and "remarks"."n_tran_id" = "old_name"."n_srno";
  delete from "cust_advance"
    where "cust_advance"."c_prefix" = "old_name"."c_prefix"
    and "cust_advance"."n_srno" = "old_name"."n_srno";
  if "old_name"."c_crnt_prefix" <> "new_name"."c_crnt_prefix" or "old_name"."n_crnt_no" <> "new_name"."n_crnt_no" or "new_name"."n_return" = 1 then
    update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = null,
      "crnt_mst"."n_inv_recp_no" = 0 where "crnt_mst"."c_prefix" = "old_name"."c_crnt_prefix" and "crnt_mst"."n_srno" = "old_name"."n_crnt_no";
    update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
      "mdadj_mst"."n_inv_recp_no" = 0 where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_prefix" and "mdadj_mst"."n_srno" = "old_name"."n_crnt_no"
  end if;
  if "old_name"."c_adv_prefix" <> "new_name"."c_adv_prefix" or "old_name"."n_adv_no" <> "new_name"."n_adv_no" or "new_name"."n_return" = 1 then
    update "cust_advance" set "cust_advance"."c_inv_prefix" = null,
      "cust_advance"."n_inv_no" = 0 where "cust_advance"."c_prefix" = "old_name"."c_adv_prefix" and "cust_advance"."n_srno" = "old_name"."n_adv_no";
    update "mdadj_adv_mst" set "mdadj_adv_mst"."c_inv_recp_prefix" = null,
      "mdadj_adv_mst"."n_inv_recp_no" = 0 where "mdadj_adv_mst"."c_prefix" = "old_name"."c_adv_prefix" and "mdadj_adv_mst"."n_srno" = "old_name"."n_adv_no"
  end if;
  if "old_name"."c_dbnt_prefix" <> "new_name"."c_dbnt_prefix" or "old_name"."n_dbnt_no" <> "new_name"."n_dbnt_no" or "new_name"."n_return" = 1 then
    update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = null,
      "cust_dbnt"."n_inv_recp_no" = 0 where "cust_dbnt"."c_prefix" = "old_name"."c_dbnt_prefix" and "cust_dbnt"."n_srno" = "old_name"."n_dbnt_no"
  end if;
  if "old_name"."n_return" = 1 and "new_name"."n_return" = 0 then
    update "cust_rec_det_new_process" set "cust_rec_det_new_process"."n_return_amount" = 0
      where "cust_rec_det_new_process"."n_srno" = "old_name"."n_srno"
  end if;
  //Update Manual Receipt Table if Enabled for Tracking
  select "n_enable_manual_receipt" into "d_manual_receipt" from "system_parameter";
  if "old_name"."n_ref_no" <> "new_name"."n_ref_no" then
    if "old_name"."n_ref_no" <> 0 and "d_manual_receipt" <> 0 then
      update "manual_receipt" set "n_flag" = 0 where "manual_receipt"."n_srno" = "old_name"."n_ref_no"
    end if;
    if "new_name"."n_ref_no" <> 0 and "d_manual_receipt" <> 0 then
      update "manual_receipt" set "n_flag" = 1 where "manual_receipt"."n_srno" = "new_name"."n_ref_no"
    end if end if;
  //Insert Remark 
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_chq_no","new_name"."d_chq_dt",if "new_name"."n_return" = 1 then ': Check Returned : ' endif+"isNUll"("new_name"."c_remark",'') ) ;
  delete from "settle_mst_header"
    where "n_srno" = "old_name"."n_srno" and "c_prefix" = "old_name"."c_prefix" and "c_year" = "old_name"."c_year";
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
    "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
    "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
    "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
    "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
    "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
    "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type","n_ref_no","d_ref_date" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."d_rec_date","new_name"."c_cust_code","new_name"."c_sman_code","new_name"."c_col_agent","b_reconcile",0,"new_name"."n_reverse_disc","new_name"."n_chq_amount","new_name"."n_total",
    0,0,"new_name"."n_crnt_no","new_name"."c_crnt_prefix","new_name"."n_crnt_amt","new_name"."n_dbnt_no","new_name"."c_dbnt_prefix","new_name"."n_dbnt_amt",
    "new_name"."n_adv_no","new_name"."c_adv_prefix","new_name"."n_adv_amt",0,null,0,0,0,0,0,0,0,
    null,0,0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,0,0,null,null,
    0,"new_name"."c_return_user","new_name"."c_sys_ip","new_name"."c_computer_name",0,0,"new_name"."c_ref_id",0,null,"new_name"."n_inv_disc_amt","new_name"."n_reverse_other_charge",
    "new_name"."n_other_charge",0,null,"new_name"."c_chq_no","new_name"."d_chq_dt",0,0,0,null,null,0,
    "new_name"."c_remark","new_name"."n_out_station","new_name"."c_debit_act_code","new_name"."n_advance",0,0,0,null,
    "new_name"."c_act_code",6,"new_name"."n_ref_no",null ) ;
  //1st Section 
  //Update Credit Note Settlement Details
  if "new_name"."n_return" = 0 and "new_name"."n_crnt_no" <> 0 and("old_name"."c_crnt_prefix" <> "new_name"."c_crnt_prefix" or "old_name"."n_crnt_no" <> "new_name"."n_crnt_no") then
    if "new_name"."c_crnt_prefix" = 'MD' then
      update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("mdadj_mst"."c_prefix" = "new_name"."c_crnt_prefix"
        and "mdadj_mst"."n_srno" = "new_name"."n_crnt_no")
        and "mdadj_mst"."c_inv_recp_prefix" is null
        and "mdadj_mst"."n_inv_recp_no" = 0
    else
      update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "crnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("crnt_mst"."c_prefix" = "new_name"."c_crnt_prefix"
        and "crnt_mst"."n_srno" = "new_name"."n_crnt_no")
        and "crnt_mst"."c_inv_recp_prefix" is null
        and "crnt_mst"."n_inv_recp_no" = 0
    end if;
    if sqlstate = '02000' then
      raiserror 18000 "Credit note is already settlled. You cannot Save this Customer Receipt. "
    end if end if;
  //Update Debit Note Settlement Details
  if "new_name"."c_dbnt_prefix" <> 'MB' and "new_name"."n_return" = 0 and "new_name"."n_dbnt_no" <> 0 and("old_name"."c_dbnt_prefix" <> "new_name"."c_dbnt_prefix" or "old_name"."n_dbnt_no" <> "new_name"."n_dbnt_no") then
    update "cust_dbnt"
      set "cust_dbnt"."c_inv_recp_prefix" = "new_name"."c_prefix",
      "cust_dbnt"."n_inv_recp_no" = "new_name"."n_srno"
      where "cust_dbnt"."c_prefix" = "new_name"."c_dbnt_prefix"
      and "cust_dbnt"."n_srno" = "new_name"."n_dbnt_no"
      and "cust_dbnt"."c_inv_recp_prefix" is null
      and "cust_dbnt"."n_inv_recp_no" = 0;
    if sqlstate = '02000' then
      raiserror 18000 "Debit note is already settled. You cannot Save this customer receipt. "
    end if end if;
  //Update Multi Debit Note Settlement Details
  if "old_name"."c_dbnt_prefix" = 'MB' and("old_name"."c_dbnt_prefix" <> "new_name"."c_dbnt_prefix" or "old_name"."n_dbnt_no" <> "new_name"."n_dbnt_no" or "new_name"."n_return" = 1) then
    update "mdadj_dbnt_mst" set "mdadj_dbnt_mst"."c_inv_recp_prefix" = null,
      "mdadj_dbnt_mst"."n_inv_recp_no" = 0
      where "mdadj_dbnt_mst"."c_prefix" = "old_name"."c_dbnt_prefix" and "mdadj_dbnt_mst"."n_srno" = "old_name"."n_dbnt_no"
  end if;
  if "new_name"."n_return" = 0 and "new_name"."n_dbnt_no" <> 0 and "new_name"."c_dbnt_prefix" = 'MB' and("old_name"."c_dbnt_prefix" <> "new_name"."c_dbnt_prefix" or "old_name"."n_dbnt_no" <> "new_name"."n_dbnt_no") then
    update "mdadj_dbnt_mst"
      set "mdadj_dbnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
      "mdadj_dbnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
      where "mdadj_dbnt_mst"."c_prefix" = "new_name"."c_dbnt_prefix"
      and "mdadj_dbnt_mst"."n_srno" = "new_name"."n_dbnt_no"
      and "mdadj_dbnt_mst"."c_inv_recp_prefix" is null
      and "mdadj_dbnt_mst"."n_inv_recp_no" = 0;
    print "new_name"."c_dbnt_prefix";
    print "new_name"."n_dbnt_no";
    if sqlstate = '02000' then
      raiserror 18000 "Multi debit note is already settled. You cannot Save this customer receipt. "
    end if end if;
  //Update Advance Note Settlement Details
  if "new_name"."n_return" = 0 and "new_name"."n_adv_no" <> 0 and("old_name"."c_adv_prefix" <> "new_name"."c_adv_prefix" or "old_name"."n_adv_no" <> "new_name"."n_adv_no") then
    if "new_name"."c_adv_prefix" = 'MV' then
      update "mdadj_adv_mst"
        set "mdadj_adv_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "mdadj_adv_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where "mdadj_adv_mst"."c_prefix" = "new_name"."c_adv_prefix"
        and "mdadj_adv_mst"."n_srno" = "new_name"."n_adv_no"
        and "mdadj_adv_mst"."c_inv_recp_prefix" is null
        and "mdadj_adv_mst"."n_inv_recp_no" = 0
    else
      update "cust_advance"
        set "cust_advance"."c_inv_prefix" = "new_name"."c_prefix",
        "cust_advance"."n_inv_no" = "new_name"."n_srno"
        where "cust_advance"."c_prefix" = "new_name"."c_adv_prefix"
        and "cust_advance"."n_srno" = "new_name"."n_adv_no"
        and "cust_advance"."c_inv_prefix" is null
        and "cust_advance"."n_inv_no" = 0
    end if;
    //if this advance not is already settled then will give error message 
    if sqlstate = '02000' then
      raiserror 18000 "Advance note is already settled. You cannot Save this Receipt. "
    end if end if;
  //Update Discount in Ledger
  if "new_name"."n_discount_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",@disc_act_code,"new_name"."d_rec_date",
      "new_name"."n_discount_amt","new_name"."c_cust_code" ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","new_name"."d_rec_date",
      -"new_name"."n_discount_amt",@disc_act_code ) 
  end if;
  if "new_name"."n_disc" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",@disc_act_code,"new_name"."d_rec_date",
      -1*"new_name"."n_disc","new_name"."c_cust_code" ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","new_name"."d_rec_date",
      "new_name"."n_disc",@disc_act_code ) 
  end if;
  //Update Other Charges in Ledger
  if "new_name"."n_other_charge" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'OCHARG',"new_name"."d_rec_date",
      "new_name"."n_other_charge","new_name"."c_cust_code" ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","new_name"."d_rec_date",
      -"new_name"."n_other_charge",'OCHARG' ) 
  end if;
  //Update Cheque Amount to Cash, Bank or Reconcile Account
  if "new_name"."n_chq_amount" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","debit_act_code","new_name"."d_rec_date",
      "new_name"."n_chq_amount","new_name"."c_cust_code" ) 
  end if;
  //TDS  
  if "new_name"."n_tds_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tds_act_code","new_name"."d_rec_date",
      "isnull"("new_name"."n_tds_amt",0),"new_name"."c_cust_code" ) 
  end if;
  //Update Total Amount to Customer Account
  if "cust_total" <> 0 or "new_name"."n_tds_amt" <> 0 then
    if "new_name"."n_cash_cr_cust" = 1 then
      if "new_name"."n_detail" = 0 and "new_name"."n_advance" = 1 then
        set @debit_act_code_new = "new_name"."c_cust_code"
      else
        set @debit_act_code_new = 'CASH'
      end if end if;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",if "new_name"."n_cash_cr_cust" = 1 then @debit_act_code_new else "new_name"."c_cust_code" endif,"new_name"."d_rec_date",
      -("cust_total"+"isnull"("new_name"."n_tds_amt",0)),"cust_opp_act_code" ) 
  end if;
  //Update Diffence Amount to Kasar Account or as Advance Note
  if "kasar_amount" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"new_name"."d_rec_date",
      "kasar_amount","new_name"."c_cust_code" ) 
  end if;
  if("new_name"."d_reconcile_date" is not null or "new_name"."c_debit_act_code" = 'CASH') and "new_name"."n_advance" = 1 then
    select "n_reconsile" into "b1_reconcile" from "cust_advance"
      where "cust_advance"."c_prefix" = "new_name"."c_prefix"
      and "cust_advance"."n_srno" = "new_name"."n_srno";
    if sqlcode = 0 then
      update "cust_advance" set "c_cust_code" = "new_name"."c_cust_code",
        "d_adv_date" = "new_name"."d_rec_date",
        "n_total" = "new_name"."n_chq_amount"-"new_name"."n_total"-"new_name"."n_disc",
        "n_reconsile" = "b_reconcile"
        where "cust_advance"."c_prefix" = "new_name"."c_prefix"
        and "cust_advance"."n_srno" = "new_name"."n_srno"
    else
      insert into "cust_advance"( "c_prefix","n_srno","c_cust_code","d_adv_date","n_total","n_inv_no","n_reconsile","c_year" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code",
        "new_name"."d_rec_date","new_name"."n_chq_amount"-"new_name"."n_total"-"new_name"."n_disc",0,"b_reconcile","new_name"."c_year" ) 
    end if end if;
  //2nd Section 
  //When Cheque Get Reconciled
  if "new_name"."d_reconcile_date" is not null and "new_name"."c_debit_act_code" <> 'CASH' then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'RCRECV',"new_name"."d_reconcile_date",
      -"new_name"."n_chq_amount","new_name"."c_debit_act_code" ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_debit_act_code","new_name"."d_reconcile_date",
      "new_name"."n_chq_amount","new_name"."c_cust_code" ) 
  end if;
  //3rd Section 
  //If Cheque Returns (Assumption that Reconciliation Date is not null (Because Bank need to be Credited)
  if "new_name"."d_reconcile_date" is not null and "new_name"."n_return" = 1 then
    //Update Receipt Det to Zero
    update "cust_rec_det_new_process" set "cust_rec_det_new_process"."n_return_amount" = "cust_rec_det_new_process"."n_amount"
      where "cust_rec_det_new_process"."n_srno" = "new_name"."n_srno";
    //Update Discount in Ledger
    if "new_name"."n_discount_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",@disc_act_code,"isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        -"new_name"."n_discount_amt","new_name"."c_cust_code" ) ;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        "new_name"."n_discount_amt",@disc_act_code ) 
    end if;
    //Update Other Charges in Ledger
    if "new_name"."n_other_charge" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",'OCHARG',"isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        -"new_name"."n_other_charge","new_name"."c_cust_code" ) ;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        "new_name"."n_other_charge",'OCHARG' ) 
    end if;
    //Update Cheque Amount to Cash, Bank or Reconcile Account
    if "new_name"."n_chq_amount" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_debit_act_code","isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        -"new_name"."n_chq_amount","new_name"."c_cust_code" ) 
    end if;
    //TDS
    if "new_name"."n_tds_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tds_act_code","isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        -"isnull"("new_name"."n_tds_amt",0),"new_name"."c_cust_code" ) 
    end if;
    //Update Total Amount to Customer Account
    if "cust_total" <> 0 or "new_name"."n_tds_amt" <> 0 then
      if "new_name"."n_cash_cr_cust" = 1 then
        if "new_name"."n_detail" = 0 and "new_name"."n_advance" = 1 then
          set @debit_act_code_new = "new_name"."c_cust_code"
        else
          set @debit_act_code_new = 'CASH'
        end if end if;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",if "new_name"."n_cash_cr_cust" = 1 then @debit_act_code_new else "new_name"."c_cust_code" endif,"isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        ("cust_total"+"isnull"("new_name"."n_tds_amt",0)),"cust_opp_act_code" ) 
    end if;
    //Update Diffence Amount to Kasar Account or as Advance Note
    if "kasar_amount" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        -"kasar_amount","new_name"."c_cust_code" ) 
    end if;
    if "new_name"."n_advance" = 1 then
      delete from "cust_advance"
        where "cust_advance"."c_prefix" = "new_name"."c_prefix"
        and "cust_advance"."n_srno" = "new_name"."n_srno"
    end if end if;
  if "new_name"."c_act_code" is not null and "new_name"."c_act_code" <> '' and "new_name"."c_debit_act_code" = 'CASH' then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_act_code","new_name"."d_rec_date",
      "new_name"."n_total",'CASH' ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CASH',"new_name"."d_rec_date",
      -"new_name"."n_total","new_name"."c_act_code" ) 
  end if
end;
CREATE TRIGGER "cust_rec.delete_update_invoice_balance" before delete order 2 on
"DBA"."cust_rec"
referencing old as "old_name"
for each row
begin
  declare "d_manual_receipt" decimal(1);
  declare @c_doc_year_old char(2);
  select "n_enable_manual_receipt" into "d_manual_receipt" from "system_parameter";
  if "old_name"."n_ref_no" <> 0 and "d_manual_receipt" <> 0 then
    update "manual_receipt" set "n_flag" = 0 where "manual_receipt"."n_srno" = "old_name"."n_ref_no"
  end if;
  delete from "ledger"
    where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno";
  delete from "cust_advance"
    where "cust_advance"."c_prefix" = "old_name"."c_prefix"
    and "cust_advance"."n_srno" = "old_name"."n_srno";
  delete from "remarks"
    where "remarks"."c_prefix" = "old_name"."c_prefix"
    and "remarks"."n_tran_id" = "old_name"."n_srno";
  update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = null,
    "crnt_mst"."n_inv_recp_no" = 0 where "crnt_mst"."c_prefix" = "old_name"."c_crnt_prefix" and "crnt_mst"."n_srno" = "old_name"."n_crnt_no";
  update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
    "mdadj_mst"."n_inv_recp_no" = 0 where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_prefix" and "mdadj_mst"."n_srno" = "old_name"."n_crnt_no";
  update "cust_advance" set "cust_advance"."c_inv_prefix" = null,
    "cust_advance"."n_inv_no" = 0 where "cust_advance"."c_prefix" = "old_name"."c_adv_prefix" and "cust_advance"."n_srno" = "old_name"."n_adv_no";
  update "mdadj_adv_mst" set "mdadj_adv_mst"."c_inv_recp_prefix" = null,"mdadj_adv_mst"."n_inv_recp_no" = 0
    where "mdadj_adv_mst"."c_prefix" = "old_name"."c_adv_prefix" and "mdadj_adv_mst"."n_srno" = "old_name"."n_adv_no";
  update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = null,
    "cust_dbnt"."n_inv_recp_no" = 0 where "cust_dbnt"."c_prefix" = "old_name"."c_dbnt_prefix" and "cust_dbnt"."n_srno" = "old_name"."n_dbnt_no";
  update "mdadj_dbnt_mst" set "mdadj_dbnt_mst"."c_inv_recp_prefix" = null,
    "mdadj_dbnt_mst"."n_inv_recp_no" = 0 where "mdadj_dbnt_mst"."c_prefix" = "old_name"."c_dbnt_prefix" and "mdadj_dbnt_mst"."n_srno" = "old_name"."n_dbnt_no";
  insert into "deleted_mst"( "c_prefix","n_srno","d_date","c_code","n_amount","c_remark" ) values
    ( "old_name"."c_prefix","old_name"."n_srno","old_name"."d_rec_date","old_name"."c_cust_code","old_name"."n_total","old_name"."c_debit_act_code" ) ;
  update "cust_tmp_rec" set "c_ref_prefix" = null,"n_ref_srno" = 0,"n_status" = 0
    where "cust_tmp_rec"."c_prefix" = "old_name"."c_proof_prefix" and "cust_tmp_rec"."n_srno" = "old_name"."n_proof_srno";
  call "usp_check_update_last_tran_info"(1,"old_name"."c_cust_code",8,"old_name"."c_prefix","old_name"."n_srno","old_name"."d_rec_date");
  set @c_doc_year_old = "uf_get_pk_component"("old_name"."n_srno",1);
  delete from "settle_mst_header"
    where "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_year" = @c_doc_year_old;
  //deleting credit note and multi creditnote   
  if "old_name"."n_crnt_no" > 0 then
    delete from "settle_mst"
      where "c_prefix" = "old_name"."c_prefix"
      and "n_srno" = "old_name"."n_srno"
      and "c_year" = "old_name"."c_year"
      and "c_prefix1" = "old_name"."c_crnt_prefix"
      and "n_srno1" = "old_name"."n_crnt_no"
      and "c_year1" = "old_name"."c_crnt_year"
  end if;
  //debit note and multi debit note
  if "old_name"."n_dbnt_no" > 0 then
    delete from "settle_mst"
      where "c_prefix" = "old_name"."c_prefix"
      and "n_srno" = "old_name"."n_srno"
      and "c_year" = "old_name"."c_year"
      and "c_prefix1" = "old_name"."c_dbnt_prefix"
      and "n_srno1" = "old_name"."n_dbnt_no"
      and "c_year1" = "old_name"."c_dbnt_year"
  end if;
  //advance note and multi advance note
  if "old_name"."n_adv_no" > 0 then
    delete from "settle_mst"
      where "c_prefix" = "old_name"."c_prefix"
      and "n_srno" = "old_name"."n_srno"
      and "c_year" = "old_name"."c_year"
      and "c_prefix1" = "old_name"."c_adv_prefix"
      and "n_srno1" = "old_name"."n_adv_no"
      and "c_year1" = "old_name"."c_adv_year"
  end if
end;
CREATE TRIGGER "cust_rec.delete_update_invoice_out_balance" after delete order 3 on
"DBA"."cust_rec_det"
referencing old as "old_name"
for each row
begin
  declare @cust_code char(6);
  declare @doc_date_old,@doc_date_new date;
  declare @new_settled_amt numeric(18,2);
  declare @c_sett_prefix_old,@c_sett_prefix_new,@c_doc_prefix_old,@c_doc_prefix_new char(2);
  declare @c_sett_year_old,@c_sett_year_new,@c_doc_year_old,@c_doc_year_new char(2);
  declare @sett_doc_old,@sett_doc_new,@n_doc_old,@n_doc_new numeric(18);
  set @c_sett_prefix_old = "old_name"."c_prefix";
  set @sett_doc_old = "old_name"."n_invoice_no";
  set @c_sett_year_old = "old_name"."c_year";
  set @c_doc_prefix_old = "uf_get_pk_component"("old_name"."n_srno",3);
  set @c_doc_year_old = "uf_get_pk_component"("old_name"."n_srno",1);
  set @n_doc_old = "old_name"."n_srno";
  --set @c_sett_year_old = null;
  update "invoice_mst" set "n_stop_trigger" = "n_stop_trigger"+1,"invoice_mst"."n_inv_bal_amt"
     = "invoice_mst"."n_inv_bal_amt"+"old_name"."n_amount"-"old_name"."n_return_amount"
    where "invoice_mst"."c_prefix" = "old_name"."c_prefix"
    and "invoice_mst"."n_srno" = "old_name"."n_invoice_no";
  delete from "settle_mst"
    where "n_srno" = @n_doc_old
    and "c_prefix" = @c_doc_prefix_old
    and "c_year" = @c_doc_year_old
    and "n_srno1" = @sett_doc_old
    and "c_prefix1" = @c_sett_prefix_old
    and "c_year1" = @c_sett_year_old;
  delete from "tds_collected_billwise" where "n_srno" = "old_name"."n_srno" and "n_inv_no" = "old_name"."n_invoice_no" and "c_inv_prefix" = "old_name"."c_prefix"
end;
CREATE TRIGGER "cust_rec.insert_ledger_invoice_update" before insert order 1 on
-----------------------------------------------------------------------------
"DBA"."cust_rec"
referencing new as "new_name"
for each row
begin
  declare "kasar_amount" decimal(14,2);
  declare "cust_total" decimal(14,2);
  declare "d_manual_receipt" decimal(1);
  declare "debit_act_code" char(6);
  declare "cust_opp_act_code",@debit_act_code_new char(6);
  declare "b_reconcile" decimal(1);
  declare "b1_reconcile" decimal(1);
  declare @crnt_yr,@dbnt_yr,@repl_yr,@adv_year,@c_year_new char(2);
  declare @crnt_date,@dbnt_date,@repl_date,@adv_date,@doc_date_new date;
  /*Totally 3 Sections -
1. When Cheque or Cash Entry is Entered
2. When Cheque Gets Reconciled
3. When Cheque Gets Returned
*/
  if "new_name"."n_cash_cr_cust" = 1 and "new_name"."c_debit_act_code" = 'CASH' then
    if "new_name"."n_advance" = 0 and "new_name"."n_detail" = 1 then
      return
    end if end if;
  if "new_name"."c_debit_act_code" = 'CASH' then
    set "debit_act_code" = 'CASH';
    set "cust_opp_act_code" = 'CASH';
    set "b_reconcile" = 1
  else
    set "debit_act_code" = 'RCRECV';
    if("new_name"."d_reconcile_date" is not null and "new_name"."n_return" = 0) then
      set "cust_opp_act_code" = "new_name"."c_debit_act_code";
      set "b_reconcile" = 1
    else
      set "cust_opp_act_code" = 'RCRECV';
      set "b_reconcile" = 0
    end if end if;
  /*
//Deleting Old Entry Not Applicable for Insert
delete from ledger
where ledger.c_prefix=old_name.c_prefix
and ledger.n_tran_no=old_name.n_srno;
delete from remarks
where remarks.c_prefix=old_name.c_prefix
and remarks.n_tran_id=old_name.n_srno;
*/
  //Set Coin Adjustment Amount
  if "new_name"."n_advance" = 0 then
    set "kasar_amount" = "new_name"."n_total"-"new_name"."n_chq_amount";
    set "cust_total" = "new_name"."n_total"
  else
    set "kasar_amount" = 0;
    set "cust_total" = "new_name"."n_chq_amount"
  end if;
  //Update Manual Receipt Table if Enabled for Tracking
  select "n_enable_manual_receipt" into "d_manual_receipt" from "system_parameter";
  if "new_name"."n_ref_no" <> 0 and "d_manual_receipt" <> 0 then
    update "manual_receipt" set "n_flag" = 1 where "manual_receipt"."n_srno" = "new_name"."n_ref_no"
  end if;
  //Insert Remark 
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_chq_no","new_name"."d_chq_dt",if "new_name"."n_return" = 1 then ': Check Returned : ' endif+"isNUll"("new_name"."c_remark",'') ) ;
  if "new_name"."n_yearend_flag" = 0 then
    insert into "settle_mst_header"
      ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
      "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
      "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
      "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
      "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
      "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
      "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type","n_ref_no","d_ref_date" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."d_rec_date","new_name"."c_cust_code","new_name"."c_sman_code","new_name"."c_col_agent","b_reconcile",0,"new_name"."n_reverse_disc","new_name"."n_chq_amount","new_name"."n_total",
      0,0,"new_name"."n_crnt_no","new_name"."c_crnt_prefix","new_name"."n_crnt_amt","new_name"."n_dbnt_no","new_name"."c_dbnt_prefix","new_name"."n_dbnt_amt",
      "new_name"."n_adv_no","new_name"."c_adv_prefix","new_name"."n_adv_amt",0,null,0,0,0,0,0,0,0,
      null,0,0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,0,0,null,null,
      0,"new_name"."c_return_user","new_name"."c_sys_ip","new_name"."c_computer_name",0,0,"new_name"."c_ref_id",0,null,"new_name"."n_inv_disc_amt","new_name"."n_reverse_other_charge",
      "new_name"."n_other_charge",0,null,"new_name"."c_chq_no","new_name"."d_chq_dt",0,0,0,null,null,0,
      "new_name"."c_remark","new_name"."n_out_station","new_name"."c_debit_act_code","new_name"."n_advance",0,0,0,null,
      "new_name"."c_act_code",6,"new_name"."n_ref_no",null ) 
  end if;
  //1st Section 
  //Update Credit Note Settlement Details
  if "new_name"."n_return" = 0 and "new_name"."n_crnt_no" <> 0 then
    if "new_name"."n_yearend_flag" = 0 then
      if "new_name"."c_crnt_prefix" = 'MD' then
        update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where("mdadj_mst"."c_prefix" = "new_name"."c_crnt_prefix"
          and "mdadj_mst"."n_srno" = "new_name"."n_crnt_no")
          and "mdadj_mst"."c_inv_recp_prefix" is null
          and "mdadj_mst"."n_inv_recp_no" = 0
      else
        update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "crnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where("crnt_mst"."c_prefix" = "new_name"."c_crnt_prefix"
          and "crnt_mst"."n_srno" = "new_name"."n_crnt_no")
          and "crnt_mst"."c_inv_recp_prefix" is null
          and "crnt_mst"."n_inv_recp_no" = 0
      end if;
      if sqlstate = '02000' then
        raiserror 18000 "Credit note is already settlled. You cannot Save this Customer Receipt. "
      end if end if;
    set @crnt_yr = "new_name"."c_crnt_year";
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
      "new_name"."c_prefix","new_name"."n_srno",@crnt_yr,"new_name"."c_crnt_prefix","new_name"."n_crnt_no",
      ("new_name"."n_crnt_amt"),"new_name"."c_cust_code","new_name"."d_rec_date","new_name"."d_rec_date",1 ) 
  end if;
  //Update Debit Note Settlement Details
  if "new_name"."n_return" = 0 and "new_name"."n_dbnt_no" <> 0 then
    if "new_name"."n_yearend_flag" = 0 then
      if "new_name"."c_dbnt_prefix" = 'MB' then
        update "mdadj_dbnt_mst"
          set "mdadj_dbnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "mdadj_dbnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where "mdadj_dbnt_mst"."c_prefix" = "new_name"."c_dbnt_prefix"
          and "mdadj_dbnt_mst"."n_srno" = "new_name"."n_dbnt_no"
          and "mdadj_dbnt_mst"."c_inv_recp_prefix" is null
          and "mdadj_dbnt_mst"."n_inv_recp_no" = 0
      else
        update "cust_dbnt"
          set "cust_dbnt"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "cust_dbnt"."n_inv_recp_no" = "new_name"."n_srno"
          where "cust_dbnt"."c_prefix" = "new_name"."c_dbnt_prefix"
          and "cust_dbnt"."n_srno" = "new_name"."n_dbnt_no"
          and "cust_dbnt"."c_inv_recp_prefix" is null
          and "cust_dbnt"."n_inv_recp_no" = 0
      end if;
      if sqlstate = '02000' then
        raiserror 18000 "Debit note is already settlled. You cannot Save this customer receipt. "
      end if end if;
    set @dbnt_yr = "new_name"."c_dbnt_year";
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
      "new_name"."c_prefix","new_name"."n_srno",@dbnt_yr,"new_name"."c_dbnt_prefix","new_name"."n_dbnt_no",
      -1*("new_name"."n_dbnt_amt"),"new_name"."c_cust_code","new_name"."d_rec_date","new_name"."d_rec_date",1 ) 
  end if;
  //Update Advance Note Settlement Details
  if "new_name"."n_return" = 0 and "new_name"."n_adv_no" <> 0 then
    if "new_name"."n_yearend_flag" = 0 then
      if "new_name"."c_adv_prefix" = 'MV' then
        update "mdadj_adv_mst"
          set "mdadj_adv_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "mdadj_adv_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where "mdadj_adv_mst"."c_prefix" = "new_name"."c_adv_prefix"
          and "mdadj_adv_mst"."n_srno" = "new_name"."n_adv_no"
          and "mdadj_adv_mst"."c_inv_recp_prefix" is null
          and "mdadj_adv_mst"."n_inv_recp_no" = 0
      else
        update "cust_advance"
          set "cust_advance"."c_inv_prefix" = "new_name"."c_prefix",
          "cust_advance"."n_inv_no" = "new_name"."n_srno"
          where "cust_advance"."c_prefix" = "new_name"."c_adv_prefix"
          and "cust_advance"."n_srno" = "new_name"."n_adv_no"
          and "cust_advance"."c_inv_prefix" is null
          and "cust_advance"."n_inv_no" = 0
      end if;
      //if this advance not is already settled then will give error message 
      if sqlstate = '02000' then
        raiserror 18000 "Advance note is already settled. You cannot Save this Receipt. "
      end if end if;
    set @adv_year = "new_name"."c_adv_year";
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
      "new_name"."c_prefix","new_name"."n_srno",@adv_year,"new_name"."c_adv_prefix","new_name"."n_adv_no",
      ("new_name"."n_adv_amt"),"new_name"."c_cust_code","new_name"."d_rec_date","new_name"."d_rec_date",1 ) 
  end if;
  //Update Discount in Ledger
  if "new_name"."n_discount_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-DISRC',"new_name"."d_rec_date",
      "new_name"."n_discount_amt","new_name"."c_cust_code" ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","new_name"."d_rec_date",
      -"new_name"."n_discount_amt",'-DISRC' ) 
  end if;
  //Update Other Charges in Ledger
  if "new_name"."n_other_charge" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'OCHARG',"new_name"."d_rec_date",
      "new_name"."n_other_charge","new_name"."c_cust_code" ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","new_name"."d_rec_date",
      -"new_name"."n_other_charge",'OCHARG' ) 
  end if;
  //Update Cheque Amount to Cash, Bank or Reconcile Account
  if "new_name"."n_chq_amount" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","debit_act_code","new_name"."d_rec_date",
      "new_name"."n_chq_amount","new_name"."c_cust_code" ) 
  end if;
  //TDS  
  if "new_name"."n_tds_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tds_act_code","new_name"."d_rec_date",
      "new_name"."n_tds_amt","new_name"."c_cust_code" ) 
  end if;
  //Update Total Amount to Customer Account
  if "cust_total" <> 0 or "new_name"."n_tds_amt" <> 0 then
    if "new_name"."n_cash_cr_cust" = 1 then
      if "new_name"."n_detail" = 0 and "new_name"."n_advance" = 1 then
        set @debit_act_code_new = "new_name"."c_cust_code"
      else
        set @debit_act_code_new = 'CASH'
      end if end if;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",if "new_name"."n_cash_cr_cust" = 1 then @debit_act_code_new else "new_name"."c_cust_code" endif,"new_name"."d_rec_date",
      -("cust_total"+"isnull"("new_name"."n_tds_amt",0)),"cust_opp_act_code" ) 
  end if;
  //Update Diffence Amount to Kasar Account or as Advance Note
  if "kasar_amount" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"new_name"."d_rec_date",
      "kasar_amount","new_name"."c_cust_code" ) 
  end if;
  if "new_name"."n_advance" = 1 then
    select "n_reconsile" into "b1_reconcile" from "cust_advance"
      where "cust_advance"."c_prefix" = "new_name"."c_prefix"
      and "cust_advance"."n_srno" = "new_name"."n_srno";
    if sqlcode = 0 then
      update "cust_advance" set "c_cust_code" = "new_name"."c_cust_code",
        "d_adv_date" = "new_name"."d_rec_date",
        "n_total" = "new_name"."n_chq_amount"-"new_name"."n_total",
        "n_reconsile" = "b_reconcile"
        where "cust_advance"."c_prefix" = "new_name"."c_prefix"
        and "cust_advance"."n_srno" = "new_name"."n_srno"
    else
      insert into "cust_advance"( "c_prefix","n_srno","c_cust_code","d_adv_date","n_total","n_inv_no","n_reconsile","c_year","n_yearend_flag" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code",
        "new_name"."d_rec_date","new_name"."n_chq_amount"-"new_name"."n_total",0,"b_reconcile","new_name"."c_year","new_name"."n_yearend_flag" ) 
    end if end if;
  //2nd Section 
  //When Cheque Get Reconciled
  if "new_name"."d_reconcile_date" is not null and "new_name"."c_debit_act_code" <> 'CASH' then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'RCRECV',"new_name"."d_reconcile_date",
      -"new_name"."n_chq_amount","new_name"."c_debit_act_code" ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_debit_act_code","new_name"."d_reconcile_date",
      "new_name"."n_chq_amount","new_name"."c_cust_code" ) 
  end if;
  //3rd Section 
  //If Cheque Returns (Assumption that Reconciliation Date is not null (Because Bank need to be Credited)
  if "new_name"."d_reconcile_date" is not null and "new_name"."n_return" = 1 then
    //Update Receipt Det to Zero
    update "cust_rec_det" set "cust_rec_det"."n_return_amount" = "cust_rec_det"."n_amount"
      where "cust_rec_det"."n_srno" = "new_name"."n_srno";
    //Update Discount in Ledger
    if "new_name"."n_discount_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",'-DISRC',"isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        -"new_name"."n_discount_amt","new_name"."c_cust_code" ) ;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        "new_name"."n_discount_amt",'-DISRC' ) 
    end if;
    //Update Other Charges in Ledger
    if "new_name"."n_other_charge" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",'OCHARG',"isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        -"new_name"."n_other_charge","new_name"."c_cust_code" ) ;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        "new_name"."n_other_charge",'OCHARG' ) 
    end if;
    //Update Cheque Amount to Cash, Bank or Reconcile Account
    if "new_name"."n_chq_amount" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        "new_name"."n_chq_amount","new_name"."c_debit_act_code" ) 
    end if;
    //TDS  
    if "new_name"."n_tds_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tds_act_code","new_name"."d_rec_date",
        -"new_name"."n_tds_amt","new_name"."c_debit_act_code" ) 
    end if;
    //Update Total Amount to Customer Account
    if "cust_total" <> 0 or "new_name"."n_tds_amt" <> 0 then
      if "new_name"."n_cash_cr_cust" = 1 then
        if "new_name"."n_detail" = 0 and "new_name"."n_advance" = 1 then
          set @debit_act_code_new = "new_name"."c_cust_code"
        else
          set @debit_act_code_new = 'CASH'
        end if end if;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",if "new_name"."n_cash_cr_cust" = 1 then @debit_act_code_new else "new_name"."c_cust_code" endif,"isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        "cust_total"+"isnull"("new_name"."n_tds_amt",0),"cust_opp_act_code" ) 
    end if;
    //Update Diffence Amount to Kasar Account or as Advance Note
    if "kasar_amount" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        -"kasar_amount","new_name"."c_cust_code" ) 
    end if;
    if "new_name"."n_advance" = 1 then
      delete from "cust_advance"
        where "cust_advance"."c_prefix" = "new_name"."c_prefix"
        and "cust_advance"."n_srno" = "new_name"."n_srno"
    end if end if;
  if "new_name"."c_act_code" is not null and "new_name"."c_act_code" <> '' and "new_name"."c_debit_act_code" = 'CASH' then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_act_code","new_name"."d_rec_date",
      "new_name"."n_total",'CASH' ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CASH',"new_name"."d_rec_date",
      -"new_name"."n_total","new_name"."c_act_code" ) 
  end if;
  call "usp_check_update_last_tran_info"(0,"new_name"."c_cust_code",8,"new_name"."c_prefix","new_name"."n_srno","new_name"."d_rec_date")
end;
CREATE TRIGGER "cust_rec.update_update ledger_invoice_balance" after update order 1 on
"DBA"."cust_rec"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "kasar_amount" decimal(14,2);
  declare "cust_total" decimal(14,2);
  declare "d_manual_receipt" decimal(1);
  declare "debit_act_code" char(6);
  declare "cust_opp_act_code",@debit_act_code_new char(6);
  declare "b_reconcile" decimal(1);
  declare "b1_reconcile" decimal(1);
  declare @c_year_old,@c_year_new char(2);
  declare @doc_date_old,@doc_date_new date;
  declare @crnt_yr,@dbnt_yr,@repl_yr,@adv_year char(2);
  declare @crnt_date,@dbnt_date,@repl_date,@adv_date date;
  if "old_name"."n_stop_trigger" <> "new_name"."n_stop_trigger" then
    return
  end if;
  /*Totally 3 Sections -
1. When Cheque or Cash Entry is Entered
2. When Cheque Gets Reconciled
3. When Cheque Gets Returned
*/
  if "new_name"."c_debit_act_code" = 'CASH' then
    set "debit_act_code" = 'CASH';
    set "cust_opp_act_code" = 'CASH';
    set "b_reconcile" = 1
  else
    set "debit_act_code" = 'RCRECV';
    if("new_name"."d_reconcile_date" is not null and "new_name"."n_return" = 0) then
      set "cust_opp_act_code" = "new_name"."c_debit_act_code";
      set "b_reconcile" = 1
    else
      set "cust_opp_act_code" = 'RCRECV';
      set "b_reconcile" = 0
    end if end if;
  if "old_name"."n_slip_no" = 0 and "new_name"."n_slip_no" <> 0 then
    return
  end if;
  //Set Coin Adjustment Amount
  if "new_name"."n_advance" = 0 then
    set "kasar_amount" = "new_name"."n_total"-"new_name"."n_chq_amount";
    set "cust_total" = "new_name"."n_total"
  else
    set "kasar_amount" = 0;
    set "cust_total" = "new_name"."n_chq_amount"
  end if;
  //Deleting Old Entry
  delete from "ledger"
    where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno";
  if "new_name"."n_cash_cr_cust" = 1 and "new_name"."c_debit_act_code" = 'CASH' then
    if "new_name"."n_advance" = 0 and "new_name"."n_detail" = 1 then
      return
    end if end if;
  delete from "remarks"
    where "remarks"."c_prefix" = "old_name"."c_prefix"
    and "remarks"."n_tran_id" = "old_name"."n_srno";
  delete from "cust_advance"
    where "cust_advance"."c_prefix" = "old_name"."c_prefix"
    and "cust_advance"."n_srno" = "old_name"."n_srno";
  if "old_name"."c_crnt_prefix" <> "new_name"."c_crnt_prefix" or "old_name"."n_crnt_no" <> "new_name"."n_crnt_no" or "new_name"."n_return" = 1 then
    update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = null,
      "crnt_mst"."n_inv_recp_no" = 0 where "crnt_mst"."c_prefix" = "old_name"."c_crnt_prefix" and "crnt_mst"."n_srno" = "old_name"."n_crnt_no";
    update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
      "mdadj_mst"."n_inv_recp_no" = 0 where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_prefix" and "mdadj_mst"."n_srno" = "old_name"."n_crnt_no"
  end if;
  if "old_name"."c_adv_prefix" <> "new_name"."c_adv_prefix" or "old_name"."n_adv_no" <> "new_name"."n_adv_no" or "new_name"."n_return" = 1 then
    update "cust_advance" set "cust_advance"."c_inv_prefix" = null,
      "cust_advance"."n_inv_no" = 0 where "cust_advance"."c_prefix" = "old_name"."c_adv_prefix" and "cust_advance"."n_srno" = "old_name"."n_adv_no";
    update "mdadj_adv_mst" set "mdadj_adv_mst"."c_inv_recp_prefix" = null,
      "mdadj_adv_mst"."n_inv_recp_no" = 0 where "mdadj_adv_mst"."c_prefix" = "old_name"."c_adv_prefix" and "mdadj_adv_mst"."n_srno" = "old_name"."n_adv_no"
  end if;
  if "old_name"."c_dbnt_prefix" <> "new_name"."c_dbnt_prefix" or "old_name"."n_dbnt_no" <> "new_name"."n_dbnt_no" or "new_name"."n_return" = 1 then
    update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = null,
      "cust_dbnt"."n_inv_recp_no" = 0 where "cust_dbnt"."c_prefix" = "old_name"."c_dbnt_prefix" and "cust_dbnt"."n_srno" = "old_name"."n_dbnt_no"
  end if;
  if "old_name"."n_return" = 1 and "new_name"."n_return" = 0 then
    update "cust_rec_det" set "cust_rec_det"."n_return_amount" = 0
      where "cust_rec_det"."n_srno" = "old_name"."n_srno"
  end if;
  //Update Manual Receipt Table if Enabled for Tracking
  select "n_enable_manual_receipt" into "d_manual_receipt" from "system_parameter";
  if "old_name"."n_ref_no" <> "new_name"."n_ref_no" then
    if "old_name"."n_ref_no" <> 0 and "d_manual_receipt" <> 0 then
      update "manual_receipt" set "n_flag" = 0 where "manual_receipt"."n_srno" = "old_name"."n_ref_no"
    end if;
    if "new_name"."n_ref_no" <> 0 and "d_manual_receipt" <> 0 then
      update "manual_receipt" set "n_flag" = 1 where "manual_receipt"."n_srno" = "new_name"."n_ref_no"
    end if end if;
  //Insert Remark 
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_chq_no","new_name"."d_chq_dt",if "new_name"."n_return" = 1 then ': Check Returned : ' endif+"isNUll"("new_name"."c_remark",'') ) ;
  //settle_mst header insert
  set @c_year_new = "new_name"."c_year";
  if @c_year_new is null then
    if "length"("new_name"."n_srno") > 9 then
      set @c_year_new = "uf_get_pk_component"("new_name"."n_srno",1)
    else
      if "month"("new_name"."d_rec_date") <= 3 then
        set @c_year_new = "right"("string"("year"("new_name"."d_rec_date")-1),2)
      else
        set @c_year_new = "right"("string"("year"("new_name"."d_rec_date")),2)
      end if end if end if;
  delete from "settle_mst_header"
    where "n_srno" = "old_name"."n_srno" and "c_prefix" = "old_name"."c_prefix" and "c_year" = @c_year_new;
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
    "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
    "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
    "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
    "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
    "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
    "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type","n_ref_no","d_ref_date" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."d_rec_date","new_name"."c_cust_code","new_name"."c_sman_code","new_name"."c_col_agent","b_reconcile",0,"new_name"."n_reverse_disc","new_name"."n_chq_amount","new_name"."n_total",
    0,0,"new_name"."n_crnt_no","new_name"."c_crnt_prefix","new_name"."n_crnt_amt","new_name"."n_dbnt_no","new_name"."c_dbnt_prefix","new_name"."n_dbnt_amt",
    "new_name"."n_adv_no","new_name"."c_adv_prefix","new_name"."n_adv_amt",0,null,0,0,0,0,0,0,0,
    null,0,0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,0,0,null,null,
    0,"new_name"."c_return_user","new_name"."c_sys_ip","new_name"."c_computer_name",0,0,"new_name"."c_ref_id",0,null,"new_name"."n_inv_disc_amt","new_name"."n_reverse_other_charge",
    "new_name"."n_other_charge",0,null,"new_name"."c_chq_no","new_name"."d_chq_dt",0,0,0,null,null,0,
    "new_name"."c_remark","new_name"."n_out_station","new_name"."c_debit_act_code","new_name"."n_advance",0,0,0,null,
    "new_name"."c_act_code",6,"new_name"."n_ref_no",null ) ;
  //1st Section 
  //Update Credit Note Settlement Details
  if "new_name"."n_return" = 0 and "new_name"."n_crnt_no" <> 0 and("old_name"."c_crnt_prefix" <> "new_name"."c_crnt_prefix" or "old_name"."n_crnt_no" <> "new_name"."n_crnt_no") then
    if "new_name"."c_crnt_prefix" = 'MD' then
      update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("mdadj_mst"."c_prefix" = "new_name"."c_crnt_prefix"
        and "mdadj_mst"."n_srno" = "new_name"."n_crnt_no")
        and "mdadj_mst"."c_inv_recp_prefix" is null
        and "mdadj_mst"."n_inv_recp_no" = 0
    else
      update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "crnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("crnt_mst"."c_prefix" = "new_name"."c_crnt_prefix"
        and "crnt_mst"."n_srno" = "new_name"."n_crnt_no")
        and "crnt_mst"."c_inv_recp_prefix" is null
        and "crnt_mst"."n_inv_recp_no" = 0
    end if;
    if sqlstate = '02000' then
      raiserror 18000 "Credit note is already settlled. You cannot Save this Customer Receipt. "
    end if end if;
  //Update Debit Note Settlement Details
  if "new_name"."c_dbnt_prefix" <> 'MB' and "new_name"."n_return" = 0 and "new_name"."n_dbnt_no" <> 0 and("old_name"."c_dbnt_prefix" <> "new_name"."c_dbnt_prefix" or "old_name"."n_dbnt_no" <> "new_name"."n_dbnt_no") then
    update "cust_dbnt"
      set "cust_dbnt"."c_inv_recp_prefix" = "new_name"."c_prefix",
      "cust_dbnt"."n_inv_recp_no" = "new_name"."n_srno"
      where "cust_dbnt"."c_prefix" = "new_name"."c_dbnt_prefix"
      and "cust_dbnt"."n_srno" = "new_name"."n_dbnt_no"
      and "cust_dbnt"."c_inv_recp_prefix" is null
      and "cust_dbnt"."n_inv_recp_no" = 0;
    if sqlstate = '02000' then
      raiserror 18000 "Debit note is already settled. You cannot Save this customer receipt. "
    end if end if;
  //Update Multi Debit Note Settlement Details
  if "old_name"."c_dbnt_prefix" = 'MB' and("old_name"."c_dbnt_prefix" <> "new_name"."c_dbnt_prefix" or "old_name"."n_dbnt_no" <> "new_name"."n_dbnt_no" or "new_name"."n_return" = 1) then
    update "mdadj_dbnt_mst" set "mdadj_dbnt_mst"."c_inv_recp_prefix" = null,
      "mdadj_dbnt_mst"."n_inv_recp_no" = 0
      where "mdadj_dbnt_mst"."c_prefix" = "old_name"."c_dbnt_prefix" and "mdadj_dbnt_mst"."n_srno" = "old_name"."n_dbnt_no"
  end if;
  if "new_name"."n_return" = 0 and "new_name"."n_dbnt_no" <> 0 and "new_name"."c_dbnt_prefix" = 'MB' and("old_name"."c_dbnt_prefix" <> "new_name"."c_dbnt_prefix" or "old_name"."n_dbnt_no" <> "new_name"."n_dbnt_no") then
    update "mdadj_dbnt_mst"
      set "mdadj_dbnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
      "mdadj_dbnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
      where "mdadj_dbnt_mst"."c_prefix" = "new_name"."c_dbnt_prefix"
      and "mdadj_dbnt_mst"."n_srno" = "new_name"."n_dbnt_no"
      and "mdadj_dbnt_mst"."c_inv_recp_prefix" is null
      and "mdadj_dbnt_mst"."n_inv_recp_no" = 0;
    print "new_name"."c_dbnt_prefix";
    print "new_name"."n_dbnt_no";
    if sqlstate = '02000' then
      raiserror 18000 "Multi debit note is already settled. You cannot Save this customer receipt. "
    end if end if;
  //Update Advance Note Settlement Details
  if "new_name"."n_return" = 0 and "new_name"."n_adv_no" <> 0 and("old_name"."c_adv_prefix" <> "new_name"."c_adv_prefix" or "old_name"."n_adv_no" <> "new_name"."n_adv_no") then
    if "new_name"."c_adv_prefix" = 'MV' then
      update "mdadj_adv_mst"
        set "mdadj_adv_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "mdadj_adv_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where "mdadj_adv_mst"."c_prefix" = "new_name"."c_adv_prefix"
        and "mdadj_adv_mst"."n_srno" = "new_name"."n_adv_no"
        and "mdadj_adv_mst"."c_inv_recp_prefix" is null
        and "mdadj_adv_mst"."n_inv_recp_no" = 0
    else
      update "cust_advance"
        set "cust_advance"."c_inv_prefix" = "new_name"."c_prefix",
        "cust_advance"."n_inv_no" = "new_name"."n_srno"
        where "cust_advance"."c_prefix" = "new_name"."c_adv_prefix"
        and "cust_advance"."n_srno" = "new_name"."n_adv_no"
        and "cust_advance"."c_inv_prefix" is null
        and "cust_advance"."n_inv_no" = 0
    end if;
    //if this advance not is already settled then will give error message 
    if sqlstate = '02000' then
      raiserror 18000 "Advance note is already settled. You cannot Save this Receipt. "
    end if end if;
  //Update Discount in Ledger
  if "new_name"."n_discount_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-DISRC',"new_name"."d_rec_date",
      "new_name"."n_discount_amt","new_name"."c_cust_code" ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","new_name"."d_rec_date",
      -"new_name"."n_discount_amt",'-DISRC' ) 
  end if;
  //Update Other Charges in Ledger
  if "new_name"."n_other_charge" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'OCHARG',"new_name"."d_rec_date",
      "new_name"."n_other_charge","new_name"."c_cust_code" ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","new_name"."d_rec_date",
      -"new_name"."n_other_charge",'OCHARG' ) 
  end if;
  //Update Cheque Amount to Cash, Bank or Reconcile Account
  if "new_name"."n_chq_amount" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","debit_act_code","new_name"."d_rec_date",
      "new_name"."n_chq_amount","new_name"."c_cust_code" ) 
  end if;
  //TDS  
  if "new_name"."n_tds_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tds_act_code","new_name"."d_rec_date",
      "new_name"."n_tds_amt","new_name"."c_cust_code" ) 
  end if;
  //Update Total Amount to Customer Account
  if "cust_total" <> 0 or "new_name"."n_tds_amt" <> 0 then
    if "new_name"."n_cash_cr_cust" = 1 then
      if "new_name"."n_detail" = 0 and "new_name"."n_advance" = 1 then
        set @debit_act_code_new = "new_name"."c_cust_code"
      else
        set @debit_act_code_new = 'CASH'
      end if end if;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",if "new_name"."n_cash_cr_cust" = 1 then @debit_act_code_new else "new_name"."c_cust_code" endif,"new_name"."d_rec_date",
      -("cust_total"+"isnull"("new_name"."n_tds_amt",0)),"cust_opp_act_code" ) 
  end if;
  //Update Diffence Amount to Kasar Account or as Advance Note
  if "kasar_amount" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"new_name"."d_rec_date",
      "kasar_amount","new_name"."c_cust_code" ) 
  end if;
  if("new_name"."d_reconcile_date" is not null or "new_name"."c_debit_act_code" = 'CASH') and "new_name"."n_advance" = 1 then
    select "n_reconsile" into "b1_reconcile" from "cust_advance"
      where "cust_advance"."c_prefix" = "new_name"."c_prefix"
      and "cust_advance"."n_srno" = "new_name"."n_srno";
    if sqlcode = 0 then
      update "cust_advance" set "c_cust_code" = "new_name"."c_cust_code",
        "d_adv_date" = "new_name"."d_rec_date",
        "n_total" = "new_name"."n_chq_amount"-"new_name"."n_total",
        "n_reconsile" = "b_reconcile"
        where "cust_advance"."c_prefix" = "new_name"."c_prefix"
        and "cust_advance"."n_srno" = "new_name"."n_srno"
    else
      insert into "cust_advance"( "c_prefix","n_srno","c_cust_code","d_adv_date","n_total","n_inv_no","n_reconsile","c_year" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code",
        "new_name"."d_rec_date","new_name"."n_chq_amount"-"new_name"."n_total",0,"b_reconcile","new_name"."c_year" ) 
    end if end if;
  //2nd Section 
  //When Cheque Get Reconciled
  if "new_name"."d_reconcile_date" is not null and "new_name"."c_debit_act_code" <> 'CASH' then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'RCRECV',"new_name"."d_reconcile_date",
      -"new_name"."n_chq_amount","new_name"."c_debit_act_code" ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_debit_act_code","new_name"."d_reconcile_date",
      "new_name"."n_chq_amount","new_name"."c_cust_code" ) 
  end if;
  //3rd Section 
  //If Cheque Returns (Assumption that Reconciliation Date is not null (Because Bank need to be Credited)
  if "new_name"."d_reconcile_date" is not null and "new_name"."n_return" = 1 then
    //Update Receipt Det to Zero
    update "cust_rec_det" set "cust_rec_det"."n_return_amount" = "cust_rec_det"."n_amount"
      where "cust_rec_det"."n_srno" = "new_name"."n_srno";
    //Update Discount in Ledger
    if "new_name"."n_discount_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",'-DISRC',"isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        -"new_name"."n_discount_amt","new_name"."c_cust_code" ) ;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        "new_name"."n_discount_amt",'-DISRC' ) 
    end if;
    //Update Other Charges in Ledger
    if "new_name"."n_other_charge" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",'OCHARG',"isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        -"new_name"."n_other_charge","new_name"."c_cust_code" ) ;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        "new_name"."n_other_charge",'OCHARG' ) 
    end if;
    //Update Cheque Amount to Cash, Bank or Reconcile Account
    if "new_name"."n_chq_amount" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_debit_act_code","isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        -"new_name"."n_chq_amount","new_name"."c_cust_code" ) 
    end if;
    //TDS  
    if "new_name"."n_tds_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tds_act_code","new_name"."d_rec_date",
        -"new_name"."n_tds_amt","new_name"."c_cust_code" ) 
    end if;
    //Update Total Amount to Customer Account
    if "cust_total" <> 0 or "new_name"."n_tds_amt" <> 0 then
      if "new_name"."n_cash_cr_cust" = 1 then
        if "new_name"."n_detail" = 0 and "new_name"."n_advance" = 1 then
          set @debit_act_code_new = "new_name"."c_cust_code"
        else
          set @debit_act_code_new = 'CASH'
        end if end if;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",if "new_name"."n_cash_cr_cust" = 1 then @debit_act_code_new else "new_name"."c_cust_code" endif,"isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        ("cust_total"+"isnull"("new_name"."n_tds_amt",0)),"cust_opp_act_code" ) 
    end if;
    //Update Diffence Amount to Kasar Account or as Advance Note
    if "kasar_amount" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"isnull"("new_name"."d_return_date","new_name"."d_reconcile_date"),
        -"kasar_amount","new_name"."c_cust_code" ) 
    end if;
    if "new_name"."n_advance" = 1 then
      delete from "cust_advance"
        where "cust_advance"."c_prefix" = "new_name"."c_prefix"
        and "cust_advance"."n_srno" = "new_name"."n_srno"
    end if end if;
  if "new_name"."c_act_code" is not null and "new_name"."c_act_code" <> '' and "new_name"."c_debit_act_code" = 'CASH' then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_act_code","new_name"."d_rec_date",
      "new_name"."n_total",'CASH' ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CASH',"new_name"."d_rec_date",
      -"new_name"."n_total","new_name"."c_act_code" ) 
  end if;
  //deleting credit note and multi creditnote 
  if "new_name"."n_crnt_no" <> "old_name"."n_crnt_no" or "new_name"."n_return" = 1 then
    if "old_name"."n_crnt_no" > 0 then
      delete from
        "settle_mst"
        where "c_prefix" = "old_name"."c_prefix"
        and "n_srno" = "old_name"."n_srno"
        and "c_year" = "old_name"."c_year"
        and "c_prefix1" = "old_name"."c_crnt_prefix"
        and "n_srno1" = "old_name"."n_crnt_no"
        and "c_year1" = "old_name"."c_crnt_year"
    end if;
    if "new_name"."n_return" = 0 and "new_name"."n_crnt_no" <> 0 then
      set @crnt_yr = "new_name"."c_crnt_year";
      insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
        "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
        "new_name"."c_prefix","new_name"."n_srno",@crnt_yr,"new_name"."c_crnt_prefix","new_name"."n_crnt_no",
        ("new_name"."n_crnt_amt"),"new_name"."c_cust_code","new_name"."d_rec_date","new_name"."d_rec_date",1 ) 
    //EOF if new_name.n_return=0 and  new_name.n_crnt_no<>0  then 
    end if end if;
  //debit note and multi debit note
  if "new_name"."n_dbnt_no" <> "old_name"."n_dbnt_no" or "new_name"."n_return" = 1 then
    if "old_name"."n_dbnt_no" > 0 then
      delete from
        "settle_mst"
        where "c_prefix" = "old_name"."c_prefix"
        and "n_srno" = "old_name"."n_srno"
        and "c_year" = "old_name"."c_year"
        and "c_prefix1" = "old_name"."c_dbnt_prefix"
        and "n_srno1" = "old_name"."n_dbnt_no"
        and "c_year1" = "old_name"."c_dbnt_year"
    end if;
    if "new_name"."n_return" = 0 and "new_name"."n_dbnt_no" <> 0 then
      set @dbnt_yr = "new_name"."c_dbnt_year";
      insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
        "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
        "new_name"."c_prefix","new_name"."n_srno",@dbnt_yr,"new_name"."c_dbnt_prefix","new_name"."n_dbnt_no",
        -1*("new_name"."n_dbnt_amt"),"new_name"."c_cust_code","new_name"."d_rec_date","new_name"."d_rec_date",1 ) 
    end if end if;
  //advance note and multi advance note
  if "new_name"."n_adv_no" <> "old_name"."n_adv_no" or "new_name"."n_return" = 1 then
    if "old_name"."n_adv_no" > 0 then
      delete from
        "settle_mst"
        where "c_prefix" = "old_name"."c_prefix"
        and "n_srno" = "old_name"."n_srno"
        and "c_year" = "old_name"."c_year"
        and "c_prefix1" = "old_name"."c_adv_prefix"
        and "n_srno1" = "old_name"."n_adv_no"
        and "c_year1" = "old_name"."c_adv_year"
    end if;
    if "new_name"."n_return" = 0 and "new_name"."n_adv_no" <> 0 then
      set @adv_year = "new_name"."c_adv_year";
      insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
        "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
        "new_name"."c_prefix","new_name"."n_srno",@adv_year,"new_name"."c_adv_prefix","new_name"."n_adv_no",
        ("new_name"."n_adv_amt"),"new_name"."c_cust_code","new_name"."d_rec_date","new_name"."d_rec_date",1 ) 
    end if
  end if
end;
CREATE TRIGGER "cust_tmp_rec.delete_update_invoice_balance" before delete order 2 on
-----------------------------------------------------------------------------
"DBA"."cust_tmp_rec"
referencing old as "old_name"
for each row
begin
  call "usp_check_update_last_tran_info"(1,"old_name"."c_cust_code",9,"old_name"."c_prefix","old_name"."n_srno","old_name"."d_rec_date")
end;
CREATE TRIGGER "cust_tmp_rec.insert_ledger_invoice_update" before insert order 1 on
-----------------------------------------------------------------------------
"DBA"."cust_tmp_rec"
referencing new as "new_name"
for each row
begin
  call "usp_check_update_last_tran_info"(0,"new_name"."c_cust_code",9,"new_name"."c_prefix","new_name"."n_srno","new_name"."d_rec_date")
end;
CREATE TRIGGER "dbnt_det.insert_update_stock" after insert order 1 on
"DBA"."dbnt_det"
referencing new as "new_name"
for each row
begin
  update "stock" set "stock"."n_balance_qty" = "stock"."n_balance_qty"-"new_name"."n_qty",
    "stock"."n_debit_note_qty" = "stock"."n_debit_note_qty"+"new_name"."n_qty",
    "stock"."t_ltime" = "now"(),"stock"."d_ldate" = "today"()
    where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
  if "new_name"."n_enable_supp_stock_sale" = 1 then
    insert into "Stock_inward_outwad"( "c_item_code","c_batch_no","n_tran_no","c_supp_code","n_qty","n_schm_qty","d_date","n_flag" ) values
      ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_srno","new_name"."c_code_supp",-1*"new_name"."n_qty",0,"new_name"."d_dbnt_date",4 ) 
  end if
end;
CREATE TRIGGER "dbnt_mst.delete_delete_remarks" after delete order 3 on
"DBA"."dbnt_mst"
referencing old as "old_name"
for each row
begin
  delete from "dbnt_settle_mst"
    where "dbnt_settle_mst"."c_year" = "old_name"."c_year"
    and "dbnt_settle_mst"."c_prefix" = "old_name"."c_prefix"
    and "dbnt_settle_mst"."n_srno" = "old_name"."n_srno"
    and "dbnt_settle_mst"."c_year1" = "old_name"."c_year"
    and "dbnt_settle_mst"."c_prefix1" = "old_name"."c_prefix"
    and "dbnt_settle_mst"."n_srno1" = "old_name"."n_srno"
    and "dbnt_settle_mst"."c_supp_code" = "old_name"."c_supp_code"
    and "dbnt_settle_mst"."c_reason_code" = "old_name"."c_reason_code"
    and "dbnt_settle_mst"."c_ref_no" = "old_name"."c_ref_no";
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix"
    and "remarks"."n_tran_id" = "old_name"."n_srno";
  insert into "deleted_mst"( "c_prefix","n_srno","d_date","c_code","n_amount" ) values
    ( "old_name"."c_prefix","old_name"."n_srno","old_name"."d_dbnt_date","old_name"."c_supp_code","old_name"."n_total" ) ;
  call "usp_check_update_last_tran_info"(1,"old_name"."c_supp_code",14,"old_name"."c_prefix","old_name"."n_srno","old_name"."d_dbnt_date")
end;
CREATE TRIGGER "dbnt_mst.Insert_insert_into_remark" after insert order 1 on
"DBA"."dbnt_mst"
referencing new as "new_name"
for each row
begin
  declare "s_credit_act_code" char(6);
  set "s_credit_act_code" = '-CLAIM';
  insert into "remarks" values( "new_name"."c_prefix","new_name"."n_srno",null,null,"new_name"."c_remark" ) ;
  insert into "dbnt_settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
    "n_srno1","n_amount","c_supp_code","d_date","d_due_date","c_remark","c_ref_no","d_ref_dt","c_reason_code","c_mfac_code" ) values( "new_name"."c_year",
    "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
    "new_name"."n_total","new_name"."c_supp_code","new_name"."d_dbnt_date","new_name"."d_dbnt_date"+"new_name"."n_settle_days","new_name"."c_remark",
    "new_name"."c_ref_no","new_name"."d_ref_dt","new_name"."c_reason_code","new_name"."c_mfac_code" ) ;
  call "usp_check_update_last_tran_info"(0,"new_name"."c_supp_code",14,"new_name"."c_prefix","new_name"."n_srno","new_name"."d_dbnt_date")
end;
CREATE TRIGGER "dbnt_mst.update_update_dbnt_settle_mst" after UPDATE order 1
on "DBA".dbnt_mst
referencing old as old_name new as new_name
for each row
begin
  delete from dbnt_settle_mst where 
    dbnt_settle_mst.c_year = old_name.c_year and 
    dbnt_settle_mst.c_prefix = old_name.c_prefix and 
    dbnt_settle_mst.n_srno = old_name.n_srno and 
    dbnt_settle_mst.c_year1 = old_name.c_year and 
    dbnt_settle_mst.c_prefix1 = old_name.c_prefix and 
    dbnt_settle_mst.n_srno1 = old_name.n_srno and 
    dbnt_settle_mst.c_supp_code = old_name.c_supp_code and
    dbnt_settle_mst.c_reason_code = old_name.c_reason_code and
    dbnt_settle_mst.c_ref_no = old_name.c_ref_no;

    insert into dbnt_settle_mst(c_year,c_prefix,n_srno,c_year1,c_prefix1,
                n_srno1,n_amount,c_supp_code,d_date,d_due_date,c_remark,c_ref_no,d_ref_dt,c_reason_code,c_mfac_code) values(new_name.c_year,
                new_name.c_prefix,new_name.n_srno,new_name.c_year,new_name.c_prefix,new_name.n_srno,
                new_name.n_total,new_name.c_supp_code,new_name.d_dbnt_date,new_name.d_dbnt_date+new_name.n_settle_days, new_name.c_remark,
                new_name.c_ref_no,new_name.d_ref_dt,new_name.c_reason_code,new_name.c_mfac_code);
end;
CREATE TRIGGER "delete_admin_disapprove_qty_on_stk_audit_det" after delete order 1 on
"DBA"."stk_audit_det"
referencing old as "old_name"
for each row
begin
  update "stk_audit" set "n_complete" = 0 where "c_item_code" = "old_name"."c_item_code" and "n_srno" = "old_name"."n_srno";
  update "Stk_user_audit" set "n_complted" = 0 where "c_prefix" = 'AU' and "n_srno" = "old_name"."n_srno"
end;
CREATE TRIGGER "delete_cdadvnt_from_mdadj_adv_det" before delete order 1 on
"DBA"."mdadj_adv_det"
referencing old as "old_name"
for each row
begin
  declare @cust_code char(6);
  declare @doc_date_old,@doc_date_new date;
  declare @new_settled_amt numeric(18,2);
  declare @c_sett_prefix_old,@c_sett_prefix_new,@c_doc_prefix_old,@c_doc_prefix_new char(2);
  declare @c_sett_year_old,@c_sett_year_new,@c_doc_year_old,@c_doc_year_new char(2);
  declare @sett_doc_old,@sett_doc_new,@n_doc_old,@n_doc_new numeric(18);
  if "old_name"."n_doc_type" = 0 then
    update "cust_advance" set "cust_advance"."c_inv_prefix" = null,
      "cust_advance"."n_inv_no" = 0
      where("cust_advance"."c_prefix" = "old_name"."c_doc_prefix"
      and "cust_advance"."n_srno" = "old_name"."n_doc_no")
      and "cust_advance"."c_inv_prefix" = "old_name"."c_prefix"
      and "cust_advance"."n_inv_no" = "old_name"."n_srno";
    //if this credit is already settled with some other document then will give error message 
    if sqlstate = '02000' then
      raiserror 18000 "Advance note is already settlled. You cannot Save this Multi Document Transaction. "
    end if end if;
  set @c_sett_prefix_old = "old_name"."c_doc_prefix";
  set @sett_doc_old = "old_name"."n_doc_no";
  set @c_sett_year_old = null;
  set @c_doc_prefix_old = "old_name"."c_prefix";
  set @c_doc_year_old = "uf_get_pk_component"("old_name"."n_srno",1);
  set @n_doc_old = "old_name"."n_srno";
  set @c_sett_year_old = null;
  if "length"(@sett_doc_old) > 9 then
    select "c_cust_code","d_adv_date","uf_get_pk_component"(@sett_doc_old,1) into @cust_code,@doc_date_old,@c_sett_year_old from "cust_advance" where "n_srno" = @sett_doc_old and "c_prefix" = @c_sett_prefix_old
  else
    select "c_cust_code","d_adv_date" into @cust_code,@doc_date_old from "cust_advance" where "n_srno" = @sett_doc_old and "c_prefix" = @c_sett_prefix_old
  end if;
  if @c_sett_year_old is null then
    if "month"(@doc_date_old) <= 3 then
      set @c_sett_year_old = "right"("string"("year"(@doc_date_old)-1),2)
    else
      set @c_sett_year_old = "right"("string"("year"(@doc_date_old)),2)
    end if end if;
  delete from "settle_mst"
    where "n_srno" = @n_doc_old
    and "c_prefix" = @c_doc_prefix_old
    and "c_year" = @c_doc_year_old
    and "n_srno1" = @sett_doc_old
    and "c_prefix1" = @c_sett_prefix_old
    and "c_year1" = @c_sett_year_old
end;
CREATE TRIGGER "delete_coll_veification_dispatch" before delete order 1 on
"DBA"."coll_list_cash_cheque"
referencing old as "old_name"
for each row
begin
  declare "c_dispatch_code" char(6);
  select "c_dispatch_stage_code" into "c_dispatch_code" from "system_parameter";
  if "old_name"."n_dispatch" = 1 then
    delete from "doc_track" where "n_inv_no" = "old_name"."n_srno" and "c_stage_code" = "c_dispatch_code" and "c_inv_prefix" = "old_name"."c_prefix"
  end if
end;
CREATE TRIGGER "delete_from_crnt_repl_mst" before delete order 2 on
"DBA"."crnt_repl_mst"
referencing old as "old_name"
for each row
begin
  delete from "invoice_print" where "invoice_print"."c_prefix" = "old_name"."c_prefix"
    and "invoice_print"."n_srno" = "old_name"."n_srno";
  call "usp_check_update_last_tran_info"(1,"old_name"."c_cust_code",7,"old_name"."c_prefix","old_name"."n_srno","old_name"."d_crnt_repl_date");
  delete from "settle_mst_header"
    where "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno";
  delete from "settle_mst"
    where "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_prefix1" = "old_name"."c_prefix"
    and "n_srno1" = "old_name"."n_srno";
  if "old_name"."n_crnt_no" > 0 and "old_name"."c_crnt_prefix" = 'TC' then
    update "crnt_tmp_mst" set "n_inv_recp_no" = 0,"c_inv_recp_prefix" = null where "n_srno" = "old_name"."n_crnt_no" and "c_prefix" = "old_name"."c_crnt_prefix"
  end if
end;
CREATE TRIGGER "delete_from_dc_mst_det" before delete order 1 on
"DBA"."dc_mst_det"
referencing old as "old_name"
for each row
begin
  return;
  delete from "transporter_payment_ledger" where "c_code" = "old_name"."c_trans_code" and "n_doc_no" = "old_name"."n_srno" and "c_doc_no" = '-'
end;
CREATE TRIGGER "delete_from_invoice_mst_det" before delete order 1 on
"DBA"."invoice_mst_det"
referencing old as "old_name"
for each row
begin
  return;
  delete from "transporter_payment_ledger" where "c_code" = "old_name"."c_trans_code" and "n_doc_no" = "old_name"."n_srno" and "c_doc_no" = '-'
end;
CREATE TRIGGER "delete_from_ledger_when_dbnt_voucher_mst" after delete order 3 on
---------------------------
----------------------------------------------------
---------------------------------------------
"DBA"."dbnt_voucher_mst"
referencing old as "old_name"
for each row
begin
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno";
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix"
    and "remarks"."n_tran_id" = "old_name"."n_srno";
  delete from "settle_mst"
    where "settle_mst"."c_year" = "old_name"."c_year"
    and "settle_mst"."c_prefix" = "old_name"."c_prefix"
    and "settle_mst"."n_srno" = "old_name"."n_srno"
    and "settle_mst"."c_year1" = "old_name"."c_year"
    and "settle_mst"."c_prefix1" = "old_name"."c_prefix"
    and "settle_mst"."n_srno1" = "old_name"."n_srno"
    and "settle_mst"."c_cust_code" = "old_name"."c_supp_code";
  delete from "gst_ledger_mst" where "gst_ledger_mst"."n_srno" = "old_name"."n_srno";
  delete from "dbnt_settle_mst"
    where "dbnt_settle_mst"."c_year" = "old_name"."c_year"
    and "dbnt_settle_mst"."c_prefix" = "old_name"."c_prefix"
    and "dbnt_settle_mst"."n_srno" = "old_name"."n_srno";
  delete from "purchase_mst_dbnt_settle_det"
    where "purchase_mst_dbnt_settle_det"."c_year" = "old_name"."c_year"
    and "purchase_mst_dbnt_settle_det"."c_prefix" = "old_name"."c_prefix"
    and "purchase_mst_dbnt_settle_det"."n_srno" = "old_name"."n_srno";
  if "old_name"."n_tran_type" = 2 then
    update "purchase_mst" set "n_ref_crnt_voucher" = 0,"n_crnt_amt" = 0
      where "n_ref_crnt_voucher" = "old_name"."n_srno"
  end if;
  if "old_name"."n_tran_type" = 3 then
    update "purchase_mst" set "n_ref_dbnt_voucher" = 0,"n_dbnt_amt" = 0
      where "n_ref_dbnt_voucher" = "old_name"."n_srno"
  end if;
  insert into "deleted_mst"( "c_prefix","n_srno","d_date","c_code","n_amount" ) values
    ( "old_name"."c_prefix","old_name"."n_srno","old_name"."d_date","old_name"."c_supp_code","old_name"."n_total" ) ;
  call "usp_check_update_last_tran_info"(1,"old_name"."c_supp_code",15,"old_name"."c_prefix","old_name"."n_srno","old_name"."d_date")
end;
CREATE TRIGGER "delete_from_ledger_when_delete_jv_det" after delete order 3
on "DBA".jv_det
referencing old as old_name
for each row
begin
  declare ac_prefix char(2);
  declare s_yr char(2);
  select "right"(DB_NAME(0),2) into s_yr from DUMMY;
  if s_yr is null then
    set s_yr='00'
  end if
  ;
  select prefix_sr_numbers.c_prefix into ac_prefix from prefix_sr_numbers
    where prefix_sr_numbers.c_trans='JV';
  delete from ledger where ledger.c_prefix=ac_prefix
    and ledger.n_tran_no=old_name.n_srno and ledger.c_act_code=old_name.c_act_code;
  delete from settle_mst
    where settle_mst.c_year=s_yr
    and settle_mst.c_prefix=ac_prefix
    and settle_mst.n_srno=old_name.n_srno
    and settle_mst.c_year1=s_yr
    and settle_mst.c_prefix1=ac_prefix
    and settle_mst.n_srno1=old_name.n_srno
    and settle_mst.c_cust_code=old_name.c_act_code
end;
CREATE TRIGGER "delete_from_settle_mst" before delete order 1 on
"DBA"."settle_cust_rec_det"
referencing old as "old_name"
for each row
begin
  delete from "settle_mst" where "c_year" = "old_name"."c_year" and "c_prefix" = "old_name"."c_prefix" and "n_srno" = "old_name"."n_srno" and "d_date" = "old_name"."d_date"
end;
CREATE TRIGGER "delete_from_stock" before delete order 1
on "DBA".stock
referencing old as old_name
for each row
begin
  declare d_count decimal(8);
  select count(*) into d_count from purchase_det
    where c_item_code=old_name.c_item_code
    and c_batch_no=old_name.c_batch_no;
  if d_count is null then
    set d_count=0
  end if
  ;
  if d_count>0 then
    raiserror 18000 "This Item and Batch has entry in Purchase. So You cannot delete it."
  end if
  ;
  select count(*) into d_count from crnt_det
    where c_item_code=old_name.c_item_code
    and c_batch_no=old_name.c_batch_no;
  if d_count is null then
    set d_count=0
  end if
  ;
  if d_count>0 then
    raiserror 18000 "This Item and Batch has entry in Credit Note. So You cannot delete it."
  end if
end;
CREATE TRIGGER "delete_gatepassno_from_dbnt_mst" after delete order 3 on
"DBA"."gate_pass_dbnt_issue"
referencing old as "old_name"
for each row
begin
  update "dbnt_mst" set "dbnt_mst"."c_gate_pass_prefix" = null,
    "dbnt_mst"."n_gate_pass_srno" = null,
    "dbnt_mst"."t_sent_dtime" = null
    where "dbnt_mst"."c_prefix" = "old_name"."c_dbnt_prefix" and "dbnt_mst"."n_srno" = "old_name"."n_dbnt_srno"
end;
CREATE TRIGGER "delete_goods_rec_ledger_from_goods_rec_det_delete" before delete order 1 on
"DBA"."goods_rec_det"
referencing old as "old_name"
for each row
begin
  delete from "goods_rec_ledger"
    where "goods_rec_ledger"."n_srno" = "old_name"."n_srno"
    and "goods_rec_ledger"."n_seq" = "old_name"."n_seq"
end;
CREATE TRIGGER "delete_into_slip_list_mst" before delete order 1 on
"DBA"."slip_list_mst"
referencing old as "old_name"
for each row
begin
  delete from "transporter_payment_ledger" where "n_doc_no" = "old_name"."n_srno" and "c_doc_no" = '-'
end;
CREATE TRIGGER "delete_inv_track_from_slip_mst" before update order 2 on
"DBA"."slip_list_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  delete from "inv_track" where "n_inv_no" = "new_name"."n_srno"
end;
CREATE TRIGGER "delete_invoice_det_stk_sale_det" before delete order 1 on
------------------
----Inv insert End
"DBA"."invoice_det_stk_sale"
referencing old as "old_name"
for each row
begin
  delete from "Stock_inward_outwad"
    where "c_item_code" = "old_name"."c_item_code" and "c_batch_no" = "old_name"."c_batch_no" and "c_supp_code" = "old_name"."c_supp_code" and "n_tran_no" = "old_name"."n_tran_no" and "n_tran_seq" = "old_name"."n_seq"
end;
CREATE TRIGGER "delete_ledger_from_act_open_tran_delete" before delete order 2
on "DBA".act_open_tran
referencing old as old_name
for each row
begin
  delete from settle_mst
    where settle_mst.c_year=old_name.c_year
    and settle_mst.c_prefix=old_name.c_prefix
    and settle_mst.n_srno=old_name.n_srno
    and settle_mst.c_year1=old_name.c_year
    and settle_mst.c_prefix1=old_name.c_prefix
    and settle_mst.n_srno1=old_name.n_srno
    and settle_mst.c_cust_code=old_name.c_cust_code
end;
CREATE TRIGGER "delete_ledger_from_bank_to_bank" before delete order 2
on "DBA".bank_to_bank
referencing old as old_name
for each row
begin
  delete from ledger where ledger.c_prefix=old_name.c_prefix
    and ledger.n_tran_no=old_name.n_srno;
  delete from remarks where remarks.c_prefix=old_name.c_prefix
    and remarks.n_tran_id=old_name.n_srno
end;
CREATE TRIGGER "delete_ledger_from_cash_coll_ent_mst" before delete order 1 on "DBA"."cash_coll_ent_mst"
referencing old as "old_name"
for each row
begin
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno";
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix" and "remarks"."n_tran_id" = "old_name"."n_srno"
end;
CREATE TRIGGER "delete_ledger_from_crnt_debit_act" before delete order 3
on "DBA".crnt_debit_act
referencing old as old_name
for each row
begin
  delete from ledger where c_prefix=old_name.c_prefix
    and n_tran_no=old_name.n_srno and c_act_code=old_name.c_debit_act
    and c_opp_act_code=old_name.c_cust_code
end;
COMMENT ON TRIGGER "DBA"."crnt_debit_act"."delete_ledger_from_crnt_debit_act" IS 'delete from ledger when delete from table';
CREATE TRIGGER "Delete_Ledger_From_Cust_Dbnt" before delete order 2 on
"DBA"."cust_dbnt"
referencing old as "old_name"
for each row
begin
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno";
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix"
    and "remarks"."n_tran_id" = "old_name"."n_srno";
  delete from "invoice_dbnt" where "invoice_dbnt"."c_dbnt_prefix" = "old_name"."c_prefix"
    and "invoice_dbnt"."n_dbnt_srno" = "old_name"."n_srno";
  delete from "gst_ledger_mst" where "gst_ledger_mst"."n_srno" = "old_name"."n_srno";
  delete from "gst_ledger_det" where "gst_ledger_det"."n_srno" = "old_name"."n_srno";
  call "usp_check_update_last_tran_info"(1,"old_name"."c_cust_code",16,"old_name"."c_prefix","old_name"."n_srno","old_name"."d_dbnt_date");
  delete from "settle_mst_header" where "n_srno" = "old_name"."n_srno" and "c_prefix" = "old_name"."c_prefix" and "c_year" = "old_name"."c_year";
  delete from "settle_mst"
    where "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_year" = "old_name"."c_year"
    and "c_prefix1" = "old_name"."c_prefix"
    and "n_srno1" = "old_name"."n_srno"
    and "c_year1" = "old_name"."c_year"
end;
CREATE TRIGGER "Delete_Ledger_From_Cust_Dbnt_Crnt_Act" before delete order 2
on "DBA".cust_dbnt_credit_act
referencing old as old_name
for each row
begin
  delete from ledger where c_prefix=old_name.c_prefix
    and n_tran_no=old_name.n_srno and c_act_code=old_name.c_credit_act
    and c_opp_act_code=old_name.c_cust_code
end;
CREATE TRIGGER "delete_ledger_from_dbnt_voucher_det" after delete order 1 on
"DBA"."dbnt_voucher_det"
referencing old as "old_name"
for each row
begin
  delete from "gst_ledger_det" where "gst_ledger_det"."n_srno" = "old_name"."n_srno" and "gst_ledger_det"."n_seq" = "old_name"."n_seq"
end;
CREATE TRIGGER "delete_ledger_from_gst_settlement"
-----------------------------------------------------------------------
 before delete order 2 on
----------------------payment delete
"DBA"."gst_settlement"
referencing old as "old_name"
for each row
begin
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno";
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix"
    and "remarks"."n_tran_id" = "old_name"."n_srno"
end;
CREATE TRIGGER "delete_ledger_from_invoice_mst" before delete order 1 on
-----------------------
--inv update End
--inv Delete Start
"DBA"."invoice_mst"
referencing old as "old_name"
for each row
begin
  delete from "gst_ledger_mst" where "gst_ledger_mst"."n_srno" = "old_name"."n_srno";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno";
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix"
    and "remarks"."n_tran_id" = "old_name"."n_srno";
  delete from "invoice_print" where "invoice_print"."c_prefix" = "old_name"."c_prefix"
    and "invoice_print"."n_srno" = "old_name"."n_srno";
  update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = null,
    "crnt_mst"."n_inv_recp_no" = 0
    where "crnt_mst"."c_prefix" = "old_name"."c_crnt_prefix" and "crnt_mst"."n_srno" = "old_name"."n_crnt_no";
  update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
    "mdadj_mst"."n_inv_recp_no" = 0
    where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_prefix" and "mdadj_mst"."n_srno" = "old_name"."n_crnt_no";
  update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = null,
    "crnt_repl_mst"."n_inv_recp_no" = 0
    where "crnt_repl_mst"."c_prefix" = "old_name"."c_crnt_repl_prefix" and "crnt_repl_mst"."n_srno" = "old_name"."n_crnt_repl_no";
  update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
    "mdadj_mst"."n_inv_recp_no" = 0
    where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_repl_prefix" and "mdadj_mst"."n_srno" = "old_name"."n_crnt_repl_no";
  update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = null,
    "cust_dbnt"."n_inv_recp_no" = 0
    where "cust_dbnt"."c_prefix" = "old_name"."c_dbnt_prefix" and "cust_dbnt"."n_srno" = "old_name"."n_dbnt_no";
  update "mdadj_dbnt_mst" set "mdadj_dbnt_mst"."c_inv_recp_prefix" = null,"mdadj_dbnt_mst"."n_inv_recp_no" = 0
    where "mdadj_dbnt_mst"."c_prefix" = "old_name"."c_dbnt_prefix" and "mdadj_dbnt_mst"."n_srno" = "old_name"."n_dbnt_no";
  update "cust_advance" set "cust_advance"."c_inv_prefix" = null,"cust_advance"."n_inv_no" = 0
    where "cust_advance"."c_prefix" = "old_name"."c_adv_prefix" and "cust_advance"."n_srno" = "old_name"."n_adv_no";
  update "mdadj_adv_mst" set "mdadj_adv_mst"."c_inv_recp_prefix" = null,"mdadj_adv_mst"."n_inv_recp_no" = 0
    where "mdadj_adv_mst"."c_prefix" = "old_name"."c_adv_prefix" and "mdadj_adv_mst"."n_srno" = "old_name"."n_adv_no";
  update "ord_mst" set "ord_mst"."n_invno" = 0
    where "ord_mst"."n_srno" = "old_name"."n_order_no";
  insert into "deleted_mst"( "c_prefix","n_srno","d_date","c_code","n_amount","n_ref_no","c_ref_year" ) values
    ( "old_name"."c_prefix","old_name"."n_srno","old_name"."d_inv_date","old_name"."c_cust_code","old_name"."n_total","old_name"."n_order_no","old_name"."c_year" ) ;
  --Delete from Storetrack 
  delete from "st_track_mst"
    where "st_track_mst"."c_doc_no" = ('000/'+"string"("old_name"."c_year")+'/'+"string"("old_name"."c_prefix")+'/'+"string"("old_name"."n_srno"));
  call "usp_check_update_last_tran_info"(1,"old_name"."c_cust_code",1,"old_name"."c_prefix","old_name"."n_srno","old_name"."d_inv_date");
  delete from "settle_mst_header"
    where "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_year" = "old_name"."c_year";
  //deliting invoice entry   
  delete from "settle_mst"
    where "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_year" = "old_name"."c_year"
    and "c_prefix1" = "old_name"."c_prefix"
    and "n_srno1" = "old_name"."n_srno"
    and "c_year1" = "old_name"."c_year";
  //deleting credit note and multi creditnote   
  if "old_name"."n_crnt_no" <> 0 then
    delete from "settle_mst"
      where "c_prefix" = "old_name"."c_prefix"
      and "n_srno" = "old_name"."n_srno"
      and "c_year" = "old_name"."c_year"
      and "c_prefix1" = "old_name"."c_crnt_prefix"
      and "n_srno1" = "old_name"."n_crnt_no"
      and "c_year1" = "old_name"."c_crnt_year"
  end if;
  //credit note replacement  
  if "old_name"."n_crnt_repl_no" <> 0 then
    delete from "settle_mst"
      where "c_prefix" = "old_name"."c_prefix"
      and "n_srno" = "old_name"."n_srno"
      and "c_year" = "old_name"."c_year"
      and "c_prefix1" = "old_name"."c_crnt_repl_prefix"
      and "n_srno1" = "old_name"."n_crnt_repl_no"
      and "c_year1" = "old_name"."c_repl_year"
  end if;
  //debit note and multi debit note
  if "old_name"."n_dbnt_no" <> 0 then
    delete from "settle_mst"
      where "c_prefix" = "old_name"."c_prefix"
      and "n_srno" = "old_name"."n_srno"
      and "c_year" = "old_name"."c_year"
      and "c_prefix1" = "old_name"."c_dbnt_prefix"
      and "n_srno1" = "old_name"."n_dbnt_no"
      and "c_year1" = "old_name"."c_dbnt_year"
  end if;
  //advance note and multi advance note
  if "old_name"."n_adv_no" <> 0 then
    delete from "settle_mst"
      where "c_prefix" = "old_name"."c_prefix"
      and "n_srno" = "old_name"."n_srno"
      and "c_year" = "old_name"."c_year"
      and "c_prefix1" = "old_name"."c_adv_prefix"
      and "n_srno1" = "old_name"."n_adv_no"
      and "c_year1" = "old_name"."c_adv_year"
  end if;
  update "sale_till_date" set "n_value" = "n_value"-"old_name"."n_total" where "c_code" = "old_name"."c_cust_code";
  update "gstin_wise_sale_total" set "n_value" = "n_value"-"old_name"."n_total" where "c_code" = "old_name"."c_to_gst_no"
end;
CREATE TRIGGER "delete_ledger_from_ord_mst" before delete order 1 on
-----------------------
--inv update End
--inv Delete Start
"DBA"."ord_mst"
referencing old as "old_name"
for each row
begin
  call "usp_check_update_last_tran_info"(1,"old_name"."c_cust_code",17,"old_name"."c_prefix","old_name"."n_srno","old_name"."d_date")
end;
CREATE TRIGGER "delete_ledger_from_payment" before delete order 2 on
----------------------payment delete
"DBA"."payment"
referencing old as "old_name"
for each row
begin
  delete from "settle_mst"
    where "settle_mst"."c_year" = "old_name"."c_year"
    and "settle_mst"."c_prefix" = "old_name"."c_prefix"
    and "settle_mst"."n_srno" = "old_name"."n_srno"
    and "settle_mst"."c_year1" = "old_name"."c_year"
    and "settle_mst"."c_prefix1" = "old_name"."c_prefix"
    and "settle_mst"."n_srno1" = "old_name"."n_srno";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno";
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix"
    and "remarks"."n_tran_id" = "old_name"."n_srno";
  delete from "payment_det"
    where "payment_det"."c_year" = "old_name"."c_year"
    and "payment_det"."c_prefix" = "old_name"."c_prefix"
    and "payment_det"."n_srno" = "old_name"."n_srno";
  ---------jagamohan GST
  delete from "gst_ledger_mst"
    where "gst_ledger_mst"."n_srno" = "old_name"."n_srno";
  delete from "gst_ledger_mst"
    where "gst_ledger_mst"."n_srno" = -1*"old_name"."n_srno";
  delete from "gst_ledger_det"
    where "gst_ledger_det"."n_srno" = "old_name"."n_srno";
  delete from "expences_detail"
    where "expences_detail"."n_srno" = "old_name"."n_srno"
    and "expences_detail"."c_from_tran" = 'PAYMENT';
  insert into "deleted_mst"( "c_prefix","n_srno","d_date","c_code","n_amount","c_remark" ) values
    ( "old_name"."c_prefix","old_name"."n_srno","old_name"."d_pay_date","old_name"."c_act_code","old_name"."n_total","old_name"."c_remark" ) ;
  call "usp_check_update_last_tran_info"(1,"old_name"."c_act_code",12,"old_name"."c_prefix","old_name"."n_srno","old_name"."d_pay_date")
---------------
end;
CREATE TRIGGER "delete_ledger_from_rtn_invoice_mst" before delete order 1 on
----------------------------------------
--inv update End
--inv Delete Start
"DBA"."rtn_invoice_mst"
referencing old as "old_name"
for each row
begin
  delete from "gst_ledger_mst" where "gst_ledger_mst"."n_srno" = "old_name"."n_srno";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno";
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix"
    and "remarks"."n_tran_id" = "old_name"."n_srno";
  delete from "invoice_print" where "invoice_print"."c_prefix" = "old_name"."c_prefix"
    and "invoice_print"."n_srno" = "old_name"."n_srno";
  update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = null,
    "crnt_mst"."n_inv_recp_no" = 0
    where "crnt_mst"."c_prefix" = "old_name"."c_crnt_prefix" and "crnt_mst"."n_srno" = "old_name"."n_crnt_no";
  update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
    "mdadj_mst"."n_inv_recp_no" = 0
    where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_prefix" and "mdadj_mst"."n_srno" = "old_name"."n_crnt_no";
  update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = null,
    "crnt_repl_mst"."n_inv_recp_no" = 0
    where "crnt_repl_mst"."c_prefix" = "old_name"."c_crnt_repl_prefix" and "crnt_repl_mst"."n_srno" = "old_name"."n_crnt_repl_no";
  update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
    "mdadj_mst"."n_inv_recp_no" = 0
    where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_repl_prefix" and "mdadj_mst"."n_srno" = "old_name"."n_crnt_repl_no";
  update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = null,
    "cust_dbnt"."n_inv_recp_no" = 0
    where "cust_dbnt"."c_prefix" = "old_name"."c_dbnt_prefix" and "cust_dbnt"."n_srno" = "old_name"."n_dbnt_no";
  update "mdadj_dbnt_mst" set "mdadj_dbnt_mst"."c_inv_recp_prefix" = null,"mdadj_dbnt_mst"."n_inv_recp_no" = 0
    where "mdadj_dbnt_mst"."c_prefix" = "old_name"."c_dbnt_prefix" and "mdadj_dbnt_mst"."n_srno" = "old_name"."n_dbnt_no";
  update "cust_advance" set "cust_advance"."c_inv_prefix" = null,"cust_advance"."n_inv_no" = 0
    where "cust_advance"."c_prefix" = "old_name"."c_adv_prefix" and "cust_advance"."n_srno" = "old_name"."n_adv_no";
  update "mdadj_adv_mst" set "mdadj_adv_mst"."c_inv_recp_prefix" = null,"mdadj_adv_mst"."n_inv_recp_no" = 0
    where "mdadj_adv_mst"."c_prefix" = "old_name"."c_adv_prefix" and "mdadj_adv_mst"."n_srno" = "old_name"."n_adv_no";
  update "ord_mst" set "ord_mst"."n_invno" = 0
    where "ord_mst"."n_srno" = "old_name"."n_order_no";
  insert into "deleted_mst"( "c_prefix","n_srno","d_date","c_code","n_amount","n_ref_no","c_ref_year" ) values
    ( "old_name"."c_prefix","old_name"."n_srno","old_name"."d_inv_date","old_name"."c_cust_code","old_name"."n_total","old_name"."n_order_no","old_name"."c_year" ) ;
  --Delete from Storetrack 	
  delete from "st_track_mst"
    where "st_track_mst"."c_doc_no" = ('000/'+"string"("old_name"."c_year")+'/'+"string"("old_name"."c_prefix")+'/'+"string"("old_name"."n_srno"));
  delete from "settle_mst"
    where "settle_mst"."c_year" = "old_name"."c_year"
    and "settle_mst"."c_prefix" = "old_name"."c_prefix"
    and "settle_mst"."n_srno" = "old_name"."n_srno"
    and "settle_mst"."c_year1" = "old_name"."c_year"
    and "settle_mst"."c_prefix1" = "old_name"."c_prefix"
    and "settle_mst"."n_srno1" = "old_name"."n_srno";
  delete from "purchase_mst_dbnt_settle_det"
    where "purchase_mst_dbnt_settle_det"."c_prefix" = "old_name"."c_prefix"
    and "purchase_mst_dbnt_settle_det"."n_srno" = "old_name"."n_srno"
    and "purchase_mst_dbnt_settle_det"."c_year" = "old_name"."c_year";
  call "usp_check_update_last_tran_info"(1,"old_name"."c_cust_code",11,"old_name"."c_prefix","old_name"."n_srno","old_name"."d_inv_date")
end;
CREATE TRIGGER "delete_ledger_from_st_track_mst_delete" before delete order 2 on
------------------------------------st_track_mst delete ---------------
"DBA"."st_track_mst"
referencing old as "old_name"
for each row
begin
  declare "ls_prefix" char(6);
  declare "ls_doc_no" char(15);
  declare "s_br_code" char(6);
  declare "s_year" char(2);
  declare "s_prefix" char(4);
  declare "d_srno" numeric(18);
  declare "pos" integer;
  declare "str" char(50);
  declare @br_code char(6);
  set "str" = "old_name"."c_doc_no";
  set "pos" = "charindex"('/',"str");
  set "s_br_code" = "left"("str","pos"-1);
  set "str" = "substring"("str","pos"+1);
  set "pos" = "charindex"('/',"str");
  set "s_year" = "left"("str","pos"-1);
  set "str" = "substring"("str","pos"+1);
  set "pos" = "charindex"('/',"str");
  set "s_prefix" = "left"("str","pos"-1);
  set "d_srno" = "substring"("str","pos"+1);
  set @br_code = "uf_get_br_code"("s_br_code");
  delete from "st_track_det" where "st_track_det"."c_doc_no" = "old_name"."c_doc_no" and "st_track_det"."n_inout" = "old_name"."n_inout";
  delete from "st_track_pick" where "st_track_pick"."c_doc_no" = "old_name"."c_doc_no" and "st_track_pick"."n_inout" = "old_name"."n_inout";
  set "ls_doc_no" = "old_name"."c_doc_no";
  select "left"("right"("ls_doc_no","length"("ls_doc_no")-7),"locate"("right"("ls_doc_no","length"("ls_doc_no")-7),'/')-1) as "c_prefix"
    into "ls_prefix";
  set "ls_prefix" = "left"("ls_prefix",1);
  case "ls_prefix"
  when 'I' then
    update "invoice_mst" set "n_store_track" = 0
      where("invoice_mst"."c_prefix" = "s_prefix")
      and("invoice_mst"."n_srno" = "d_srno");
    update "invoice_det" set "n_store_track" = 0
      where("invoice_det"."n_srno" = "d_srno")
  end case
end;
CREATE TRIGGER "Delete_Ledger_From_Supplier_Payment" before delete order 1
on "DBA".supp_pay
referencing old as old_name
for each row
begin
  delete from ledger where ledger.c_prefix=old_name.c_prefix
    and ledger.n_tran_no=old_name.n_srno;
  delete from remarks where remarks.c_prefix=old_name.c_prefix
    and remarks.n_tran_id=old_name.n_srno
end;
COMMENT ON TRIGGER "DBA"."supp_pay"."Delete_Ledger_From_Supplier_Payment" IS 'Delete all ledger entry if supplier payment is deleted';
CREATE TRIGGER "delete_ledger_when_credit_note_is_deleted" before delete order 2 on
-------------------------
--crnt update end
--crnt delete start
"DBA"."crnt_mst"
referencing old as "old_name"
for each row
begin
  declare @c_year_old char(2);
  declare @doc_date_old date;
  delete from "settle_mst_header"
    where "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_year" = "old_name"."c_year";
  //deliting invoice entry   
  delete from "settle_mst"
    where "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_year" = "old_name"."c_year"
    and "c_prefix1" = "old_name"."c_prefix"
    and "n_srno1" = "old_name"."n_srno"
    and "c_year1" = "old_name"."c_year";
  delete from "invoice_print" where "invoice_print"."c_prefix" = "old_name"."c_prefix"
    and "invoice_print"."n_srno" = "old_name"."n_srno";
  insert into "deleted_mst"( "c_prefix","n_srno","d_date","c_code","n_amount","c_remark" ) values
    ( "old_name"."c_prefix","old_name"."n_srno","old_name"."d_crnt_date","old_name"."c_cust_code","old_name"."n_total","old_name"."c_remark" ) ;
  call "usp_check_update_last_tran_info"(1,"old_name"."c_cust_code",5,"old_name"."c_prefix","old_name"."n_srno","old_name"."d_crnt_date");
  if "old_name"."n_post" <> 1 then
    return
  end if;
  delete from "remarks"
    where "remarks"."c_prefix" = "old_name"."c_prefix"
    and "remarks"."n_tran_id" = "old_name"."n_srno";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno";
  delete from "gst_ledger_mst" where "gst_ledger_mst"."n_srno" = "old_name"."n_srno";
  update "crnt_repl_mst" set "n_ref_srno" = 0,"c_ref_prefix" = null
    where "n_ref_srno" = "old_name"."n_srno" and "c_ref_prefix" = "old_name"."c_prefix";
  update "crnt_tmp_mst" set "n_inv_recp_no" = 0,"c_inv_recp_prefix" = null
    where "n_inv_recp_no" = "old_name"."n_srno" and "c_inv_recp_prefix" = "old_name"."c_prefix";
  set @c_year_old = "old_name"."c_year";
  set @doc_date_old = "old_name"."d_crnt_date";
  if @c_year_old is null then
    if "month"(@doc_date_old) <= 3 then
      set @c_year_old = "right"("string"("year"(@doc_date_old)-1),2)
    else
      set @c_year_old = "right"("string"("year"(@doc_date_old)),2)
    end if
  end if
end;
CREATE TRIGGER "delete_ledger_when_credit_tmp_note_is_deleted" before delete order 2 on
-------------------------
--crnt update end
--crnt delete start
"DBA"."crnt_tmp_mst"
referencing old as "old_name"
for each row
begin
  if "old_name"."n_inv_recp_no" > 0 and "old_name"."c_inv_recp_prefix" = 'CC' then //replacement
    update "crnt_repl_mst" set "c_crnt_prefix" = null,"n_crnt_no" = 0
      where "n_srno" = "old_name"."n_inv_recp_no" and "c_prefix" = "old_name"."c_inv_recp_prefix"
  end if;
  call "usp_check_update_last_tran_info"(1,"old_name"."c_cust_code",6,"old_name"."c_prefix","old_name"."n_srno","old_name"."d_crnt_tmp_date")
end;
CREATE TRIGGER "delete_ledger_when_rtn_purchase_deleted" before delete order 2 on
----------------------------------------------
--crnt update end
--crnt delete start
"DBA"."rtn_purchase_mst"
referencing old as "old_name"
for each row
begin
  insert into "deleted_mst"( "c_prefix","n_srno","d_date","c_code","n_amount","c_remark" ) values
    ( "old_name"."c_prefix","old_name"."n_srno","old_name"."d_purchase_date","old_name"."c_supp_code","old_name"."n_total","old_name"."c_purchase_bill_no" ) ;
  delete from "settle_mst_header"
    where "n_srno" = "old_name"."n_srno"
    and "c_prefix" = "old_name"."c_prefix"
    and "c_year" = "old_name"."c_year"
end;
CREATE TRIGGER "delete_licence_info_act_mst" before delete order 1 on
-----------------------
--inv update End
--inv Delete Start
"DBA"."act_mst"
referencing old as "old_name"
for each row
begin
  delete from "act_license_det" where "c_act_code" = "old_name"."c_code"
end;
CREATE TRIGGER "delete_reset_det_update_stock" before delete order 1
on "DBA".reset_det
referencing old as old_name
for each row
begin
  update stock set n_reset_qty=n_reset_qty-old_name.n_reset_qty,n_sch_bal_qty=n_sch_bal_qty-old_name.n_reset_qty where stock.c_item_code=old_name.c_item_code and stock.c_batch_no=old_name.c_batch_no
end;
CREATE TRIGGER "delete_settle_mst_from_cust_afdvance" before delete order 2 on
-------------------------
--crnt update end
--crnt delete start
"DBA"."cust_advance"
referencing old as "old_name"
for each row
begin
  declare @new_c_year,@old_c_year char(2);
  if "length"("old_name"."n_srno") > 9 then
    set @old_c_year = "uf_get_pk_component"("old_name"."n_srno",1)
  else
    if "month"("old_name"."d_adv_date") <= 3 then
      set @old_c_year = "right"("string"("year"("old_name"."d_adv_date")-1),2)
    else
      set @old_c_year = "right"("string"("year"("old_name"."d_adv_date")),2)
    end if end if;
  delete from "settle_mst"
    where "c_year" = @old_c_year
    and "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_year1" = @old_c_year
    and "c_prefix1" = "old_name"."c_prefix"
    and "n_srno1" = "old_name"."n_srno"
end;
CREATE TRIGGER "delete_settle_mst_from_mdadj_adv_mst" before delete order 2 on
-------------------------
--crnt update end
--crnt delete start
"DBA"."mdadj_adv_mst"
referencing old as "old_name"
for each row
begin
  delete from "settle_mst_header"
    where "n_srno" = "old_name"."n_srno"
    and "c_prefix" = "old_name"."c_prefix"
    and "c_year" = "old_name"."c_year";
  delete from "settle_mst"
    where "n_srno" = "old_name"."n_srno"
    and "c_prefix" = "old_name"."c_prefix"
    and "c_year" = "old_name"."c_year"
    and "n_srno1" = "old_name"."n_srno"
    and "c_prefix1" = "old_name"."c_prefix"
    and "c_year1" = "old_name"."c_year"
end;
CREATE TRIGGER "delete_settle_mst_from_mdadj_dbnt_mst" before delete order 2 on
-------------------------
--crnt update end
--crnt delete start
"DBA"."mdadj_dbnt_mst"
referencing old as "old_name"
for each row
begin
  delete from "settle_mst_header"
    where "n_srno" = "old_name"."n_srno"
    and "c_prefix" = "old_name"."c_prefix"
    and "c_year" = "old_name"."c_year";
  delete from "settle_mst"
    where "n_srno" = "old_name"."n_srno"
    and "c_prefix" = "old_name"."c_prefix"
    and "c_year" = "old_name"."c_year"
    and "n_srno1" = "old_name"."n_srno"
    and "c_prefix1" = "old_name"."c_prefix"
    and "c_year1" = "old_name"."c_year"
end;
CREATE TRIGGER "delete_settle_mst_from_mdadj_mst" before delete order 2 on
-------------------------
--crnt update end
--crnt delete start
"DBA"."mdadj_mst"
referencing old as "old_name"
for each row
begin
  delete from "settle_mst_header"
    where "n_srno" = "old_name"."n_srno"
    and "c_prefix" = "old_name"."c_prefix"
    and "c_year" = "old_name"."c_year";
  delete from "settle_mst"
    where "n_srno" = "old_name"."n_srno"
    and "c_prefix" = "old_name"."c_prefix"
    and "c_year" = "old_name"."c_year"
    and "n_srno1" = "old_name"."n_srno"
    and "c_prefix1" = "old_name"."c_prefix"
    and "c_year1" = "old_name"."c_year"
end;
CREATE TRIGGER "Delete_Update_Purchase_Bal_Amount" before delete order 1
on "DBA".supp_pay_det
referencing old as old_name
for each row
begin
  update purchase_mst set
    purchase_mst.n_purchase_balance_amt
    =purchase_mst.n_purchase_balance_amt+old_name.n_amount
    where purchase_mst.c_prefix=old_name.c_prefix
    and purchase_mst.n_srno=old_name.n_purchase_no
end;
COMMENT ON TRIGGER "DBA"."supp_pay_det"."Delete_Update_Purchase_Bal_Amount" IS 'Update purchase balance amount if supplier payment is deleted.';
CREATE TRIGGER "delete_update_transporter_balance_amt" after delete order 3 on
"DBA"."transporter_payment_det"
referencing old as "old_name"
for each row
begin
  update "transporter_payment_ledger" set "transporter_payment_ledger"."n_bal_amount"
     = "transporter_payment_ledger"."n_bal_amount"+"old_name"."n_amount"-"old_name"."n_return_amount"
    where "transporter_payment_ledger"."n_doc_no" = "old_name"."n_invoice_no"
end;
CREATE TRIGGER "insert_act_mst_dbnt_settle_det_into_dbnt_settle_mst_delete" after delete order 3
on "DBA".act_mst_dbnt_settle_det
referencing old as old_name
for each row
begin
  delete from dbnt_settle_mst where 
    dbnt_settle_mst.c_year = old_name.c_year and 
    dbnt_settle_mst.c_prefix = old_name.c_prefix and 
    dbnt_settle_mst.n_srno = old_name.n_srno and 
    dbnt_settle_mst.c_year1 = old_name.c_dbnt_year and 
    dbnt_settle_mst.c_prefix1 = old_name.c_dbnt_prefix and 
    dbnt_settle_mst.n_srno1 = old_name.n_dbnt_srno and 
    dbnt_settle_mst.c_supp_code = old_name.c_supp_code and
    dbnt_settle_mst.c_reason_code = old_name.c_reason_code and 
    dbnt_settle_mst.c_ref_no= old_name.c_ref_no;
end;
CREATE TRIGGER "insert_act_mst_dbnt_settle_det_into_dbnt_settle_mst_insert" after insert order 1
on "DBA".act_mst_dbnt_settle_det
referencing new as new_name
for each row
begin
declare s_mfac_code char(6) ;
IF new_name.c_mfac_code is null then    
    select top 1 c_mfac_code  into s_mfac_code  from  dbnt_settle_mst  where dbnt_settle_mst.c_prefix=dbnt_settle_mst.c_prefix1 and 
                                                        dbnt_settle_mst.n_srno=dbnt_settle_mst.n_srno1 and 
                                                        dbnt_settle_mst.c_year=dbnt_settle_mst.c_year1 and 
                                                        dbnt_settle_mst.n_srno=new_name.n_dbnt_srno and 
                                                        dbnt_settle_mst.c_prefix=new_name.c_dbnt_prefix and 
                                                        dbnt_settle_mst.c_year=new_name.c_dbnt_year;
Else
    set s_mfac_code =new_name.c_mfac_code;
End if;

  insert into dbnt_settle_mst(c_year,c_prefix,n_srno,c_year1,c_prefix1,
    n_srno1,n_amount,c_supp_code,d_date,d_due_date,c_remark,c_ref_no,d_ref_dt,c_reason_code,c_mfac_code) values(new_name.c_year,
    new_name.c_prefix,new_name.n_srno,new_name.c_dbnt_year,new_name.c_dbnt_prefix,new_name.n_dbnt_srno,
    -1 * (new_name.n_settle_amt+new_name.n_adj_amt),new_name.c_supp_code,new_name.d_date,new_name.d_date, new_name.c_settle_remark,new_name.c_ref_no,new_name.d_ref_dt,new_name.c_reason_code, s_mfac_code);
end;
CREATE TRIGGER "insert_act_mst_dbnt_settle_det_into_dbnt_settle_mst_update" after UPDATE order 1
on "DBA".act_mst_dbnt_settle_det
referencing old as old_name new as new_name
for each row
begin
declare s_mfac_code char(6) ;
  delete from dbnt_settle_mst where 
    dbnt_settle_mst.c_year = old_name.c_year and 
    dbnt_settle_mst.c_prefix = old_name.c_prefix and 
    dbnt_settle_mst.n_srno = old_name.n_srno and 
    dbnt_settle_mst.c_year1 = old_name.c_dbnt_year and 
    dbnt_settle_mst.c_prefix1 = old_name.c_dbnt_prefix and 
    dbnt_settle_mst.n_srno1 = old_name.n_dbnt_srno and 
    dbnt_settle_mst.c_supp_code = old_name.c_supp_code and
    dbnt_settle_mst.c_reason_code = old_name.c_reason_code and
    dbnt_settle_mst.c_ref_no= old_name.c_ref_no;


IF new_name.c_mfac_code is null then    
   select top 1 c_mfac_code  into s_mfac_code  from  dbnt_settle_mst  where dbnt_settle_mst.c_prefix=dbnt_settle_mst.c_prefix1 and 
                                                        dbnt_settle_mst.n_srno=dbnt_settle_mst.n_srno1 and 
                                                        dbnt_settle_mst.c_year=dbnt_settle_mst.c_year1 and 
                                                        dbnt_settle_mst.n_srno=new_name.n_dbnt_srno and 
                                                        dbnt_settle_mst.c_prefix=new_name.c_dbnt_prefix and 
                                                        dbnt_settle_mst.c_year=new_name.c_dbnt_year
Else
    set s_mfac_code =new_name.c_mfac_code;
End if;
  insert into dbnt_settle_mst(c_year,c_prefix,n_srno,c_year1,c_prefix1,
    n_srno1,n_amount,c_supp_code,d_date,d_due_date,c_remark,c_ref_no,d_ref_dt,c_reason_code,c_mfac_code) values(new_name.c_year,
    new_name.c_prefix,new_name.n_srno,new_name.c_dbnt_year,new_name.c_dbnt_prefix,new_name.n_dbnt_srno,
    -1 * (new_name.n_settle_amt+new_name.n_adj_amt),new_name.c_supp_code,new_name.d_date,new_name.d_date, new_name.c_settle_remark,new_name.c_ref_no,new_name.d_ref_dt,new_name.c_reason_code,s_mfac_code);
end;
CREATE TRIGGER "insert_cash_coll_shift_mst" after insert order 1 on
"DBA"."cash_coll_shift_mst"
referencing new as "new_name"
for each row
begin
  if "new_name"."n_shift_open" = 0 then
    update "cash_verif_shift_mst"
      set "n_open" = 0,"c_luser" = "new_name"."c_user","d_ltime" = "new_name"."t_time"
      where "n_srno" = "new_name"."n_srno"
      and "c_prefix" = "new_name"."c_prefix"
      and "c_user" = "new_name"."c_user"
      and "d_date" = "new_name"."d_date"
  end if
end;
CREATE TRIGGER "insert_coll_veification_dispatch" after insert order 1 on
"DBA"."coll_list_cash_cheque"
referencing new as "new_name"
for each row
begin
  declare "c_dispatch_code" char(6);
  select "c_dispatch_stage_code" into "c_dispatch_code" from "system_parameter";
  if "new_name"."n_dispatch" = 1 then
    insert into "doc_track"( "c_stage_code","c_inv_prefix","n_inv_no","c_dman_code","c_user" ) values
      ( "c_dispatch_code","new_name"."c_prefix","new_name"."n_srno","new_name"."c_dman_code","new_name"."c_dispatch_user" ) 
  end if
end;
CREATE TRIGGER "insert_dbnt_settle_open_tran_into_dbnt_settle_mst_delete" after delete order 3
on "DBA".dbnt_settle_open_tran
referencing old as old_name
for each row
begin
  delete from dbnt_settle_mst where 
    dbnt_settle_mst.c_year = old_name.c_year and 
    dbnt_settle_mst.c_prefix = old_name.c_prefix and 
    dbnt_settle_mst.n_srno = old_name.n_srno and 
    dbnt_settle_mst.c_year1 = old_name.c_year and 
    dbnt_settle_mst.c_prefix1 = old_name.c_prefix and 
    dbnt_settle_mst.n_srno1 = old_name.n_srno and 
    dbnt_settle_mst.c_supp_code = old_name.c_supp_code and 
    dbnt_settle_mst.c_reason_code = old_name.c_reason_code and
    dbnt_settle_mst.c_ref_no = old_name.c_ref_no ;
end;
CREATE TRIGGER "insert_dbnt_settle_open_tran_into_dbnt_settle_mst_insert" after insert order 1
on "DBA".dbnt_settle_open_tran
referencing new as new_name
for each row
begin
insert into dbnt_settle_mst(c_year,c_prefix,n_srno,c_year1,c_prefix1,
n_srno1,n_amount,c_supp_code,d_date,d_due_date,c_ref_no, c_remark,d_ref_dt,c_reason_code,new_name.c_mfac_code) values(new_name.c_year,
new_name.c_prefix,new_name.n_srno,new_name.c_year,new_name.c_prefix,new_name.n_srno,
new_name.n_amount,new_name.c_supp_code,new_name.d_date,new_name.d_due_date, new_name.c_ref_no, new_name.c_remark,new_name.d_ref_dt,new_name.c_reason_code,new_name.c_mfac_code);
end;
CREATE TRIGGER "insert_dbnt_settle_open_tran_into_dbnt_settle_mst_update" after UPDATE order 1
on "DBA".dbnt_settle_open_tran
referencing old as old_name new as new_name
for each row
begin
  delete from dbnt_settle_mst where 
    dbnt_settle_mst.c_year = old_name.c_year and 
    dbnt_settle_mst.c_prefix = old_name.c_prefix and 
    dbnt_settle_mst.n_srno = old_name.n_srno and 
    dbnt_settle_mst.c_year1 = old_name.c_year and 
    dbnt_settle_mst.c_prefix1 = old_name.c_prefix and 
    dbnt_settle_mst.n_srno1 = old_name.n_srno and 
    dbnt_settle_mst.c_supp_code = old_name.c_supp_code and
    dbnt_settle_mst.c_reason_code = old_name.c_reason_code and
    dbnt_settle_mst.c_ref_no = old_name.c_ref_no ;

  insert into dbnt_settle_mst(c_year,c_prefix,n_srno,c_year1,c_prefix1,
    n_srno1,n_amount,c_supp_code,d_date,d_due_date,c_ref_no, c_remark,d_ref_dt,c_reason_code,c_mfac_code) values(new_name.c_year,
    new_name.c_prefix,new_name.n_srno,new_name.c_year,new_name.c_prefix,new_name.n_srno,
    new_name.n_amount,new_name.c_supp_code,new_name.d_date,new_name.d_due_date, new_name.c_ref_no, new_name.c_remark,new_name.d_ref_dt,new_name.c_reason_code,new_name.c_mfac_code);
end;
CREATE TRIGGER "insert_from_crnt_repl_mst" after insert order 1 on
"DBA"."crnt_repl_mst"
referencing new as "new_name"
for each row
begin
  declare @settle_mst_insert numeric(1);
  declare @c_year_new char(2);
  declare @doc_date_new date;
  insert into "invoice_print"( "c_prefix","n_srno","n_print" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",0 ) ;
  call "usp_check_update_last_tran_info"(0,"new_name"."c_cust_code",7,"new_name"."c_prefix","new_name"."n_srno","new_name"."d_crnt_repl_date");
  set @c_year_new = "new_name"."c_year";
  set @doc_date_new = "new_name"."d_crnt_repl_date";
  if @c_year_new is null then
    if "length"("new_name"."n_srno") > 9 then
      set @c_year_new = "uf_get_pk_component"("new_name"."n_srno",1)
    else
      if "month"(@doc_date_new) <= 3 then
        set @c_year_new = "right"("string"("year"(@doc_date_new)-1),2)
      else
        set @c_year_new = "right"("string"("year"(@doc_date_new)),2)
      end if end if end if;
  if "new_name"."n_yearend_flag" = 0 then
    insert into "settle_mst_header"
      ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
      "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
      "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
      "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
      "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
      "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
      "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."d_crnt_repl_date","new_name"."c_cust_code","new_name"."c_sman_code",null,0,"new_name"."n_discount_per",0,0,"new_name"."n_total",
      0,"new_name"."n_tot_sch_disc",0,null,0,0,null,0,0,null,0,0,null,"new_name"."n_credit_per",0,"new_name"."n_discount",0,0,0,0,
      null,"new_name"."n_prod_val",0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,0,"new_name"."n_approved",null,null,
      0,null,null,null,0,0,"new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no","new_name"."n_cgst_amt","new_name"."n_sgst_amt",
      "new_name".
      "n_igst_amt","new_name"."n_gst_cess_amt","new_name"."c_state_code","new_name"."c_eway_bill_no","new_name"."d_eway_date","new_name"."n_to_gst_type",0,"new_name"."n_taxable_amt",null,null,0,
      "new_name"."c_remark","new_name"."n_settle_days","new_name"."c_debit_act","new_name"."n_Post",9,"new_name"."n_counter_ret","new_name"."n_treat_vat","new_name"."c_post_user",null,8 ) ;
    if "new_name"."n_post" = 1 then
      insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
        "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( @c_year_new,
        "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."c_prefix","new_name"."n_srno",
        -1*("new_name"."n_total"),"new_name"."c_cust_code","new_name"."d_crnt_repl_date","new_name"."d_crnt_repl_date",1 ) 
    end if end if;
  if "new_name"."n_crnt_no" > 0 and "new_name"."c_crnt_prefix" = 'TC' then
    update "crnt_tmp_mst" set "n_inv_recp_no" = "new_name"."n_srno","c_inv_recp_prefix" = "new_name"."c_prefix" where "n_srno" = "new_name"."n_crnt_no" and "c_prefix" = "new_name"."c_crnt_prefix"
  end if
end;
CREATE TRIGGER "insert_from_dc_mst" after insert order 1 on
"DBA"."dc_mst"
referencing new as "new_name"
for each row
begin
  declare "c_phase" char(10);
  declare @brcode char(6);
  declare @chk_exist numeric(1);
  select "c_br_code" into @brcode from "System_Parameter";
  insert into "invoice_print"( "c_prefix","n_srno","n_print","c_user" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",0,"new_name"."c_user" ) ;
  if "new_name"."n_order_no" <> 0 then
    update "ord_mst" set "ord_mst"."n_invno" = "new_name"."n_srno"
      where "ord_mst"."n_srno" = "new_name"."n_order_no";
    insert into "dc_mst_det"( "c_prefix","n_srno","c_tmp_name","c_tmp_add_1","c_tmp_add_2","c_tmp_add_3","c_tmp_city","c_tmp_pin","c_tmp_drug_licence_no_1","c_tmp_drug_licence_no_2","c_tmp_st_no","c_tmp_remark","c_tmp_other_info","c_lr_no","d_lr_dt","c_form_no","n_recd","c_case_no","n_cases","n_pob","c_pob_rep","c_pob_mfac_code","c_pob_rep_code" ) on existing skip(
      select "new_name"."c_prefix","new_name"."n_srno","c_tmp_name","c_tmp_add_1","c_tmp_add_2","c_tmp_add_3","c_tmp_city","c_tmp_pin","c_tmp_drug_licence_no_1","c_tmp_drug_licence_no_2","c_tmp_st_no","c_tmp_remark","c_tmp_other_info","c_lr_no","d_lr_dt","c_form_no","n_recd","c_case_no","n_cases","n_pob","c_pob_rep","c_pob_mfac_code","c_pob_rep_code" from "ord_mst_det" where "n_srno" = "new_name"."n_order_no" and "c_prefix" = 'S')
  end if;
  if "new_name"."n_store_track" = 2 and "new_name"."n_approve" = 1 then
    select top 1 "c_code" into "c_phase" from "st_phase_mst" where "n_rack_flag" = 1;
    insert into "st_track_mst"
      ( "c_br_code",
      "c_doc_no",
      "n_inout","c_phase_code","d_date",
      "c_user","c_system_name","c_system_ip","t_time_in","t_time_out",
      "n_complete","c_cust_code","c_order_id","n_urgent" ) values
      ( @brcode,
      @brcode+'/'+"string"("new_name"."c_year")+'/'+"string"("new_name"."c_prefix")+'/'+"string"("new_name"."n_srno"),
      0,"c_phase","new_name"."d_dc_date",
      "isNull"("new_name"."c_user",'3DS'),null,null,"new_name"."t_ltime",null,
      0,"new_name"."c_cust_code",null,0 ) 
  end if;
  insert into "tran_no_print_from_ordinv"( "n_srno","n_type","d_date" ) on existing update defaults off values( "new_name"."n_srno",2,"new_name"."d_dc_date" ) ;
  call "usp_check_update_last_tran_info"(0,"new_name"."c_cust_code",2,"new_name"."c_prefix","new_name"."n_srno","new_name"."d_dc_date");
  select "count"() into @chk_exist from "sale_till_date" where "c_code" = "new_name"."c_cust_code";
  if @chk_exist is null then
    set @chk_exist = 0
  end if;
  if @chk_exist > 0 then
    update "sale_till_date" set "n_value_dc_sale" = "n_value_dc_sale"+"new_name"."n_total" where "c_code" = "new_name"."c_cust_code"
  else
    insert into "sale_till_date"( "c_code","n_value_dc_sale" ) values( "new_name"."c_cust_code","new_name"."n_total" ) 
  end if;
  if "new_name"."c_to_gst_no" is not null then
    select "count"() into @chk_exist from "gstin_wise_sale_total" where "c_code" = "new_name"."c_to_gst_no";
    if @chk_exist > 0 then
      update "gstin_wise_sale_total" set "n_value_dc_sale" = "n_value_dc_sale"+"new_name"."n_total" where "c_code" = "new_name"."c_to_gst_no"
    else
      insert into "gstin_wise_sale_total"( "c_code","n_value_dc_sale" ) values( "new_name"."c_to_gst_no","new_name"."n_total" ) 
    end if
  end if
end;
CREATE TRIGGER "insert_from_store_mst" after insert order 1 on
"DBA"."store_mst"
referencing new as "new_name"
for each row
begin
  if "new_name"."c_code" = '-' then
    raiserror 18000 "You cannot insert '-' in store master"
  end if
end;
CREATE TRIGGER "insert_gatepassno_into_dbnt_mst" after insert order 1 on
"DBA"."gate_pass_dbnt_issue"
referencing new as "new_name"
for each row
begin
  declare "n_gatepass_srno" numeric(6);
  update "dbnt_mst" set "dbnt_mst"."c_gate_pass_prefix" = "new_name"."c_prefix",
    "dbnt_mst"."n_gate_pass_srno" = "new_name"."n_srno",
    "dbnt_mst"."t_sent_dtime" = "now"()
    where "dbnt_mst"."c_prefix" = "new_name"."c_dbnt_prefix" and "dbnt_mst"."n_srno" = "new_name"."n_dbnt_srno"
end;
CREATE TRIGGER "insert_goods_rec_ledger_from_goods_rec_det_insert"
-----------------------------------------------
 before insert order 1 on
--Insert trigger for goods_rec_det
"DBA"."goods_rec_det"
referencing new as "new_name"
for each row
begin
  if "new_name"."n_post" = 1 then
    insert into "goods_rec_ledger"( "n_srno","n_seq","c_supp_code","c_item_code","c_batch_no","d_exp_dt","n_qty","n_mrp","n_cancel_flag","d_ldate","t_ltime","n_gate_pass_no" ) values
      ( "new_name"."n_srno","new_name"."n_seq","new_name"."c_supp_code","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_exp_dt","new_name"."n_qty","new_name"."n_mrp","new_name"."n_cancel_flag","new_name"."d_ldate","new_name"."t_ltime","new_name"."n_gate_pass_no" ) 
  end if
end;
CREATE TRIGGER "Insert_gst_service_log_flag" before insert order 1 on
-------------------------------------------------Trigger insert
-----------------------insert
----------------------------------------------------
----------------------payment
------------------payment insert
--------------payment mst insert
--------------payment mst insert
---------------payment insert
"DBA"."gst_service_log"
referencing new as "new_name"
for each row
begin
  case "left"("new_name"."c_prefix",1)
  when 'I' then
    update "invoice_mst" set "n_stop_trigger" = "n_stop_trigger"+1,"n_einv" = 1 where "n_srno" = "new_name"."n_srno" and "c_prefix" = "new_name"."c_prefix"
  when 'CR' then
    update "crnt_mst" set "n_stop_trigger" = "n_stop_trigger"+1,"n_einv" = 1 where "n_srno" = "new_name"."n_srno" and "c_prefix" = "new_name"."c_prefix"
  when 'RI' then
    update "rtn_invoice_mst" set "n_stop_trigger" = "n_stop_trigger"+1,"n_einv" = 1 where "n_srno" = "new_name"."n_srno" and "c_prefix" = "new_name"."c_prefix"
  end case
end;
CREATE TRIGGER "insert_into_dc_mst_det" after insert order 1 on
"DBA"."dc_mst_det"
referencing new as "new_name"
for each row
begin
  declare @trasp_code char(6);
  declare @defa_date date;
  return;
  set @trasp_code = "new_name"."c_trans_code";
  set @defa_date = "uf_default_date"();
  if "new_name"."n_transport_charges" > 0 and @trasp_code is not null then
    insert into "transporter_payment_ledger"( "c_code","n_doc_no","c_doc_no","d_date","n_amount","n_bal_amount","c_lr_no","d_lr_date","c_vehicle_no","c_case_no","n_cases" ) values
      ( "new_name"."c_trans_code","new_name"."n_srno",'-',@defa_date,"new_name"."n_transport_charges","new_name"."n_transport_charges","new_name"."c_lr_no","new_name"."d_lr_dt","new_name"."c_vehicle_no","new_name"."c_case_no","new_name"."n_cases" ) 
  end if
end;
CREATE TRIGGER "insert_into_invoice_mst_det" after insert order 1 on
"DBA"."invoice_mst_det"
referencing new as "new_name"
for each row
begin
  declare @trasp_code char(6);
  declare @defa_date date;
  return;
  set @trasp_code = "new_name"."c_trans_code";
  set @defa_date = "uf_default_date"();
  if "new_name"."n_transport_charges" > 0 and @trasp_code is not null then
    insert into "transporter_payment_ledger"( "c_code","n_doc_no","c_doc_no","d_date","n_amount","n_bal_amount","c_lr_no","d_lr_date","c_vehicle_no","c_case_no","n_cases" ) values
      ( "new_name"."c_trans_code","new_name"."n_srno",'-',@defa_date,"new_name"."n_transport_charges","new_name"."n_transport_charges","new_name"."c_lr_no","new_name"."d_lr_dt","new_name"."c_vehicle_no","new_name"."c_case_no","new_name"."n_cases" ) 
  end if
end;
CREATE TRIGGER "insert_into_ord_det_from_order" after insert order 1 on
"DBA"."ord_det"
referencing new as "new_name"
for each row
begin
  declare "d_count" decimal(8);
  if "NEW_name"."n_block_stock" = 1 and "NEW_name"."n_stock_gone_zero" = 0 and "NEW_name"."n_hold_pending" = 0 then
    select "count"() into "d_count" from "item_stock_block" where "item_stock_block"."c_item_code" = "new_name"."c_item_code";
    if "d_count" > 0 then
      update "item_stock_block"
        set "n_qty" = "n_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty",
        "d_ldate" = "today"(),
        "t_ltime" = "now"()
        where "c_item_code" = "new_name"."c_item_code"
    else
      insert into "item_stock_block"( "c_item_code","n_qty","d_ldate","t_ltime" ) values
        ( "new_name"."c_item_code",("new_name"."n_qty"+"new_name"."n_scheme_qty"),"today"(),"now"() ) 
    end if;
    if("new_name"."n_qty_actual"-("new_name"."n_qty")) > 0 then
      insert into "lost_order_master"( "c_item_code",
        "d_date",
        "n_qty",
        "c_ord_year",
        "c_ord_prefix",
        "n_ord_srno",
        "c_reason_code",
        "n_block_stock" ) on existing skip values
        ( "new_name"."c_item_code","uf_default_date"(),"new_name"."n_qty_actual"-("new_name"."n_qty"),"new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",'R08001',"new_name"."n_block_stock" ) 
    end if end if;
  if "NEW_name"."n_block_stock" = 1 and "NEW_name"."n_stock_gone_zero" = 1 then
    insert into "lost_order_master"( "c_item_code",
      "d_date",
      "n_qty",
      "c_ord_year",
      "c_ord_prefix",
      "n_ord_srno",
      "c_reason_code",
      "n_block_stock" ) on existing skip values
      ( "new_name"."c_item_code","uf_default_date"(),"new_name"."n_qty","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",'R08001',"new_name"."n_block_stock" ) 
  end if
end;
CREATE TRIGGER "insert_into_order_ledger_from_order_det_delete" before delete order 1 on
"DBA"."order_det"
referencing old as "old_name"
for each row
begin
  declare "s_yr" char(2);
  if "old_name"."c_year" is null or "trim"("old_name"."c_year") = '' then
    select "right"("string"("year"("d_ac_year_st_date")),2) into "s_yr" from "system_parameter"
  else
    set "s_yr" = "old_name"."c_year"
  end if;
  update "order_ledger"
    set "n_o1" = "n_o1"-"old_name"."n_o1",
    "n_o2" = "n_o2"-"old_name"."n_o2",
    "n_o3" = "n_o3"-"old_name"."n_o3",
    "n_o4" = "n_o4"-"old_name"."n_o4"
    where "order_ledger"."c_year" = "s_yr"
    and "order_ledger"."n_srno" = "old_name"."n_srno"
    and "order_ledger"."n_seq" = "old_name"."n_seq";
  if "old_name"."n_sales_ord_no" > 0 then
    update "lost_order_master_summary" set "n_inv_no" = 0 where "c_item_code" = "old_name"."c_item_code" and "n_seq" = "old_name"."n_sales_ord_no"
  end if
end;
CREATE TRIGGER "insert_into_order_ledger_from_order_det_insert" after insert order 1 on
"DBA"."order_det"
referencing new as "new_name"
for each row
begin
  declare "d_count" decimal(8);
  declare "s_supp_code" char(6);
  declare "dt_split1" date;
  declare "dt_split2" date;
  declare "dt_split3" date;
  declare "dt_split4" date;
  declare "s_yr" char(2);
  if "new_name"."c_supp_code" is null or "trim"("new_name"."c_supp_code") = '' then
    select "c_supp_code","d_split1","d_split2","d_split3","d_split4" into "s_supp_code","dt_split1","dt_split2","dt_split3","dt_split4" from "order_mst" where "order_mst"."c_prefix" = 'OR' and "order_mst"."n_srno" = "new_name"."n_srno";
    if "s_supp_code" is null or "trim"("s_supp_code") = '' then
      select "c_supp_code","uf_default_date"(),"uf_default_date"(),"uf_default_date"(),"uf_default_date"() into "s_supp_code","dt_split1","dt_split2","dt_split3","dt_split4" from "item_mst" where "item_mst"."c_code" = "new_name"."c_item_code"
    end if
  else set "s_supp_code" = "new_name"."c_supp_code";
    set "dt_split1" = "new_name"."d_split1";
    set "dt_split2" = "new_name"."d_split2";
    set "dt_split3" = "new_name"."d_split3";
    set "dt_split4" = "new_name"."d_split4"
  end if;
  if "new_name"."c_year" is null or "trim"("new_name"."c_year") = '' then
    select "right"("string"("year"("d_ac_year_st_date")),2) into "s_yr" from "system_parameter"
  else
    set "s_yr" = "new_name"."c_year"
  end if;
  select "count"("n_seq") into "d_count" from "order_ledger" where "order_ledger"."c_year" = "s_yr" and "order_ledger"."n_srno" = "new_name"."n_srno" and "order_ledger"."n_seq" = "new_name"."n_seq";
  if "d_count" > 0 then
    update "order_ledger"
      set "n_o1" = "n_o1"+"new_name"."n_o1",
      "n_o2" = "n_o2"+"new_name"."n_o2",
      "n_o3" = "n_o3"+"new_name"."n_o3",
      "n_o4" = "n_o4"+"new_name"."n_o4",
      "order_ledger"."c_item_code" = "new_name"."c_item_code",
      "order_ledger"."c_supp_code" = "s_supp_code",
      "order_ledger"."d_split1" = "dt_split1",
      "order_ledger"."d_split2" = "dt_split2",
      "order_ledger"."d_split3" = "dt_split3",
      "order_ledger"."d_split4" = "dt_split4"
      where "order_ledger"."c_year" = "s_yr"
      and "order_ledger"."n_srno" = "new_name"."n_srno"
      and "order_ledger"."n_seq" = "new_name"."n_seq"
  else
    insert into "order_ledger"( "c_year","n_srno","n_seq","c_item_code","n_o1","n_o2","n_o3","n_o4","c_supp_code","d_split1","d_split2","d_split3","d_split4" ) values
      ( "s_yr","new_name"."n_srno","new_name"."n_seq","new_name"."c_item_code","new_name"."n_o1","new_name"."n_o2","new_name"."n_o3","new_name"."n_o4","s_supp_code","dt_split1","dt_split2","dt_split3","dt_split4" ) 
  end if;
  if "new_name"."n_sales_ord_no" > 0 then
    update "lost_order_master_summary" set "n_inv_no" = "new_name"."n_srno" where "c_item_code" = "new_name"."c_item_code" and "n_seq" = "new_name"."n_sales_ord_no"
  end if
end;
CREATE TRIGGER "insert_into_order_ledger_from_order_det_update" after update order 1 on
"DBA"."order_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "d_count" decimal(8);
  declare "s_supp_code" char(6);
  declare "dt_split1" date;
  declare "dt_split2" date;
  declare "dt_split3" date;
  declare "dt_split4" date;
  declare "s_yr" char(2);
  if "old_name"."n_stop_trigger" <> "new_name"."n_stop_trigger" then
    return
  end if;
  if "new_name"."c_supp_code" is null or "trim"("new_name"."c_supp_code") = '' then
    select "c_supp_code","d_split1","d_split2","d_split3","d_split4" into "s_supp_code","dt_split1","dt_split2","dt_split3","dt_split4" from "order_mst" where "order_mst"."c_prefix" = 'OR' and "order_mst"."n_srno" = "new_name"."n_srno";
    if "s_supp_code" is null or "trim"("s_supp_code") = '' then
      select "c_supp_code","uf_default_date"(),"uf_default_date"(),"uf_default_date"(),"uf_default_date"() into "s_supp_code","dt_split1","dt_split2","dt_split3","dt_split4" from "item_mst" where "item_mst"."c_code" = "new_name"."c_item_code"
    end if
  else
    set "s_supp_code" = "new_name"."c_supp_code";
    set "dt_split1" = "new_name"."d_split1";
    set "dt_split2" = "new_name"."d_split2";
    set "dt_split3" = "new_name"."d_split3";
    set "dt_split4" = "new_name"."d_split4"
  end if;
  if "new_name"."c_year" is null or "trim"("new_name"."c_year") = '' then
    select "right"("string"("year"("d_ac_year_st_date")),2) into "s_yr" from "system_parameter"
  else
    set "s_yr" = "new_name"."c_year"
  end if;
  update "order_ledger"
    set "n_o1" = "n_o1"-"old_name"."n_o1",
    "n_o2" = "n_o2"-"old_name"."n_o2",
    "n_o3" = "n_o3"-"old_name"."n_o3",
    "n_o4" = "n_o4"-"old_name"."n_o4"
    where "order_ledger"."c_year" = "s_yr"
    and "order_ledger"."n_srno" = "old_name"."n_srno"
    and "order_ledger"."n_seq" = "old_name"."n_seq";
  select "count"("n_seq") into "d_count" from "order_ledger" where "order_ledger"."c_year" = "s_yr" and "order_ledger"."n_srno" = "new_name"."n_srno" and "order_ledger"."n_seq" = "new_name"."n_seq";
  if "d_count" > 0 then
    update "order_ledger"
      set "n_o1" = "n_o1"+"new_name"."n_o1",
      "n_o2" = "n_o2"+"new_name"."n_o2",
      "n_o3" = "n_o3"+"new_name"."n_o3",
      "n_o4" = "n_o4"+"new_name"."n_o4",
      "order_ledger"."c_item_code" = "new_name"."c_item_code",
      "order_ledger"."c_supp_code" = "s_supp_code",
      "order_ledger"."d_split1" = "dt_split1",
      "order_ledger"."d_split2" = "dt_split2",
      "order_ledger"."d_split3" = "dt_split3",
      "order_ledger"."d_split4" = "dt_split4"
      where "order_ledger"."c_year" = "s_yr"
      and "order_ledger"."n_srno" = "new_name"."n_srno"
      and "order_ledger"."n_seq" = "new_name"."n_seq"
  else
    insert into "order_ledger"( "c_year","n_srno","n_seq","c_item_code","n_o1","n_o2","n_o3","n_o4","c_supp_code","d_split1","d_split2","d_split3","d_split4" ) values
      ( "s_yr","new_name"."n_srno","new_name"."n_seq","new_name"."c_item_code","new_name"."n_o1","new_name"."n_o2","new_name"."n_o3","new_name"."n_o4","s_supp_code","dt_split1","dt_split2","dt_split3","dt_split4" ) 
  end if
end;
CREATE TRIGGER "insert_into_slip_list_mst" after insert order 1 on
"DBA"."slip_list_mst"
referencing new as "new_name"
for each row
begin
  declare @trasp_code char(6);
  declare @defa_date date;
  set @trasp_code = "new_name"."c_transporter";
  set @defa_date = "uf_default_date"();
  if "new_name"."n_transport_charges" > 0 and @trasp_code is not null then
    insert into "transporter_payment_ledger"( "c_code","n_doc_no","c_doc_no","d_date","n_amount","n_bal_amount" ) values
      ( "new_name"."c_transporter","new_name"."n_srno",'-',@defa_date,"new_name"."n_transport_charges","new_name"."n_transport_charges" ) 
  end if
end;
CREATE TRIGGER "insert_invoice_det_stk_sale_det" after insert order 1 on
"DBA"."invoice_det_stk_sale"
referencing new as "new_name"
for each row
begin
  insert into "Stock_inward_outwad"
    ( "c_item_code","c_batch_no","c_supp_code","n_tran_no","n_tran_seq","n_qty","n_schm_qty","n_schm_disc","n_sale_rate","n_pur_rate","n_eff_pur_rate","n_mrp","d_exp_date","d_date","d_ldate","n_flag","n_branch","n_product_value","n_ts_value","c_mfac_code","n_type_of_ret" ) values
    ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."c_supp_code","new_name"."n_tran_no","new_name"."n_seq","new_name"."n_tran_type"*"new_name"."n_qty","new_name"."n_tran_type"*"new_name"."n_schm_qty","new_name"."n_schm_disc","new_name"."n_sale_rate",
    "new_name"."n_pur_rate","new_name"."n_eff_pur_rate","new_name"."n_mrp","new_name"."d_exp_date","new_name"."d_date","now"(),"new_name"."n_flag","new_name"."n_branch","new_name"."n_product_value","new_name"."n_ts_value","new_name"."c_mfac_code","new_name"."n_type_of_ret" ) 
end;
CREATE TRIGGER "insert_ledger_from_bank_to_bank" before insert order 1
on "DBA".bank_to_bank
referencing new as new_name
for each row
begin
  insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
    new_name.c_prefix,new_name.n_srno,'RCPAYM',new_name.d_tran_date,
    -new_name.n_total,'RCRECV');
  if new_name.d_reconcile_date_f is not null then
    if new_name.n_return_f=1 then
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,'RCRECV',new_name.d_reconcile_date_f,
        -new_name.n_total,'RCPAYM');
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,'RCPAYM',new_name.d_reconcile_date_f,
        new_name.n_total,'RCRECV')
    else
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,new_name.c_from_bank_code,new_name.d_reconcile_date_f,
        -new_name.n_total,new_name.c_to_bank_code);
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,'RCPAYM',new_name.d_reconcile_date_f,
        new_name.n_total,new_name.c_from_bank_code)
    end if
  end if
  ;
  insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
    new_name.c_prefix,new_name.n_srno,'RCRECV',new_name.d_tran_date,
    new_name.n_total,'RCPAYM');
  if new_name.d_reconcile_date_t is not null then
    if new_name.n_return_t=1 then
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,'RCRECV',new_name.d_reconcile_date_f,
        -new_name.n_total,'RCPAYM');
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,'RCPAYM',new_name.d_reconcile_date_f,
        new_name.n_total,'RCRECV')
    else
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,'RCRECV',new_name.d_reconcile_date_t,
        -new_name.n_total,new_name.c_to_bank_code);
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,new_name.c_to_bank_code,new_name.d_reconcile_date_t,
        new_name.n_total,new_name.c_from_bank_code)
    end if
  end if
  ;
  insert into remarks(c_prefix,n_tran_id,c_chq_no,d_chq_dt,c_remark) values(
    new_name.c_prefix,new_name.n_srno,new_name.c_chq_no,new_name.d_chq_dt,if new_name.n_return_f=1 or new_name.n_return_t=1 then ': CHEQUE RETURNED :' else '' endif+new_name.c_remark)
end;
CREATE TRIGGER "Insert_ledger_from_cash_coll_ent_mst" before insert order 1 on "DBA"."cash_coll_ent_mst"
referencing new as "new_name"
for each row
begin
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sman_act_code","new_name"."d_date",
    -"new_name"."n_total",'CASH' ) ;
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",'CASH',"new_name"."d_date",
    "new_name"."n_total","new_name"."c_sman_act_code" ) ;
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",null,null,"new_name"."c_remark" ) 
end;
CREATE TRIGGER "Insert_ledger_from_cash_coll_ent_mst_update" before update order 1 on "DBA"."cash_coll_ent_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno";
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix" and "remarks"."n_tran_id" = "old_name"."n_srno";
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sman_act_code","new_name"."d_date",
    -"new_name"."n_total",'CASH' ) ;
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",'CASH',"new_name"."d_date",
    "new_name"."n_total","new_name"."c_sman_act_code" ) ;
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",null,null,"new_name"."c_remark" ) 
end;
CREATE TRIGGER "insert_ledger_from_crnt_mst" after insert order 1 on
-----------------------------------
-----------------------------------
--purchase trigger end
--crnt Insert
--purchase trigger end
--crnt Insert
"DBA"."crnt_mst"
referencing new as "new_name"
for each row
when("new_name"."n_ledg_effect" = 1)
begin
  /*    
Name: insert_ledger_from_crnt_mst
Date:4/3/99
Applies to: credit note master
Parameter description: n/a
Return Value: n/a
Overview:
this trigger is fire when credit note prepared for the customer or branch
is saved. it credits the customer account and discount given account.
it debits the taxable return(SRETTX) and nontaxable return account(SRETNT)
with respective amount for return account of customer. for branch
these accounts are TRSRTX and TRSRNT. it debits the ST, RST and CST account.
it puts the remark in remark table for this credit note transaction.
Boundary conditions: n/a
Remarks:
Revision History:
Developed by: hitesh
Tested by:
*/
  declare "account_code_is_cust" char(6);
  declare "s_crnt_act_code" char(6);
  declare "s_vat_rst_act_code" char(6);
  declare "n_rnd_amt" decimal(4,2);
  declare @c_year_new char(2);
  declare @doc_date_new date;
  //Added by Sripal on 04-09-2005 
  insert into "invoice_print"( "c_prefix","n_srno","n_print" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",0 ) ;
  call "usp_check_update_last_tran_info"(0,"new_name"."c_cust_code",5,"new_name"."c_prefix","new_name"."n_srno","new_name"."d_crnt_date");
  set @c_year_new = "new_name"."c_year";
  set @doc_date_new = "new_name"."d_crnt_date";
  if @c_year_new is null then
    if "length"("new_name"."n_srno") > 9 then
      set @c_year_new = "uf_get_pk_component"("new_name"."n_srno",1)
    else
      if "month"(@doc_date_new) <= 3 then
        set @c_year_new = "right"("string"("year"(@doc_date_new)-1),2)
      else
        set @c_year_new = "right"("string"("year"(@doc_date_new)),2)
      end if end if end if;
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
    "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
    "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
    "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
    "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
    "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
    "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type","n_tcs_per","n_tcs_taxable_amt","n_tcs_amt","n_tcs_on_service" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."d_crnt_date","new_name"."c_cust_code","new_name"."c_sman_code","new_name"."c_dman_code",0,"new_name"."n_discount_per","new_name"."n_other_credit_amt","new_name"."n_other_charge","new_name"."n_total",
    0,"new_name"."n_tot_sch_disc",0,null,0,0,null,0,0,null,0,0,null,"new_name"."n_credit_per","new_name"."n_branch","new_name"."n_discount",0,0,"new_name"."n_taxable_ret","new_name"."n_non_taxable_ret",
    null,"new_name"."n_prod_val",0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,"new_name"."n_approved","new_name"."n_approve",null,null,
    0,"new_name"."c_post_user","new_name"."c_sys_ip","new_name"."c_computer_name","new_name"."n_store_track",0,"new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no","new_name"."n_cgst_amt","new_name"."n_sgst_amt",
    "new_name"."n_igst_amt","new_name"."n_gst_cess_amt","new_name"."c_state_code","new_name"."c_eway_bill_no","new_name"."d_eway_date","new_name"."n_to_gst_type","new_name"."n_service_chg","new_name"."n_taxable_amt","new_name"."c_ordered_user","new_name"."c_store_code","new_name"."n_add_cess_amt",
    "new_name"."c_remark","new_name"."n_settle_days","new_name"."c_debit_act","new_name"."n_Post","new_name"."n_adj_type","new_name"."n_counter_ret","new_name"."n_treat_vat","new_name"."c_post_user",
    "new_name"."c_act_code",2,"new_name"."n_tcs_per","new_name"."n_tcs_taxable_amt","new_name"."n_tcs_amt","new_name"."n_tcs_on_service" ) ;
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
    "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( @c_year_new,
    "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."c_prefix","new_name"."n_srno",
    -1*("new_name"."n_total"),"new_name"."c_cust_code","new_name"."d_crnt_date","new_name"."d_crnt_date",1 ) ;
  if "new_name"."n_post" <> 1 then
    return
  end if;
  if "new_name"."n_counter_ret" = 1 then
    set "account_code_is_cust" = 'CASH'
  else
    // if not counter sale then set the customer account code
    set "account_code_is_cust" = "new_name"."c_cust_code"
  end if;
  // if taxable return is there debits taxable ret account
  if "new_name"."n_vaton" = 0 then
    set "s_vat_rst_act_code" = 'R_ST'
  else
    set "s_vat_rst_act_code" = 'VAT'
  end if;
  if "new_name"."n_taxable_ret" <> 0 then
    //if return is from branch
    if "new_name"."n_branch" = 1 then
      set "s_crnt_act_code" = 'TRSRTX'
    else
      //otherwise sale return from customer
      set "s_crnt_act_code" = 'SRETTX'
    end if;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","s_crnt_act_code","new_name"."d_crnt_date",
      "new_name"."n_taxable_ret","account_code_is_cust" ) 
  end if;
  // if nontaxable return is there debits nontaxable ret account
  if "new_name"."n_non_taxable_ret" <> 0 then
    // if return from branch
    if "new_name"."n_branch" = 1 then
      set "s_crnt_act_code" = 'TRSRNT'
    else
      //otherwise return from customer
      set "s_crnt_act_code" = "new_name"."c_act_code"
    end if;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","s_crnt_act_code","new_name"."d_crnt_date",
      "new_name"."n_non_taxable_ret","account_code_is_cust" ) 
  end if;
  // credit the customer with total credit note amount
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount",
    "c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","account_code_is_cust","new_name"."d_crnt_date",
    -"new_name"."n_total","new_name"."c_debit_act" ) ;
  //crdit the discount given
  if "new_name"."n_discount" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'DISCG',"new_name"."d_crnt_date",
      -"new_name"."n_discount","new_name"."c_debit_act" ) 
  end if;
  if "new_name"."n_lbt_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-LBTCH',"new_name"."d_crnt_date",
      -"new_name"."n_lbt_amt","new_name"."c_debit_act" ) 
  end if;
  //debits the st
  if "new_name"."n_st" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'ST',"new_name"."d_crnt_date",
      "new_name"."n_st","account_code_is_cust" ) 
  end if;
  //debits the Other Charge //added by sripal
  if "new_name"."n_other_charge" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'OCHARG',"new_name"."d_crnt_date",
      "new_name"."n_other_charge","account_code_is_cust" ) 
  end if;
  //debits the rst //added by Sripal
  if "new_name"."n_rst" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","s_vat_rst_act_code","new_name"."d_crnt_date",
      "new_name"."n_rst","account_code_is_cust" ) 
  end if;
  //debits the Cess //added by Sripal
  if "new_name"."n_cess" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CESSPY',"new_name"."d_crnt_date",
      "new_name"."n_cess","account_code_is_cust" ) 
  end if;
  //debits the Freight//added by Sripal
  if "new_name"."n_freight" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'PCBCCH',"new_name"."d_crnt_date",
      "new_name"."n_freight","new_name"."c_cust_code" ) 
  end if;
  //debit the cst
  if "new_name"."n_cst" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CST',"new_name"."d_crnt_date",
      "new_name"."n_cst","new_name"."c_cust_code" ) 
  end if;
  //TCS
  if "new_name"."n_tcs_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tcs_act_code","new_name"."d_crnt_date",
      "new_name"."n_tcs_amt","new_name"."c_cust_code" ) 
  end if;
  //gst
  if "new_name"."n_sgst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_act_code","new_name"."d_crnt_date",
      "new_name"."n_sgst_amt","new_name"."c_cust_code" ) 
  end if;
  if "new_name"."n_cgst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_act_code","new_name"."d_crnt_date",
      "new_name"."n_cgst_amt","new_name"."c_cust_code" ) 
  end if;
  if "new_name"."n_igst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_act_code","new_name"."d_crnt_date",
      "new_name"."n_igst_amt","new_name"."c_cust_code" ) 
  end if;
  if "new_name"."n_gst_cess_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_gst_cess_act_code","new_name"."d_crnt_date",
      "new_name"."n_gst_cess_amt","new_name"."c_cust_code" ) 
  end if;
  if "new_name"."n_add_cess_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_add_cess_act_code","new_name"."d_crnt_date",
      "new_name"."n_add_cess_amt","new_name"."c_cust_code" ) 
  end if;
  ---------reverese 
  if "new_name"."n_igst_amt" <> 0 and("new_name"."n_to_gst_type" = 7 or "new_name"."n_to_gst_type" = 3) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_rev_act_code","new_name"."d_crnt_date",
      -"new_name"."n_igst_amt","new_name"."c_cust_code" ) 
  end if;
  --------------
  //adjust the rounded figure in kasar account
  set "n_rnd_amt" = "new_name"."n_taxable_ret"+"new_name"."n_non_taxable_ret"+"new_name"."n_st"+"new_name"."n_cess"+"new_name"."n_rst"+"new_name"."n_cst"+"new_name"."n_other_credit_amt"+"new_name"."n_other_charge"+"new_name"."n_freight"
    +"isnull"("new_name"."n_tcs_amt",0)
    +(if("new_name"."n_to_gst_type" = 7 or "new_name"."n_to_gst_type" = 3) then 0 else("new_name"."n_sgst_amt"+"new_name"."n_cgst_amt"+"new_name"."n_igst_amt"+"isnull"("new_name"."n_gst_cess_amt",0)+"isnull"("new_name"."n_add_cess_amt",0)) endif)
    -"new_name"."n_discount"-"new_name"."n_lbt_amt"-"new_name"."n_total";
  if "n_rnd_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"new_name"."d_crnt_date",
      -"n_rnd_amt","account_code_is_cust" ) 
  end if;
  //set the remark for this credit note in remark 
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",null,null,"new_name"."c_remark" ) ;
  if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and "trim"("isnull"("new_name"."c_from_gst_no",'')) <> "trim"("isnull"("new_name"."c_to_gst_no",'')) and "isnull"("new_name"."n_treat_vat",0) < 5 then
    insert into "gst_ledger_mst"( "n_srno","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note","n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
      "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","c_eway_bill_no","c_port_code","n_cancel_flag","d_ref_date","n_add_cess_amt" ) values
      ( "new_name"."n_srno","new_name"."d_crnt_date","new_name"."c_cust_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
      cast("new_name"."n_return_inv_no" as char(30)),'',0,-"new_name"."n_cgst_amt",-"new_name"."n_sgst_amt",-"new_name"."n_igst_amt",-"new_name"."n_gst_cess_amt",
      0,"new_name"."n_discount",(-1*"new_name"."n_taxable_amt"),"new_name"."n_total"-"isnull"("new_name"."n_tcs_amt",0),"new_name"."d_ldate","new_name"."t_ltime","new_name"."c_user","new_name"."c_state_code",-1*("new_name"."n_service_chg"),
      "new_name"."n_flag",0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."c_eway_bill_no","new_name"."c_port_code","new_name"."n_cancel_flag","new_name"."d_ret_date",-"new_name"."n_add_cess_amt" ) 
  end if
end;
CREATE TRIGGER "insert_ledger_from_crnt_tmp_mst" after insert order 1 on
-----------------------------------
-----------------------------------
--purchase trigger end
--crnt Insert
--purchase trigger end
--crnt Insert
"DBA"."crnt_tmp_mst"
referencing new as "new_name"
for each row
begin
  call "usp_check_update_last_tran_info"(0,"new_name"."c_cust_code",6,"new_name"."c_prefix","new_name"."n_srno","new_name"."d_crnt_tmp_date")
end;
CREATE TRIGGER "Insert_Ledger_From_Cust_Dbnt" before insert order 1 on
"DBA"."cust_dbnt"
referencing new as "new_name"
for each row
when("new_name"."n_ledg_effect" = 1)
begin
  declare @new_c_year char(2);
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","new_name"."d_dbnt_date",
    "new_name"."n_total","new_name"."c_opp_act_code" ) ;
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",null,null,"new_name"."c_remark" ) ;
  if "new_name"."n_cgst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_act_code","new_name"."d_dbnt_date",
      -"new_name"."n_cgst_amt","new_name"."c_opp_act_code" ) 
  end if;
  if "new_name"."n_sgst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_act_code","new_name"."d_dbnt_date",
      -"new_name"."n_sgst_amt","new_name"."c_opp_act_code" ) 
  end if;
  if "new_name"."n_igst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_act_code","new_name"."d_dbnt_date",
      -"new_name"."n_igst_amt","new_name"."c_opp_act_code" ) 
  end if;
  if "new_name"."n_gst_cess_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_gst_cess_act_code","new_name"."d_dbnt_date",
      -"new_name"."n_gst_cess_amt","new_name"."c_opp_act_code" ) 
  end if;
  ------Reverse
  if "new_name"."n_igst_amt" <> 0 and "new_name"."n_to_gst_type" = 7 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_rev_act_code","new_name"."d_dbnt_date",
      "new_name"."n_igst_amt","new_name"."c_opp_act_code" ) 
  end if;
  if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_gst_cess_amt"+"new_name"."n_sgst_amt"+"new_name"."n_cgst_amt"+"new_name"."n_igst_amt" <> 0 and "new_name"."n_gst_post" = 1 then
    insert into "gst_ledger_mst"( "n_srno","n_pk","d_date","c_act_code","c_from_gst_no","n_from_gst_type",
      "c_to_gst_no","c_ref_no","c_note",
      "n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
      "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","d_ref_date" ) values
      ( "new_name"."n_srno",0,if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and "new_name"."n_to_gst_type" = 2 then
        "DATE"("STRING"("YEAR"("DATEADD"("month",1,"isnull"("new_name"."d_dbnt_date","new_name"."d_ref_date"))))+'-'+"RIGHT"('0'+"STRING"("MONTH"("DATEADD"("month",1,"isnull"("new_name"."d_dbnt_date","new_name"."d_ref_date")))),2)+'-'+'01')
      else
        "isnull"("new_name"."d_dbnt_date","new_name"."d_ref_date")
      endif,"new_name"."c_cust_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
      "new_name"."c_ref_id","new_name"."c_remark",if "new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 3 then 1 else 0 endif,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_gst_cess_amt",
      0,"new_name"."n_discount","new_name"."n_taxable_amt","new_name"."n_total","new_name"."d_dbnt_date","new_name"."t_ltime","new_name"."c_user","new_name"."c_state_code","new_name"."n_service_chg","new_name"."n_flag",0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."d_ref_date" ) 
  end if;
  call "usp_check_update_last_tran_info"(0,"new_name"."c_cust_code",16,"new_name"."c_prefix","new_name"."n_srno","new_name"."d_dbnt_date");
  set @new_c_year = "new_name"."c_year";
  if @new_c_year is null then
    if "length"("new_name"."n_srno") > 9 then
      set @new_c_year = "uf_get_pk_component"("new_name"."n_srno",1)
    else
      if "month"("new_name"."d_dbnt_date") <= 3 then
        set @new_c_year = "right"("string"("year"("new_name"."d_dbnt_date")-1),2)
      else
        set @new_c_year = "right"("string"("year"("new_name"."d_dbnt_date")),2)
      end if end if end if;
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
    "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
    "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
    "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
    "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
    "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
    "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",@new_c_year,"new_name"."d_dbnt_date","new_name"."c_cust_code",null,null,0,0,0,0,"new_name"."n_total",
    0,0,0,null,0,0,null,0,0,null,0,0,null,0,"new_name"."n_branch","new_name"."n_discount",0,0,0,0,
    null,0,0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,0,0,null,null,
    0,null,null,null,0,0,"new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no","new_name"."n_cgst_amt","new_name"."n_sgst_amt",
    "new_name"."n_igst_amt","new_name"."n_gst_cess_amt","new_name"."c_state_code","new_name"."c_eway_bill_no","new_name"."d_eway_date","new_name"."n_to_gst_type","new_name"."n_service_chg","new_name"."n_taxable_amt",null,null,"new_name"."n_add_cess_amt",
    "new_name"."c_remark",0,"new_name"."c_opp_act_code",0,0,0,0,null,null,4 ) ;
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
    "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( @new_c_year,
    "new_name"."c_prefix","new_name"."n_srno",@new_c_year,"new_name"."c_prefix","new_name"."n_srno",
    ("new_name"."n_total"),"new_name"."c_cust_code","new_name"."d_dbnt_date","new_name"."d_dbnt_date"+0,1 ) 
end;
CREATE TRIGGER "Insert_Ledger_From_Cust_Dbnt_Credit_Act" before insert order 1
on "DBA".cust_dbnt_credit_act
referencing new as new_name
for each row
when(new_name.n_ledg_effect=1)
begin
  insert into ledger(c_prefix,n_tran_no,d_date,c_act_code,
    n_amount,c_opp_act_code) values(
    new_name.c_prefix,new_name.n_srno,new_name.d_dbnt_date,
    new_name.c_credit_act,-new_name.n_amount,new_name.c_cust_code)
end;
CREATE TRIGGER "insert_ledger_from_dbnt_voucher_det" after insert order 1 on
"DBA"."dbnt_voucher_det"
referencing new as "new_name"
for each row
begin
  insert into "gst_ledger_det"
    ( "n_srno","c_hsn_sac_code","d_date","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_ref_no","c_note","d_ldate","t_ltime","c_luser","c_user","c_gst_code","n_taxable_amt","n_discount","n_seq","c_opp_act_code","d_ref_date" ) values
    ( "new_name"."n_srno","new_name"."c_hsn_sac_code","new_name"."d_date","new_name"."n_cgst_per",-1*"new_name"."n_cgst_amt","new_name"."n_sgst_per",-1*"new_name"."n_sgst_amt","new_name"."n_igst_per",-1*"new_name"."n_igst_amt","new_name"."n_gst_cess_per",-1*"new_name"."n_gst_cess_amt","new_name"."c_ref_no","new_name"."c_note","new_name"."d_ldate","new_name"."t_ltime","new_name"."c_luser","new_name"."c_user","new_name"."c_gst_code",-1*"new_name"."n_taxable_amt",-1*"new_name"."n_discount","new_name"."n_seq","new_name"."c_opp_act_code","new_name"."d_ref_date" ) 
end;
CREATE TRIGGER "insert_ledger_from_dbnt_voucher_mst" after insert order 1 on
-----------------------
-----------------------------------
-----------------------------------
-----------------------------
"DBA"."dbnt_voucher_mst"
referencing new as "new_name"
for each row
begin
  /*
THIS TRIGGER WILL DO LEDGER POSTING OF DBNT VOUCHER
Debit the supplier with Total  and
Credit the Opp act(claim/selected act) with Total  
*/
  declare @trantype numeric(2);
  declare @drcr numeric(1);
  declare "remark" char(100);
  declare @round_off_value numeric(4,2);
  if "new_name"."n_tran_type" = 3 then
    set @drcr = -1
  else
    set @drcr = 1
  end if;
  if "new_name"."n_tran_type" = 1 or "new_name"."n_tran_type" = 2 or "new_name"."n_tran_type" = 0 then ---1=From supplier debit note,2 =from purchase credit note,3=from purchase debit note     
    set @trantype = -1
  else
    if "new_name"."n_tran_type" = 3 then
      set @trantype = 1
    end if end if;
  set "remark" = "left"("new_name"."c_note",100);
  set @round_off_value = 0;
  set @round_off_value = "isnull"("new_name"."n_round_off",0);
  //Debit Supplier
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_supp_code","new_name"."d_date",
    @drcr*"new_name"."n_total","new_name"."c_act_code" ) ;
  //credit vat acct  
  if "new_name"."n_vat_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'VAT',"new_name"."d_date",
      -"new_name"."n_vat_amt","new_name"."c_supp_code" ) 
  end if;
  //credit opp act (total - vat )
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_act_code","new_name"."d_date",
    @drcr*(-("new_name"."n_total"-"isnull"("new_name"."n_vat_amt",0)-"isnull"("new_name"."n_igst_amt",0)-"isnull"("new_name"."n_sgst_amt",0)-"isnull"("new_name"."n_cgst_amt",0)-"isnull"("new_name"."n_cess_amt",0)-"isnull"("new_name"."n_tcs_amt",0)-@round_off_value)),"new_name"."c_supp_code" ) ;
  insert into "remarks"( "c_prefix","c_chq_no","d_chq_dt","n_tran_id","c_remark" ) values
    ( "new_name"."c_prefix",null,null,"new_name"."n_srno","remark" ) ;
  if "new_name"."n_total" <> 0 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","d_date","c_cust_code","d_due_date" ) values
      ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
      "new_name"."n_total","new_name"."d_date","new_name"."c_supp_code","new_name"."d_date" ) 
  end if;
  ----------------------jagamohan
  if @round_off_value <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"new_name"."d_date",-@round_off_value,"new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_igst_amt" <> 0 and("new_name"."n_from_gst_type" = 0) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_act_code","new_name"."d_date",@trantype*"new_name"."n_igst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_sgst_amt" <> 0 and("new_name"."n_from_gst_type" = 0) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_act_code","new_name"."d_date",@trantype*"new_name"."n_sgst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_cgst_amt" <> 0 and("new_name"."n_from_gst_type" = 0) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_act_code","new_name"."d_date",@trantype*"new_name"."n_cgst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_cess_amt" <> 0 and("new_name"."n_from_gst_type" = 0) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cess_act_code","new_name"."d_date",@trantype*"new_name"."n_cess_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_tcs_amt" <> 0 and("new_name"."n_from_gst_type" = 0) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tcs_act_code","new_name"."d_date",@trantype*"new_name"."n_tcs_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and "trim"("isnull"("new_name"."c_from_gst_no",'')) <> "trim"("isnull"("new_name"."c_to_gst_no",'')) and "new_name"."n_gst_post" <> 0 then
    insert into "gst_ledger_mst"( "n_srno","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note","n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
      "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","d_ref_date","c_eway_bill_no","c_port_code","n_cancel_flag" ) values
      ( "new_name"."n_srno","new_name"."d_date","new_name"."c_supp_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
      "new_name"."c_ref_no",'',0,-1*"isnull"("new_name"."n_cgst_amt",0),-1*"isnull"("new_name"."n_sgst_amt",0),-1*"isnull"("new_name"."n_igst_amt",0),-1*"isnull"("new_name"."n_cess_amt",0),
      0,-1*"isnull"("new_name"."n_discount",0),-1*"isnull"("new_name"."n_taxable_amt",0),"new_name"."n_total"-"isnull"("new_name"."n_tcs_amt",0),"new_name"."d_ldate","new_name"."c_user","new_name"."c_state_code","new_name"."n_service_chg","new_name"."n_flag",0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."d_ref_date","new_name"."c_eway_bill_no","new_name"."c_port_code","new_name"."n_cancel_flag" ) 
  end if;
  call "usp_check_update_last_tran_info"(0,"new_name"."c_supp_code",15,"new_name"."c_prefix","new_name"."n_srno","new_name"."d_date")
end;
CREATE TRIGGER "Insert_ledger_from_gst_settlement" before insert order 1 on
-------------------------------------------------Trigger insert
-----------------------insert
----------------------------------------------------
----------------------payment
------------------payment insert
--------------payment mst insert
--------------payment mst insert
---------------payment insert
"DBA"."gst_settlement"
referencing new as "new_name"
for each row
begin
  declare @IGSTP numeric(12,2);
  declare @IGSTR numeric(12,2);
  declare @CGSTP numeric(12,2);
  declare @CGSTR numeric(12,2);
  declare @SGSTP numeric(12,2);
  declare @SGSTR numeric(12,2);
  declare @CESSP numeric(12,2);
  declare @CESSR numeric(12,2);
  declare "s_credit_act_code" char(6);
  declare "n_supp" decimal(1);
  declare @inrst numeric(12,2);
  set @inrst = "isnull"("new_name"."n_int_igst_amt",0)+"isnull"("new_name"."n_int_cgst_amt",0)+"isnull"("new_name"."n_int_sgst_amt",0)+"isnull"("new_name"."n_int_cess_amt",0);
  if @inrst <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_int_act_code","new_name"."d_date",
      @inrst,'000000' ) 
  end if;
  set "s_credit_act_code" = "new_name"."c_credit_act_code";
  if "new_name"."n_net_amount_paid" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","s_credit_act_code","new_name"."d_date",
      -"new_name"."n_net_amount_paid",'000000' ) 
  end if;
  --IF collected<totalITC then collected ELASE total ITC ENDIF + PaidAmt*****(Dr)
  set @IGSTP = (if "new_name"."n_out_taxable_coll_igst" < ("new_name"."n_itc_net_igst"+"new_name"."n_igst_op_bal") then "new_name"."n_out_taxable_coll_igst" else("new_name"."n_itc_net_igst"+"new_name"."n_igst_op_bal") endif)+"new_name"."n_igst_paid_amt"-"new_name"."n_int_igst_amt";
  set @IGSTP = (if "new_name"."n_igst_rem_bal" <= 0 then
      if "new_name"."n_igst_op_bal" < 0 then
        "abs"("new_name"."n_igst_op_bal")+"abs"("new_name"."n_out_taxable_coll_igst")+"new_name"."n_igst_rem_bal"
      else
        "new_name"."n_out_taxable_coll_igst"+"new_name"."n_igst_rem_bal"
      endif
    else
      if "new_name"."n_igst_op_bal" < 0 then
        "abs"("new_name"."n_igst_op_bal")+"abs"("new_name"."n_out_taxable_coll_igst")
      else
        "new_name"."n_out_taxable_coll_igst"
      endif
    endif);
  --'-1* IF collected<totalITC then collected ELASE total ITC ENDIF*****(Cr)
  set @IGSTR = (if "new_name"."n_out_taxable_coll_igst" < ("new_name"."n_itc_net_igst"+"new_name"."n_igst_op_bal") then("new_name"."n_itc_net_igst"+"new_name"."n_igst_op_bal")-"new_name"."n_igst_rem_bal" else("new_name"."n_itc_net_igst"+"new_name"."n_igst_op_bal") endif);
  set @IGSTR = (if "new_name"."n_igst_rem_bal" <= 0 then
      if "new_name"."n_igst_op_bal" > 0 then
        "abs"("new_name"."n_igst_op_bal")+"abs"("new_name"."n_itc_net_igst")
      else
        "new_name"."n_itc_net_igst"
      endif
    else
      if "new_name"."n_igst_op_bal" > 0 then
        ("abs"("new_name"."n_igst_op_bal")+"abs"("new_name"."n_itc_net_igst"))-"new_name"."n_igst_rem_bal"
      else
        ("new_name"."n_itc_net_igst"-"new_name"."n_igst_rem_bal")
      endif
    endif)*-1;
  ---                                                   (new_name.n_itc_net_igst+new_name.n_igst_op_bal) then new_name.n_out_taxable_coll_igst else (new_name.n_itc_net_igst+new_name.n_igst_op_bal) endif);
  --IF collected<totalITC then collected ELASE total ITC ENDIF + PaidAmt+igst_settled againt cgst*****(Dr)
  set @CGSTP = (if "new_name"."n_out_taxable_coll_cgst" < ("new_name"."n_itc_net_cgst"+"new_name"."n_cgst_op_bal") then "new_name"."n_out_taxable_coll_cgst" else("new_name"."n_itc_net_cgst"+"new_name"."n_cgst_op_bal") endif)+("new_name"."n_cgst_paid_amt"+"new_name"."n_adj_cgst"-"new_name"."n_int_cgst_amt");
  set @CGSTP = (if "new_name"."n_cgst_rem_bal" <= 0 then
      if "new_name"."n_cgst_op_bal" < 0 then
        "abs"("new_name"."n_cgst_op_bal")+"abs"("new_name"."n_out_taxable_coll_cgst")+"new_name"."n_cgst_rem_bal"
      else
        "new_name"."n_out_taxable_coll_cgst"+"new_name"."n_cgst_rem_bal"
      endif
    else
      if "new_name"."n_cgst_op_bal" < 0 then
        "abs"("new_name"."n_cgst_op_bal")+"abs"("new_name"."n_out_taxable_coll_cgst")
      else
        "new_name"."n_out_taxable_coll_cgst"
      endif
    endif);
  --lower amount (ollected vs total itc)*****(Cr)
  set @CGSTR = (if "new_name"."n_out_taxable_coll_cgst" < ("new_name"."n_itc_net_cgst"+"new_name"."n_cgst_op_bal") then "new_name"."n_out_taxable_coll_cgst" else("new_name"."n_itc_net_cgst"+"new_name"."n_cgst_op_bal") endif);
  set @CGSTR = (if "new_name"."n_cgst_rem_bal" <= 0 then
      if "new_name"."n_cgst_op_bal" > 0 then
        "abs"("new_name"."n_cgst_op_bal")+"abs"("new_name"."n_itc_net_cgst")
      else
        "new_name"."n_itc_net_cgst"
      endif
    else
      if "new_name"."n_cgst_op_bal" > 0 then
        ("abs"("new_name"."n_cgst_op_bal")+"abs"("new_name"."n_itc_net_cgst"))-"new_name"."n_cgst_rem_bal"
      else
        ("new_name"."n_itc_net_cgst"-"new_name"."n_cgst_rem_bal")
      endif
    endif)*-1;
  --LOWER amt + paid amount + igst adusted for sgst*****(Dr)
  set @SGSTP = (if "new_name"."n_out_taxable_coll_sgst" < ("new_name"."n_itc_net_sgst"+"new_name"."n_sgst_op_bal") then "new_name"."n_out_taxable_coll_sgst" else("new_name"."n_itc_net_sgst"+"new_name"."n_sgst_op_bal") endif)+"new_name"."n_sgst_paid_amt"+"new_name"."n_adj_sgst"-"new_name"."n_int_sgst_amt";
  set @SGSTP = (if "new_name"."n_sgst_rem_bal" <= 0 then
      if "new_name"."n_sgst_op_bal" < 0 then
        "abs"("new_name"."n_sgst_op_bal")+"abs"("new_name"."n_out_taxable_coll_sgst")+"new_name"."n_sgst_rem_bal"
      else
        "new_name"."n_out_taxable_coll_sgst"+"new_name"."n_sgst_rem_bal"
      endif
    else
      if "new_name"."n_sgst_op_bal" < 0 then
        "abs"("new_name"."n_sgst_op_bal")+"abs"("new_name"."n_out_taxable_coll_sgst")
      else
        "new_name"."n_out_taxable_coll_sgst"
      endif
    endif);
  --LOWER AMT*****(Cr)
  set @SGSTR = (if "new_name"."n_out_taxable_coll_sgst" < ("new_name"."n_itc_net_sgst"+"new_name"."n_sgst_op_bal") then "new_name"."n_out_taxable_coll_sgst" else("new_name"."n_itc_net_sgst"+"new_name"."n_sgst_op_bal") endif);
  set @SGSTR = (if "new_name"."n_sgst_rem_bal" <= 0 then
      if "new_name"."n_sgst_op_bal" > 0 then
        "abs"("new_name"."n_sgst_op_bal")+"abs"("new_name"."n_itc_net_sgst")
      else
        "new_name"."n_itc_net_sgst"
      endif
    else
      if "new_name"."n_sgst_op_bal" > 0 then
        ("abs"("new_name"."n_sgst_op_bal")+"abs"("new_name"."n_itc_net_sgst"))-"new_name"."n_sgst_rem_bal"
      else
        ("new_name"."n_itc_net_sgst"-"new_name"."n_sgst_rem_bal")
      endif
    endif)*-1;
  --(If ITC amount <payable then ITC amt ELSE Payable amt) + Paid amount*****(Dr)
  set @CESSP = (if "new_name"."n_out_taxable_coll_cess" < ("new_name"."n_itc_net_cess"+"new_name"."n_cess_op_bal") then "new_name"."n_out_taxable_coll_cess" else("new_name"."n_itc_net_cess"+"new_name"."n_cess_op_bal") endif)+"new_name"."n_cess_paid_amt"-"new_name"."n_int_cess_amt";
  --(If ITC amount <payable then ITC amt ELSE Payable amt)*****(Cr)
  set @CESSR = (if "new_name"."n_out_taxable_coll_cess" < ("new_name"."n_itc_net_cess"+"new_name"."n_cess_op_bal") then "new_name"."n_out_taxable_coll_cess" else("new_name"."n_itc_net_cess"+"new_name"."n_cess_op_bal") endif);
  -----------------------------IGST
  if @IGSTP <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-IGSTP',"new_name"."d_date",
      @IGSTP,'000000' ) 
  end if;
  ----------------------------IGST
  if @IGSTR <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-IGSTR',"new_name"."d_date",
      @IGSTR,'000000' ) 
  end if;
  -----------------------------CGST
  if @CGSTP <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-CGSTP',"new_name"."d_date",
      @CGSTP,'000000' ) 
  end if;
  --------------------------CGST
  if @CGSTR <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-CGSTR',"new_name"."d_date",
      @CGSTR,'000000' ) 
  end if;
  -----------------------------SGST
  if @SGSTP <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-SGSTP',"new_name"."d_date",
      @SGSTP,'000000' ) 
  end if;
  --------------------------SGST
  if @SGSTR <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-SGSTR',"new_name"."d_date",
      @SGSTR,'000000' ) 
  end if;
  -----------------------------CESS
  if @CESSP <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-CESSP',"new_name"."d_date",
      @CESSP,'000000' ) 
  end if;
  --------------------------CESS
  if @CESSR <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-CESSR',"new_name"."d_date",
      -1*@CESSR,'000000' ) 
  end if;
  ------------------------------
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cheque_no","new_name"."d_chq_dt","new_name"."c_remark" ) 
end;
CREATE TRIGGER "insert_ledger_from_invoice_mst" after insert order 1 on
----------------
-----------------------------------------
-----------------------------------
-----------------------------------
------------------------sales invoice_mst insert
--inv insert Start
"DBA"."invoice_mst"
referencing new as "new_name"
for each row
when("new_name"."n_ledg_effect" = 1)
begin
  /*    
Name: insert_ledger_from_invoice_mst 
Date:27/2/99
Applies to: invoice master
Parameter description:n/a
Return Value: n/a
Overview: 
when invoice is prepared this trigger gives the relative effect to 
the ledger and remark table. if sale is counter sale than debits the cash 
account other wise customer account. it debits the discount given account
for discount given in invoice.
it credit the sale taxable,sale non taxable account,ST and CST account.
if total figure is rounded then difference of actual amount and rounded 
amount is settled in "kasar" account.
if any credit, debit or advance note is settled in invoice then it will
update the relative master with invoice id. if it is already settled then
it will give error message.
Boundary conditions:n/a
Remarks:
taxable sale is first sale plus tax suffered on first sale
nontaxable is second sale plus tax suffered on second sale.
tax suffered on front end is sum of tax suffered of both.
total is n_taxable_sale+n_non_taxable_sale+n_st+n_cst-n_disc_amt
-n_crnt_amt+n_dbnt_amt-n_adv_amt in round figure

Revision History:
Developed by: hitesh
Tested by:
*/
  declare @invopen_bal_amnt numeric(12,2);
  declare "account_code_is_cust" char(6);
  declare "account_code_is_sales" char(6);
  declare "account_code_is_vat" char(6);
  declare "remark" char(35);
  declare "n_rnd_amt" decimal(3,2);
  declare "c_phase" char(10);
  declare @branch_sale,@insert_settle_mst numeric(1);
  declare @crnt_yr,@dbnt_yr,@repl_yr,@adv_year,@c_year_new char(2);
  declare @crnt_date,@dbnt_date,@repl_date,@adv_date,@doc_date_new date;
  // if counter sale then customer account is cash
  if "new_name"."n_counter_sale" = 1 then
    set "account_code_is_cust" = 'CASH';
    //settled remark if counter and sub sale 
    if "new_name"."n_sub_sale" = 1 then
      set "remark" = 'Counter sale and Sub sale'
    else
      //remark if only counter sale
      set "remark" = 'Counter sale'
    // if not counter sale then set the customer account code
    end if
  else set "account_code_is_cust" = "new_name"."c_cust_code";
    // if sub sale then set the remark as sub sale
    if "new_name"."n_sub_sale" = 1 then
      set "remark" = 'Sub sale'
    else
      set "remark" = ''
    end if end if;
  if "new_name"."n_vaton" = 0 then
    set "account_code_is_vat" = 'R_ST'
  else
    set "account_code_is_vat" = 'VAT'
  end if;
  // debit the customer account with total+credit+adv-debit amount
  //total is n_taxable_sale+n_non_taxable_sale+n_st+n_cst-n_disc_amt
  //-n_crnt_amt+n_dbnt_amt-n_adv_amt in round figure
  if "account_code_is_cust" = 'CASH' then
    if "new_name"."n_total" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","account_code_is_cust","new_name"."d_inv_date","new_name"."n_total","new_name"."c_credit_act" ) 
    end if;
    if "new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"+"new_name"."n_adv_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","new_name"."d_inv_date","new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"+"new_name"."n_adv_amt","new_name"."c_credit_act" ) 
    end if
  else insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","account_code_is_cust","new_name"."d_inv_date","new_name"."n_total"+"new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"+"new_name"."n_adv_amt","new_name"."c_credit_act" ) 
  end if; //discount amount is debited to discount given account
  if "new_name"."n_disc_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'DISCG',"new_name"."d_inv_date",
      "new_name"."n_disc_amt","new_name"."c_credit_act" ) 
  end if;
  //if total is round figure then find the difference betweeen actual and
  //rounded figure and that difference is settled in "KASAR" account
  if "new_name"."n_round_off" = 1 then
    set "n_rnd_amt" = "new_name"."n_taxable_sale"+"new_name"."n_non_taxable_sale"+"new_name"."n_st"+"new_name"."n_cess"+"new_name"."n_rst"+"new_name"."n_freight"+"new_name"."n_other_charge"+"new_name"."n_cst"
      +"isnull"("new_name"."n_tcs_amt",0)
      +(if("new_name"."n_to_gst_type" = 7 or "new_name"."n_to_gst_type" = 3) then 0 else("new_name"."n_sgst_amt"+"new_name"."n_cgst_amt"+"new_name"."n_igst_amt"+"isnull"("new_name"."n_gst_cess_amt",0)+"isnull"("new_name"."n_add_cess_amt",0)) endif)
      -"new_name"."n_disc_amt"-"new_name"."n_lbt_amt"-"new_name"."n_crnt_amt"+"new_name"."n_dbnt_amt"-"new_name"."n_adv_amt"+"isnull"("new_name"."n_service_chg",0)-"new_name"."n_total";
    if "n_rnd_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"new_name"."d_inv_date","n_rnd_amt","account_code_is_cust" ) 
    end if end if;
  //if non taxable sale is there then set the proper sales account
  if "new_name"."n_non_taxable_sale" <> 0 then
    if "new_name"."n_branch" = 1 then
      //if transfer to the branch
      set "account_code_is_sales" = 'TRANNT'
    else
      set "account_code_is_sales" = 'SALENT'
    end if;
    //credit the nontaxable sale account 
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","account_code_is_sales","new_name"."d_inv_date",
      -"new_name"."n_non_taxable_sale","account_code_is_cust" ) 
  end if;
  //if taxable sale is there then set the proper sales account
  if "new_name"."n_taxable_sale" <> 0 then
    //if transfer to the branch
    if "new_name"."n_branch" = 1 then
      set "account_code_is_sales" = 'TRANTX'
    else
      set "account_code_is_sales" = 'SALETX'
    end if;
    //credit the nontaxable sale account 
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","account_code_is_sales","new_name"."d_inv_date",
      -"new_name"."n_taxable_sale","account_code_is_cust" ) 
  end if;
  //if sale tax amount is then credit the sale tax amount
  if "new_name"."n_st" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'ST',"new_name"."d_inv_date",-"new_name"."n_st","account_code_is_cust" ) 
  end if;
  //if Cess amount is then credit the Cess amount
  if "new_name"."n_cess" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CESSPY',"new_name"."d_inv_date",-"new_name"."n_cess","account_code_is_cust" ) 
  end if;
  //if sale tax amount is then credit the sale tax amount
  if "new_name"."n_rst" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","account_code_is_vat","new_name"."d_inv_date",-"new_name"."n_rst","account_code_is_cust" ) 
  end if;
  //if freight amount is then credit the sale tax amount
  if "new_name"."n_freight" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'PCBCCH',"new_name"."d_inv_date",-"new_name"."n_freight","account_code_is_cust" ) 
  end if;
  if "new_name"."n_lbt_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-LBTCH',"new_name"."d_inv_date","new_name"."n_lbt_amt","account_code_is_cust" ) 
  end if;
  //if CST is then credit the CST account
  if "new_name"."n_cst" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CST',"new_name"."d_inv_date",
      -"new_name"."n_cst","account_code_is_cust" ) 
  end if;
  //if Other Charges is then credit the OCHARG account
  if "new_name"."n_other_charge" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'OCHARG',"new_name"."d_inv_date",
      -"new_name"."n_other_charge","account_code_is_cust" ) 
  end if;
  if "new_name"."n_tcs_amt" <> 0 then --jagamohan on 25-09-2020 
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tcs_act_code","new_name"."d_inv_date",
      -"new_name"."n_tcs_amt","account_code_is_cust" ) 
  end if;
  if "new_name"."n_cgst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_act_code","new_name"."d_inv_date",
      -"new_name"."n_cgst_amt","account_code_is_cust" ) 
  end if;
  if "new_name"."n_sgst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_act_code","new_name"."d_inv_date",
      -"new_name"."n_sgst_amt","account_code_is_cust" ) 
  end if;
  if "new_name"."n_igst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_act_code","new_name"."d_inv_date",
      -"new_name"."n_igst_amt","account_code_is_cust" ) 
  end if;
  if "new_name"."n_gst_cess_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_gst_cess_act_code","new_name"."d_inv_date",
      -"new_name"."n_gst_cess_amt","account_code_is_cust" ) 
  end if;
  if "new_name"."n_add_cess_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_add_cess_act_code","new_name"."d_inv_date",
      -"new_name"."n_add_cess_amt","account_code_is_cust" ) 
  end if;
  ------Reverse
  if "new_name"."n_igst_amt" <> 0 and("new_name"."n_to_gst_type" = 7 or "new_name"."n_to_gst_type" = 3) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_rev_act_code","new_name"."d_inv_date",
      "new_name"."n_igst_amt","account_code_is_cust" ) 
  end if;
  ------------
  if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and "trim"("isnull"("new_name"."c_from_gst_no",'')) <> "trim"("isnull"("new_name"."c_to_gst_no",'')) then
    insert into "gst_ledger_mst"( "n_srno","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note","n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
      "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","c_eway_bill_no","c_port_code","n_cancel_flag","n_add_cess_amt" ) values
      ( "new_name"."n_srno","new_name"."d_inv_date","new_name"."c_cust_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
      '','',0,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_gst_cess_amt",
      0,"new_name"."n_disc_amt"+"new_name"."n_fix_discount",("new_name"."n_taxable_amt"),"new_name"."n_total"-"isnull"("new_name"."n_tcs_amt",0)+(if "isnull"("new_name"."n_crnt_no",0) > 0 then "isnull"("new_name"."n_crnt_amt",0) else 0 endif)
      +(if "isnull"("new_name"."n_adv_no",0) > 0 then "isnull"("new_name"."n_adv_amt",0) else 0 endif)-(if "isnull"("new_name"."n_dbnt_no",0) > 0 then "isnull"("new_name"."n_dbnt_amt",0) else 0 endif),
      "new_name"."d_ldate","new_name"."t_ltime","new_name"."c_user","new_name"."c_state_code","new_name"."n_service_chg","new_name"."n_flag",0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."c_eway_bill_no","new_name"."c_port_code","new_name"."n_cancel_flag","new_name"."n_add_cess_amt" ) 
  end if;
  //add the transaction remark with transaction id
  insert into "remarks"( "c_prefix","c_chq_no","d_chq_dt","n_tran_id","c_remark" ) values
    ( "new_name"."c_prefix",null,null,"new_name"."n_srno","remark" ) ;
  //if any credit note is settled in invoice then add invoice id to the
  // crnt_mst
  if "new_name"."n_crnt_no" <> 0 then
    if "new_name"."c_crnt_prefix" = 'MD' then
      update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("mdadj_mst"."c_prefix" = "new_name"."c_crnt_prefix"
        and "mdadj_mst"."n_srno" = "new_name"."n_crnt_no")
        and "mdadj_mst"."c_inv_recp_prefix" is null
        and "mdadj_mst"."n_inv_recp_no" = 0
    else
      update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "crnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("crnt_mst"."c_prefix" = "new_name"."c_crnt_prefix"
        and "crnt_mst"."n_srno" = "new_name"."n_crnt_no")
        and "crnt_mst"."c_inv_recp_prefix" is null
        and "crnt_mst"."n_inv_recp_no" = 0
    end if;
    //if this credit not is already settled then will give error message 
    if sqlstate = '02000' then
      raiserror 18000 "Credit note is already settlled. You cannot Save this Invoice. "
    end if;
    set @crnt_yr = "new_name"."c_crnt_year";
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
      "new_name"."c_prefix","new_name"."n_srno",@crnt_yr,"new_name"."c_crnt_prefix","new_name"."n_crnt_no",
      ("new_name"."n_crnt_amt"),"new_name"."c_cust_code","new_name"."d_inv_date","new_name"."d_inv_date"+"new_name"."n_cr_days",1 ) 
  end if;
  if "new_name"."n_dbnt_no" <> 0 then
    if "new_name"."c_dbnt_prefix" = 'MB' then
      update "mdadj_dbnt_mst"
        set "mdadj_dbnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "mdadj_dbnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where "mdadj_dbnt_mst"."c_prefix" = "new_name"."c_dbnt_prefix"
        and "mdadj_dbnt_mst"."n_srno" = "new_name"."n_dbnt_no"
        and "mdadj_dbnt_mst"."c_inv_recp_prefix" is null
        and "mdadj_dbnt_mst"."n_inv_recp_no" = 0
    else
      update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "cust_dbnt"."n_inv_recp_no" = "new_name"."n_srno"
        where "cust_dbnt"."c_prefix" = "new_name"."c_dbnt_prefix"
        and "cust_dbnt"."n_srno" = "new_name"."n_dbnt_no"
        and "cust_dbnt"."c_inv_recp_prefix" is null
        and "cust_dbnt"."n_inv_recp_no" = 0
    //if this debit not is already settled then will give error message 
    end if;
    if sqlstate = '02000' then
      raiserror 18000 "Debit note is already settled. You cannot Save this Invoice. "
    end if;
    set @dbnt_yr = "new_name"."c_dbnt_year";
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
      "new_name"."c_prefix","new_name"."n_srno",@dbnt_yr,"new_name"."c_dbnt_prefix","new_name"."n_dbnt_no",
      -1*("new_name"."n_dbnt_amt"),"new_name"."c_cust_code","new_name"."d_inv_date","new_name"."d_inv_date"+"new_name"."n_cr_days",1 ) 
  end if; // ---------
  //if any advance note is settled in invoice then add invoice id to the
  // cust_advance
  if "new_name"."n_adv_no" <> 0 then
    if "new_name"."c_adv_prefix" = 'MV' then
      update "mdadj_adv_mst"
        set "mdadj_adv_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "mdadj_adv_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where "mdadj_adv_mst"."c_prefix" = "new_name"."c_adv_prefix"
        and "mdadj_adv_mst"."n_srno" = "new_name"."n_adv_no"
        and "mdadj_adv_mst"."c_inv_recp_prefix" is null
        and "mdadj_adv_mst"."n_inv_recp_no" = 0
    else
      update "cust_advance" set "cust_advance"."c_inv_prefix" = "new_name"."c_prefix",
        "cust_advance"."n_inv_no" = "new_name"."n_srno"
        where "cust_advance"."c_prefix" = "new_name"."c_adv_prefix"
        and "cust_advance"."n_srno" = "new_name"."n_adv_no"
        and "cust_advance"."c_inv_prefix" is null
        and "cust_advance"."n_inv_no" = 0
    end if;
    //if this advance not is already settled then will give error message 
    if sqlstate = '02000' then
      raiserror 18000 "Advance note is already settled. You cannot Save this Invoice. "
    end if;
    set @adv_year = "new_name"."c_adv_year";
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
      "new_name"."c_prefix","new_name"."n_srno",@adv_year,"new_name"."c_adv_prefix","new_name"."n_adv_no",
      ("new_name"."n_adv_amt"),"new_name"."c_cust_code","new_name"."d_inv_date","new_name"."d_inv_date"+"new_name"."n_cr_days",1 ) 
  end if;
  if "new_name"."n_order_no" <> 0 then
    update "ord_mst" set "ord_mst"."n_invno" = "new_name"."n_srno"
      where "ord_mst"."n_srno" = "new_name"."n_order_no"
  end if;
  // crnt_mst
  if "new_name"."n_crnt_repl_no" <> 0 then
    if "new_name"."c_crnt_repl_prefix" = 'MD' then
      update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("mdadj_mst"."c_prefix" = "new_name"."c_crnt_repl_prefix"
        and "mdadj_mst"."n_srno" = "new_name"."n_crnt_repl_no")
        and "mdadj_mst"."c_inv_recp_prefix" is null
        and "mdadj_mst"."n_inv_recp_no" = 0
    else
      update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "crnt_repl_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("crnt_repl_mst"."c_prefix" = "new_name"."c_crnt_repl_prefix"
        and "crnt_repl_mst"."n_srno" = "new_name"."n_crnt_repl_no")
        and "crnt_repl_mst"."c_inv_recp_prefix" is null
        and "crnt_repl_mst"."n_inv_recp_no" = 0
    end if;
    //if this credit not is already settled then will give error message 
    if sqlstate = '02000' then
      raiserror 18000 "Replacement Credit note is already settlled. You cannot Save this Invoice. "
    end if;
    set @repl_yr = "new_name"."c_repl_year";
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
      "new_name"."c_prefix","new_name"."n_srno",@repl_yr,"new_name"."c_crnt_repl_prefix","new_name"."n_crnt_repl_no",
      ("new_name"."n_crnt_repl_amt"),"new_name"."c_cust_code","new_name"."d_inv_date","new_name"."d_inv_date"+"new_name"."n_cr_days",1 ) 
  end if;
  insert into "invoice_print"( "c_prefix","n_srno","n_print" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",0 ) ;
  // update temp lock to lock 
  update "act_mst" set "n_auto_lock" = 1 where "act_mst"."c_code" = "new_name"."c_cust_code" and "n_auto_lock" = 2;
  if "new_name"."n_order_no" > 0 and "new_name"."n_pob" = 1 then
    insert into "invoice_mst_det"( "c_prefix","n_srno","c_tmp_name","c_tmp_add_1","c_tmp_add_2","c_tmp_add_3","c_tmp_city","c_tmp_pin","c_tmp_drug_licence_no_1","c_tmp_drug_licence_no_2","c_tmp_st_no","c_tmp_remark","c_tmp_other_info","c_lr_no","d_lr_dt","c_form_no","n_recd","c_case_no","n_cases","n_pob","c_pob_rep","c_pob_mfac_code","c_pob_rep_code" ) on existing skip(
      select "new_name"."c_prefix","new_name"."n_srno","c_tmp_name","c_tmp_add_1","c_tmp_add_2","c_tmp_add_3","c_tmp_city","c_tmp_pin","c_tmp_drug_licence_no_1","c_tmp_drug_licence_no_2","c_tmp_st_no","c_tmp_remark","c_tmp_other_info","c_lr_no","d_lr_dt","c_form_no","n_recd","c_case_no","n_cases","n_pob","c_pob_rep","c_pob_mfac_code","c_pob_rep_code" from "ord_mst_det" where "n_srno" = "new_name"."n_order_no" and "c_prefix" = 'S')
  end if;
  --Storetrack
  if "new_name"."n_store_track" = 2 and "new_name"."n_approve" = 1 then
    select top 1 "c_code" into "c_phase" from "st_phase_mst" where "n_rack_flag" = 1;
    insert into "st_track_mst"
      ( "c_br_code",
      "c_doc_no",
      "n_inout","c_phase_code","d_date",
      "c_user","c_system_name","c_system_ip","t_time_in","t_time_out",
      "n_complete","c_cust_code","c_order_id","n_urgent" ) values
      ( '000',
      '000/'+"string"("new_name"."c_year")+'/'+"string"("new_name"."c_prefix")+'/'+"string"("new_name"."n_srno"),
      0,"c_phase","new_name"."d_inv_date",
      "isNull"("new_name"."c_user",'3DS'),null,null,"new_name"."t_ltime",null,
      0,"new_name"."c_cust_code",null,"new_name"."n_urgent" ) 
  --Storetrack
  end if;
  if "new_name"."n_service_chg" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_service_act","new_name"."d_inv_date",
      -"new_name"."n_service_chg","account_code_is_cust" ) 
  end if;
  insert into "tran_no_print_from_ordinv"( "n_srno","n_type","d_date" ) on existing update defaults off values( "new_name"."n_srno",1,"new_name"."d_inv_date" ) ;
  call "usp_check_update_last_tran_info"(0,"new_name"."c_cust_code",1,"new_name"."c_prefix","new_name"."n_srno","new_name"."d_inv_date");
  select "isnull"("n_br_sale_bal",1) into @branch_sale from "system_Parameter";
  if @branch_sale is null then
    set @branch_sale = 1
  end if;
  set @insert_settle_mst = 1;
  if "isnull"("new_name"."n_counter_sale",0) = 0 then
    if "isnull"("new_name"."n_branch",0) = 1 and @branch_sale = 0 then
      set @insert_settle_mst = 0
    end if
  else set @insert_settle_mst = 0;
    if "new_name"."n_cash_cr_cust" = 1 then
      set @insert_settle_mst = 1
    end if end if;
  set @c_year_new = "new_name"."c_year";
  set @doc_date_new = "new_name"."d_inv_date";
  if @c_year_new is null then
    if "month"(@doc_date_new) <= 3 then
      set @c_year_new = "right"("string"("year"(@doc_date_new)-1),2)
    else
      set @c_year_new = "right"("string"("year"(@doc_date_new)),2)
    end if end if;
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
    "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
    "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
    "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
    "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
    "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
    "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_inv_bal_amt","n_chq_return","n_doc_type",
    "n_charge_on","n_charge_per","n_gst_enabled","n_1st_sale","n_2nd_sale","n_st","n_cst","n_sub_sale","n_freight","n_tax_suffer","n_rst","n_cess","n_mrp_val","c_crnt_year","c_dbnt_year",
    "c_adv_year","c_repl_year","n_tcs_per","n_tcs_taxable_amt","n_tcs_amt","n_tcs_on_service","n_tds_amt","n_cash_cr_cust" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."d_inv_date","new_name"."c_cust_code","new_name"."c_sman_code","new_name"."c_dman_code","new_name"."n_cr_days","new_name"."n_discount_per","new_name"."n_fix_discount","new_name"."n_other_charge","new_name"."n_total",
    "new_name"."n_counter_sale","new_name"."n_tot_sch_disc","new_name"."n_crnt_no","new_name"."c_crnt_prefix","new_name"."n_crnt_amt","new_name"."n_dbnt_no","new_name"."c_dbnt_prefix","new_name"."n_dbnt_amt","new_name"."n_adv_no","new_name"."c_adv_prefix","new_name"."n_adv_amt",
    "new_name"."n_crnt_repl_no","new_name"."c_crnt_repl_prefix","new_name"."n_crnt_repl_amt","new_name"."n_branch","new_name"."n_disc_amt","new_name"."n_rec_disc_on","new_name"."n_rec_disc_amt","new_name"."n_taxable_sale","new_name"."n_non_taxable_sale",
    "new_name"."c_credit_act","new_name"."n_prod_val","new_name"."n_ref_order_no","new_name"."n_order_no","new_name"."c_user","new_name"."c_ship_code","new_name"."c_ref_id","new_name"."c_ref_year","new_name"."n_ref_srno","new_name"."n_approve","new_name"."c_series_code","new_name"."c_mfac_code",
    "new_name"."n_excise_amnt","new_name"."c_conv_user","new_name"."c_sys_ip","new_name"."c_computer_name","new_name"."n_store_track","new_name"."n_vdc_srno","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no","new_name"."n_cgst_amt","new_name"."n_sgst_amt",
    "new_name"."n_igst_amt","new_name"."n_gst_cess_amt","new_name"."c_state_code","new_name"."c_eway_bill_no","new_name"."d_eway_date","new_name"."n_to_gst_type","new_name"."n_service_chg",
    "new_name"."n_taxable_amt","new_name"."c_ordered_user","new_name"."c_store_code","new_name"."n_add_cess_amt",
    null,0,null,0,0,0,0,null,null,"new_name"."n_inv_bal_amt","new_name"."n_chq_return",1,"new_name"."n_charge_on","new_name"."n_charge_per","new_name"."n_gst_enabled",
    "new_name"."n_1st_sale","new_name"."n_2nd_sale","new_name"."n_st","new_name"."n_cst","new_name"."n_sub_sale","new_name"."n_freight",
    "new_name"."n_tax_suffer","new_name"."n_rst","new_name"."n_cess","new_name"."n_mrp_val","new_name"."c_crnt_year","new_name"."c_dbnt_year",
    "new_name"."c_adv_year","new_name"."c_repl_year","new_name"."n_tcs_per",
    "new_name"."n_tcs_taxable_amt","new_name"."n_tcs_amt","new_name"."n_tcs_on_service","new_name"."n_tds_amt","new_name"."n_cash_cr_cust" ) ;
  if @insert_settle_mst = 1 then
    set @invopen_bal_amnt = "isnull"("new_name"."n_inv_open_amnt",0);
    if @invopen_bal_amnt is null then
      set @invopen_bal_amnt = 0
    end if;
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( @c_year_new,
      "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."c_prefix","new_name"."n_srno",
      if @invopen_bal_amnt > 0 then @invopen_bal_amnt else "new_name"."n_total" endif,"new_name"."c_cust_code","new_name"."d_inv_date","new_name"."d_inv_date"+"new_name"."n_cr_days",1 ) 
  end if;
  set @branch_sale = 0;
  select "count"() into @branch_sale from "sale_till_date" where "c_code" = "new_name"."c_cust_code";
  if @branch_sale is null then
    set @branch_sale = 0
  end if;
  if @branch_sale > 0 then
    update "sale_till_date" set "n_value" = "n_value"+"new_name"."n_total" where "c_code" = "new_name"."c_cust_code"
  else
    insert into "sale_till_date"( "c_code","n_value" ) values( "new_name"."c_cust_code","new_name"."n_total" ) 
  end if;
  if "new_name"."c_to_gst_no" is not null then
    select "count"() into @branch_sale from "gstin_wise_sale_total" where "c_code" = "new_name"."c_to_gst_no";
    if @branch_sale is null then
      set @branch_sale = 0
    end if;
    if @branch_sale > 0 then
      update "gstin_wise_sale_total" set "n_value" = "n_value"+"new_name"."n_total" where "c_code" = "new_name"."c_to_gst_no"
    else
      insert into "gstin_wise_sale_total"( "c_code","n_value" ) values( "new_name"."c_to_gst_no","new_name"."n_total" ) 
    end if
  end if
end;
CREATE TRIGGER "insert_ledger_from_jv_det" after insert order 1 on
"DBA"."jv_det"
referencing new as "new_name"
for each row
begin
  declare "ad_date" date;
  declare "ac_prefix" char(2);
  declare "s_yr" char(2);
  declare "n_supp",@act_type decimal(1);
  set @act_type = 0;
  select "isnull"("n_supplier",0)+"isnull"("n_customer",0),
    if "isnull"("n_customer",0) = 1 then 1 else 0 endif
    into "n_supp",@act_type
    from "act_mst" where "c_code" = "new_name"."c_act_code";
  select "right"("DB_NAME"(0),2) into "s_yr" from "default_date";
  if "s_yr" is null then
    set "s_yr" = '00'
  end if;
  select "prefix_sr_numbers"."c_prefix" into "ac_prefix" from "prefix_sr_numbers"
    where "prefix_sr_numbers"."c_trans" = 'JV';
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "ac_prefix","new_name"."n_srno","new_name"."c_act_code","new_name"."d_jv_date","new_name"."n_debit"-"new_name"."n_credit","new_name"."c_opp_act_code" ) ;
  if "n_supp" > 0 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","d_date","c_cust_code","d_due_date","n_act_type" ) values
      ( "s_yr","ac_prefix","new_name"."n_srno","s_yr","ac_prefix","new_name"."n_srno",
      "new_name"."n_debit"-"new_name"."n_credit","new_name"."d_jv_date","new_name"."c_act_code","new_name"."d_jv_date",@act_type ) 
  end if
end;
CREATE TRIGGER "Insert_ledger_from_payment" before insert order 1 on
--------------
----------------------------------------------------
----------------------payment
------------------payment insert
--------------payment mst insert
--------------payment mst insert
---------------payment insert
"DBA"."payment"
referencing new as "new_name"
for each row
begin
  declare "s_credit_act_code" char(6);
  declare "n_supp","n_cust" decimal(1);
  select "n_supplier"+"n_customer","isnull"("n_customer",0) into "n_supp","n_cust" from "act_mst" where "c_code" = "new_name"."c_act_code";
  if "left"("new_name"."c_credit_act_code",4) = 'CASH' then
    set "s_credit_act_code" = "new_name"."c_credit_act_code"
  else
    set "s_credit_act_code" = 'RCPAYM'
  end if;
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_act_code","new_name"."d_pay_date",
    "new_name"."n_total"
    -if "new_name"."n_to_gst_type" = 0 then "isnull"("new_name"."n_sgst_amt"+"new_name"."n_cgst_amt"+"new_name"."n_igst_amt"+"new_name"."n_cess_amt",0) else 0 endif
    +if "new_name"."n_to_gst_type" = 5 then "isnull"("new_name"."n_sgst_amt"+"new_name"."n_cgst_amt"+"new_name"."n_igst_amt"+"new_name"."n_cess_amt",0) else 0 endif,
    if "new_name"."d_reconcile_date" is not null and "new_name"."n_return" = 0 then "new_name"."c_credit_act_code" else "s_credit_act_code" endif ) ;
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","s_credit_act_code","new_name"."d_pay_date",
    -("new_name"."n_total"-"isnull"("new_name"."n_tds_amt",0)),"new_name"."c_act_code" ) ;
  if "new_name"."n_adavance" = 1 and "new_name"."n_tds_amt" > 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tds_act_code","new_name"."d_pay_date",
      -"new_name"."n_tds_amt","new_name"."c_act_code" ) 
  end if;
  if "new_name"."d_reconcile_date" is not null then
    if "new_name"."n_return" = 1 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_act_code","new_name"."d_reconcile_date",
        -"new_name"."n_total","s_credit_act_code" ) ;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","s_credit_act_code","new_name"."d_reconcile_date",
        "new_name"."n_total"-"isnull"("new_name"."n_tds_amt",0),"new_name"."c_act_code" ) ;
      if "new_name"."n_adavance" = 1 and "new_name"."n_tds_amt" > 0 then
        insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
          ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tds_act_code","new_name"."d_pay_date",
          "new_name"."n_tds_amt","s_credit_act_code" ) 
      end if
    else insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_credit_act_code","new_name"."d_reconcile_date",
        -("new_name"."n_total"-"isnull"("new_name"."n_tds_amt",0)),"new_name"."c_act_code" ) ;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","s_credit_act_code","new_name"."d_reconcile_date",
        "new_name"."n_total"-"isnull"("new_name"."n_tds_amt",0),"new_name"."c_credit_act_code" ) 
    end if end if;
  //header
  if "new_name"."n_yearend_flag" = 0 then
    insert into "settle_mst_header"
      ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_credit_act","c_user","n_doc_type","n_total","n_crnt_amt","c_ref_id","d_eway_date","d_ref_date" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."d_pay_date","new_name"."c_act_code","new_name"."c_credit_act_code","new_name"."c_user",12,"new_name"."n_total",
      "new_name"."n_bill_total","new_name"."c_chq_no","new_name"."d_chq_dt","new_name"."d_reconcile_date" ) 
  end if;
  //
  if "new_name"."n_bill_total"-("new_name"."n_total"*(if "new_name"."n_return" = 1 then 0 else 1 endif)) <> 0 and "n_supp" >= 1 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","d_date","c_cust_code","d_due_date","n_act_type" ) values
      ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
      (-1)*("new_name"."n_bill_total"-("new_name"."n_total"*(if "new_name"."n_return" = 1 then 0 else 1 endif))),"new_name"."d_pay_date",
      "new_name"."c_act_code",if "new_name"."d_chq_dt" is null then "new_name"."d_pay_date" else "new_name"."d_chq_dt" endif,"n_cust" ) 
  end if;
  -----------------GST jagamohan
  if "new_name"."n_total" <> 0 then
    if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_cess_amt"+"new_name"."n_sgst_amt"+"new_name"."n_cgst_amt"+"new_name"."n_igst_amt" <> 0 then
      insert into "gst_ledger_mst"( "n_srno","n_pk","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note",
        "n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
        "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","d_ref_date" ) values
        ( "new_name"."n_srno",0,if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 3) then
          "DATE"("STRING"("YEAR"("DATEADD"("month",1,"isnull"("new_name"."d_pay_date","new_name"."d_ref_date"))))+'-'+"RIGHT"('0'+"STRING"("MONTH"("DATEADD"("month",1,"isnull"("new_name"."d_pay_date","new_name"."d_ref_date")))),2)+'-'+'01')
        else
          "isnull"("new_name"."d_pay_date","new_name"."d_ref_date")
        endif,"new_name"."c_act_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
        "isnull"("new_name"."c_ref_no","new_name"."c_chq_no"),"new_name"."c_remark",if "new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 3 then 1 else 0 endif,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_cess_amt",
        0,"new_name"."n_discount","new_name"."n_taxable_amt","new_name"."n_total","new_name"."d_ldate","new_name"."t_ltime","new_name"."c_luser","new_name"."c_state_code","new_name"."n_service_chg","new_name"."n_flag",0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."d_ref_date" ) 
    end if;
    if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 3) then
      insert into "gst_ledger_mst"( "n_srno","n_pk","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note",
        "n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
        "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","d_ref_date" ) values
        ( -1*"new_name"."n_srno",0,"isnull"("new_name"."d_pay_date","new_name"."d_ref_date"),
        "new_name"."c_act_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
        "isnull"("new_name"."c_ref_no","new_name"."c_chq_no"),"new_name"."c_remark",1,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_cess_amt",
        0,"new_name"."n_discount","new_name"."n_taxable_amt","new_name"."n_total","new_name"."d_ldate","new_name"."t_ltime","new_name"."c_luser","new_name"."c_state_code","new_name"."n_service_chg",0,0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."d_ref_date" ) 
    end if;
    if "new_name"."n_from_gst_type" = 0 and "new_name"."n_sgst_amt" <> 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 5) then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
        "n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_act_code","new_name"."d_pay_date",
        -1*"new_name"."n_sgst_amt","new_name"."c_act_code" ) 
    end if;
    if "new_name"."n_from_gst_type" = 0 and "new_name"."n_cgst_amt" <> 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 5) then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
        "n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_act_code","new_name"."d_pay_date",
        -1*"new_name"."n_cgst_amt","new_name"."c_act_code" ) 
    end if;
    if "new_name"."n_from_gst_type" = 0 and "new_name"."n_igst_amt" <> 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 3 or "new_name"."n_to_gst_type" = 5) then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
        "n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_act_code","new_name"."d_pay_date",
        -1*"new_name"."n_igst_amt","new_name"."c_act_code" ) 
    end if;
    if "new_name"."n_from_gst_type" = 0 and "new_name"."n_cess_amt" <> 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 5) then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
        "n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cess_act_code","new_name"."d_pay_date",
        -1*"new_name"."n_cess_amt","new_name"."c_act_code" ) 
    end if;
    if "new_name"."n_from_gst_type" = 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 0) and "new_name"."n_sgst_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
        "n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_rev_act_code","new_name"."d_pay_date",
        "new_name"."n_sgst_amt","new_name"."c_act_code" ) 
    end if;
    if "new_name"."n_from_gst_type" = 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 0) and "new_name"."n_cgst_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
        "n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_rev_act_code","new_name"."d_pay_date",
        "new_name"."n_cgst_amt","new_name"."c_act_code" ) 
    end if;
    if "new_name"."n_from_gst_type" = 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 0 or "new_name"."n_to_gst_type" = 3) and "new_name"."n_igst_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
        "n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_rev_act_code","new_name"."d_pay_date",
        "new_name"."n_igst_amt","new_name"."c_act_code" ) 
    end if;
    if "new_name"."n_from_gst_type" = 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 0) and "new_name"."n_cess_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
        "n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cess_rev_act_code","new_name"."d_pay_date",
        "new_name"."n_cess_amt","new_name"."c_act_code" ) 
    end if end if;
  -----
  ----------till here
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_chq_no","new_name"."d_chq_dt",if "new_name"."d_reconcile_date" is not null and "new_name"."n_return" = 1 then ': CHEQUE RETURNED : ' endif
    +"isNUll"("new_name"."c_remark",'') ) ;
  call "usp_check_update_last_tran_info"(0,"new_name"."c_act_code",12,"new_name"."c_prefix","new_name"."n_srno","new_name"."d_pay_date")
end;
CREATE TRIGGER "insert_ledger_from_rtn_invoice_mst" after insert order 1 on
------------------------------------------
-------------------
----------------------
------------------------sales invoice_mst insert
--inv insert Start
"DBA"."rtn_invoice_mst"
referencing new as "new_name"
for each row
when("new_name"."n_ledg_effect" = 1)
begin
  /*    
Name: insert_ledger_from_invoice_mst 
Date:27/2/99
Applies to: invoice master
Parameter description:n/a
Return Value: n/a
Overview: 
when invoice is prepared this trigger gives the relative effect to 
the ledger and remark table. if sale is counter sale than debits the cash 
account other wise customer account. it debits the discount given account
for discount given in invoice.
it credit the sale taxable,sale non taxable account,ST and CST account.
if total figure is rounded then difference of actual amount and rounded 
amount is settled in "kasar" account.
if any credit, debit or advance note is settled in invoice then it will
update the relative master with invoice id. if it is already settled then
it will give error message.
Boundary conditions:n/a
Remarks:
taxable sale is first sale plus tax suffered on first sale
nontaxable is second sale plus tax suffered on second sale.
tax suffered on front end is sum of tax suffered of both.
total is n_taxable_sale+n_non_taxable_sale+n_st+n_cst-n_disc_amt
-n_crnt_amt+n_dbnt_amt-n_adv_amt in round figure

Revision History:
Developed by: hitesh
Tested by:
*/
  declare "account_code_is_cust" char(6);
  declare "account_code_is_sales" char(6);
  declare "account_code_is_vat" char(6);
  declare "remark" char(35);
  declare "n_rnd_amt" decimal(3,2);
  declare "c_phase" char(10);
  // if counter sale then customer account is cash
  if "new_name"."n_counter_sale" = 1 then
    set "account_code_is_cust" = 'CASH';
    //settled remark if counter and sub sale 
    if "new_name"."n_sub_sale" = 1 then
      set "remark" = 'Counter sale and Sub sale'
    else
      //remark if only counter sale
      set "remark" = 'Counter sale'
    // if not counter sale then set the customer account code
    end if
  else set "account_code_is_cust" = "new_name"."c_cust_code";
    // if sub sale then set the remark as sub sale
    if "new_name"."n_sub_sale" = 1 then
      set "remark" = 'Sub sale'
    else
      set "remark" = ''
    end if end if;
  if "new_name"."n_vaton" = 0 then
    set "account_code_is_vat" = 'R_ST'
  else
    set "account_code_is_vat" = 'VAT'
  end if;
  // debit the customer account with total+credit+adv-debit amount
  //total is n_taxable_sale+n_non_taxable_sale+n_st+n_cst-n_disc_amt
  //-n_crnt_amt+n_dbnt_amt-n_adv_amt in round figure
  if "account_code_is_cust" = 'CASH' then
    if "new_name"."n_total" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","account_code_is_cust","new_name"."d_inv_date","new_name"."n_total","new_name"."c_credit_act" ) 
    end if;
    if "new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"+"new_name"."n_adv_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","new_name"."d_inv_date","new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"+"new_name"."n_adv_amt","new_name"."c_credit_act" ) 
    end if
  else insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","account_code_is_cust","new_name"."d_inv_date","new_name"."n_total"+"new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"+"new_name"."n_adv_amt","new_name"."c_credit_act" ) 
  end if; //discount amount is debited to discount given account
  if "new_name"."n_disc_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'DISCG',"new_name"."d_inv_date",
      "new_name"."n_disc_amt","new_name"."c_credit_act" ) 
  end if;
  //if total is round figure then find the difference betweeen actual and
  //rounded figure and that difference is settled in "KASAR" account
  if "new_name"."n_round_off" = 1 then
    set "n_rnd_amt" = "new_name"."n_taxable_sale"+"new_name"."n_non_taxable_sale"+"new_name"."n_st"+"new_name"."n_cess"+"new_name"."n_rst"+"new_name"."n_freight"+"new_name"."n_other_charge"+"new_name"."n_cst"+(if "new_name"."n_to_gst_type" = 7 then 0 else("new_name"."n_sgst_amt"+"new_name"."n_cgst_amt"+"new_name"."n_igst_amt"+"isnull"("new_name"."n_gst_cess_amt",0)) endif)-"new_name"."n_disc_amt"-"new_name"."n_lbt_amt"-"new_name"."n_crnt_amt"+"new_name"."n_dbnt_amt"-"new_name"."n_adv_amt"+"isnull"("new_name"."n_service_chg",0)+"isnull"("new_name"."n_tcs_amt",0)-"new_name"."n_total";
    if "n_rnd_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"new_name"."d_inv_date","n_rnd_amt","account_code_is_cust" ) 
    end if end if;
  //if non taxable sale is there then set the proper sales account
  if "new_name"."n_non_taxable_sale" <> 0 then
    if "new_name"."n_branch" = 1 then
      //if transfer to the branch
      set "account_code_is_sales" = "new_name"."c_opp_act_code"
    else
      set "account_code_is_sales" = "new_name"."c_opp_act_code"
    end if;
    //credit the nontaxable sale account 
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","account_code_is_sales","new_name"."d_inv_date",
      -"new_name"."n_non_taxable_sale","account_code_is_cust" ) 
  end if;
  //if taxable sale is there then set the proper sales account
  if "new_name"."n_taxable_sale" <> 0 then
    //if transfer to the branch
    if "new_name"."n_branch" = 1 then
      set "account_code_is_sales" = "new_name"."c_opp_act_code"
    else
      set "account_code_is_sales" = "new_name"."c_opp_act_code"
    end if;
    //credit the nontaxable sale account 
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","account_code_is_sales","new_name"."d_inv_date",
      -"new_name"."n_taxable_sale","account_code_is_cust" ) 
  end if;
  //if sale tax amount is then credit the sale tax amount
  if "new_name"."n_st" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'ST',"new_name"."d_inv_date",-"new_name"."n_st","account_code_is_cust" ) 
  end if;
  //if Cess amount is then credit the Cess amount
  if "new_name"."n_cess" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CESSPY',"new_name"."d_inv_date",-"new_name"."n_cess","account_code_is_cust" ) 
  end if;
  //if sale tax amount is then credit the sale tax amount
  if "new_name"."n_rst" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","account_code_is_vat","new_name"."d_inv_date",-"new_name"."n_rst","account_code_is_cust" ) 
  end if;
  //if freight amount is then credit the sale tax amount
  if "new_name"."n_freight" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'PCBCCH',"new_name"."d_inv_date",-"new_name"."n_freight","account_code_is_cust" ) 
  end if;
  if "new_name"."n_lbt_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-LBTCH',"new_name"."d_inv_date","new_name"."n_lbt_amt","account_code_is_cust" ) 
  end if;
  //if CST is then credit the CST account
  if "new_name"."n_cst" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CST',"new_name"."d_inv_date",
      -"new_name"."n_cst","account_code_is_cust" ) 
  end if;
  //if Other Charges is then credit the OCHARG account
  if "new_name"."n_other_charge" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'OCHARG',"new_name"."d_inv_date",
      -"new_name"."n_other_charge","account_code_is_cust" ) 
  end if;
  if "new_name"."n_cgst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_act_code","new_name"."d_inv_date",
      -"new_name"."n_cgst_amt","account_code_is_cust" ) 
  end if;
  if "new_name"."n_sgst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_act_code","new_name"."d_inv_date",
      -"new_name"."n_sgst_amt","account_code_is_cust" ) 
  end if;
  if "new_name"."n_igst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_act_code","new_name"."d_inv_date",
      -"new_name"."n_igst_amt","account_code_is_cust" ) 
  end if;
  if "new_name"."n_tcs_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tcs_act_code","new_name"."d_inv_date",-"new_name"."n_tcs_amt","account_code_is_cust" ) 
  end if;
  -----------SEZ
  if "new_name"."n_igst_amt" <> 0 and "new_name"."n_to_gst_type" = 7 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_rev_act_code","new_name"."d_inv_date",
      "new_name"."n_igst_amt","account_code_is_cust" ) 
  end if;
  -----------
  if "new_name"."n_gst_cess_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_gst_cess_act_code","new_name"."d_inv_date",
      -"new_name"."n_gst_cess_amt","account_code_is_cust" ) 
  end if;
  if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and "trim"("isnull"("new_name"."c_from_gst_no",'')) <> "trim"("isnull"("new_name"."c_to_gst_no",'')) then
    insert into "gst_ledger_mst"( "n_srno","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note","n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
      "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","c_eway_bill_no","c_port_code","n_cancel_flag" ) values
      ( "new_name"."n_srno","new_name"."d_inv_date","new_name"."c_cust_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
      '','',0,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_gst_cess_amt",
      0,"new_name"."n_disc_amt"+"new_name"."n_fix_discount",("new_name"."n_taxable_amt"),"new_name"."n_total","new_name"."d_ldate","new_name"."t_ltime","new_name"."c_user","new_name"."c_state_code","new_name"."n_service_chg","new_name"."n_flag",0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."c_eway_bill_no","new_name"."c_port_code","new_name"."n_cancel_flag" ) 
  end if;
  //add the transaction remark with transaction id
  insert into "remarks"( "c_prefix","c_chq_no","d_chq_dt","n_tran_id","c_remark" ) values
    ( "new_name"."c_prefix",null,null,"new_name"."n_srno","remark" ) ;
  //if any credit note is settled in invoice then add invoice id to the
  // crnt_mst
  if "new_name"."n_crnt_no" <> 0 then
    if "new_name"."c_crnt_prefix" = 'MD' then
      update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("mdadj_mst"."c_prefix" = "new_name"."c_crnt_prefix"
        and "mdadj_mst"."n_srno" = "new_name"."n_crnt_no")
        and "mdadj_mst"."c_inv_recp_prefix" is null
        and "mdadj_mst"."n_inv_recp_no" = 0
    else
      update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "crnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("crnt_mst"."c_prefix" = "new_name"."c_crnt_prefix"
        and "crnt_mst"."n_srno" = "new_name"."n_crnt_no")
        and "crnt_mst"."c_inv_recp_prefix" is null
        and "crnt_mst"."n_inv_recp_no" = 0
    end if;
    //if this credit not is already settled then will give error message 
    if sqlstate = '02000' then
      raiserror 18000 "Credit note is already settlled. You cannot Save this Invoice. "
    end if end if;
  -- Johnu 
  if "new_name"."n_dbnt_no" <> 0 and "new_name"."c_dbnt_prefix" = 'MB' then
    update "mdadj_dbnt_mst"
      set "mdadj_dbnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
      "mdadj_dbnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
      where "mdadj_dbnt_mst"."c_prefix" = "new_name"."c_dbnt_prefix"
      and "mdadj_dbnt_mst"."n_srno" = "new_name"."n_dbnt_no"
      and "mdadj_dbnt_mst"."c_inv_recp_prefix" is null
      and "mdadj_dbnt_mst"."n_inv_recp_no" = 0;
    if sqlstate = '02000' then
      raiserror 18000 "Debit note is already settled. You cannot Save this Invoice. "
    //if any debit note is settled in invoice then add invoice id to the dbnt_mst
    end if
  else if "new_name"."n_dbnt_no" <> 0 then
      update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "cust_dbnt"."n_inv_recp_no" = "new_name"."n_srno"
        where "cust_dbnt"."c_prefix" = "new_name"."c_dbnt_prefix"
        and "cust_dbnt"."n_srno" = "new_name"."n_dbnt_no"
        and "cust_dbnt"."c_inv_recp_prefix" is null
        and "cust_dbnt"."n_inv_recp_no" = 0;
      //if this debit not is already settled then will give error message 
      if sqlstate = '02000' then
        raiserror 18000 "Debit note is already settled. You cannot Save this Invoice. "
      end if end if end if; // ---------
  //if any advance note is settled in invoice then add invoice id to the
  // cust_advance
  if "new_name"."n_adv_no" <> 0 then
    if "new_name"."c_adv_prefix" = 'MV' then
      update "mdadj_adv_mst"
        set "mdadj_adv_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "mdadj_adv_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where "mdadj_adv_mst"."c_prefix" = "new_name"."c_adv_prefix"
        and "mdadj_adv_mst"."n_srno" = "new_name"."n_adv_no"
        and "mdadj_adv_mst"."c_inv_recp_prefix" is null
        and "mdadj_adv_mst"."n_inv_recp_no" = 0
    else
      update "cust_advance" set "cust_advance"."c_inv_prefix" = "new_name"."c_prefix",
        "cust_advance"."n_inv_no" = "new_name"."n_srno"
        where "cust_advance"."c_prefix" = "new_name"."c_adv_prefix"
        and "cust_advance"."n_srno" = "new_name"."n_adv_no"
        and "cust_advance"."c_inv_prefix" is null
        and "cust_advance"."n_inv_no" = 0
    end if;
    //if this advance not is already settled then will give error message 
    if sqlstate = '02000' then
      raiserror 18000 "Advance note is already settled. You cannot Save this Invoice. "
    end if end if;
  if "new_name"."n_order_no" <> 0 then
    update "ord_mst" set "ord_mst"."n_invno" = "new_name"."n_srno"
      where "ord_mst"."n_srno" = "new_name"."n_order_no"
  end if;
  // crnt_mst
  if "new_name"."n_crnt_repl_no" <> 0 then
    if "new_name"."c_crnt_repl_prefix" = 'MD' then
      update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("mdadj_mst"."c_prefix" = "new_name"."c_crnt_repl_prefix"
        and "mdadj_mst"."n_srno" = "new_name"."n_crnt_repl_no")
        and "mdadj_mst"."c_inv_recp_prefix" is null
        and "mdadj_mst"."n_inv_recp_no" = 0
    else
      update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "crnt_repl_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("crnt_repl_mst"."c_prefix" = "new_name"."c_crnt_repl_prefix"
        and "crnt_repl_mst"."n_srno" = "new_name"."n_crnt_repl_no")
        and "crnt_repl_mst"."c_inv_recp_prefix" is null
        and "crnt_repl_mst"."n_inv_recp_no" = 0
    end if;
    //if this credit not is already settled then will give error message 
    if sqlstate = '02000' then
      raiserror 18000 "Replacement Credit note is already settlled. You cannot Save this Invoice. "
    end if end if;
  insert into "invoice_print"( "c_prefix","n_srno","n_print" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",0 ) ;
  // update temp lock to lock 
  update "act_mst" set "n_auto_lock" = 1 where "act_mst"."c_code" = "new_name"."c_cust_code" and "n_auto_lock" = 2;
  if "new_name"."n_order_no" > 0 and "new_name"."n_pob" = 1 then
    insert into "invoice_mst_det"( "c_prefix","n_srno","c_tmp_name","c_tmp_add_1","c_tmp_add_2","c_tmp_add_3","c_tmp_city","c_tmp_pin","c_tmp_drug_licence_no_1","c_tmp_drug_licence_no_2","c_tmp_st_no","c_tmp_remark","c_tmp_other_info","c_lr_no","d_lr_dt","c_form_no","n_recd","c_case_no","n_cases","n_pob","c_pob_rep","c_pob_mfac_code","c_pob_rep_code" ) on existing skip(
      select "new_name"."c_prefix","new_name"."n_srno","c_tmp_name","c_tmp_add_1","c_tmp_add_2","c_tmp_add_3","c_tmp_city","c_tmp_pin","c_tmp_drug_licence_no_1","c_tmp_drug_licence_no_2","c_tmp_st_no","c_tmp_remark","c_tmp_other_info","c_lr_no","d_lr_dt","c_form_no","n_recd","c_case_no","n_cases","n_pob","c_pob_rep","c_pob_mfac_code","c_pob_rep_code" from "ord_mst_det" where "n_srno" = "new_name"."n_order_no" and "c_prefix" = 'S')
  end if;
  --Storetrack
  if "new_name"."n_store_track" = 2 and "new_name"."n_approve" = 1 then
    select top 1 "c_code" into "c_phase" from "st_phase_mst" where "n_rack_flag" = 1;
    insert into "st_track_mst"
      ( "c_br_code",
      "c_doc_no",
      "n_inout","c_phase_code","d_date",
      "c_user","c_system_name","c_system_ip","t_time_in","t_time_out",
      "n_complete","c_cust_code","c_order_id","n_urgent" ) values
      ( '000',
      '000/'+"string"("new_name"."c_year")+'/'+"string"("new_name"."c_prefix")+'/'+"string"("new_name"."n_srno"),
      0,"c_phase","new_name"."d_inv_date",
      "isNull"("new_name"."c_user",'3DS'),null,null,"new_name"."t_ltime",null,
      0,"new_name"."c_cust_code",null,0 ) 
  --Storetrack
  end if;
  if "new_name"."n_service_chg" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_service_act","new_name"."d_inv_date",
      -"new_name"."n_service_chg","account_code_is_cust" ) 
  end if;
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
    "n_srno1","n_amount","c_cust_code","d_date","d_due_date" ) values( "new_name"."c_year",
    "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
    "new_name"."n_total","new_name"."c_cust_code","new_name"."d_inv_date","new_name"."d_inv_date"+"new_name"."n_cr_days" ) ;
  call "usp_check_update_last_tran_info"(0,"new_name"."c_cust_code",11,"new_name"."c_prefix","new_name"."n_srno","new_name"."d_inv_date")
end;
CREATE TRIGGER "Insert_Ledger_From_Supl_Pay" before insert order 1
on "DBA".supp_pay
referencing new as new_name
for each row
begin
  declare s_credit_act_code char(6);
  if new_name.c_credit_act_code='CASH' then
    set s_credit_act_code='CASH'
  else
    set s_credit_act_code='RCPAYM'
  end if
  ;
  if new_name.n_total-new_name.n_chq_amt<>0 then
    insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
      new_name.c_prefix,new_name.n_srno,'KASAR',new_name.d_pay_date,
      new_name.n_chq_amt-new_name.n_total,new_name.c_supp_code)
  end if
  ;
  if new_name.n_total<>0 then
    insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
      new_name.c_prefix,new_name.n_srno,new_name.c_supp_code,new_name.d_pay_date,
      new_name.n_total,s_credit_act_code)
  end if
  ;
  if new_name.n_chq_amt<>0 then
    insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
      new_name.c_prefix,new_name.n_srno,s_credit_act_code,new_name.d_pay_date,
      -new_name.n_chq_amt,new_name.c_supp_code)
  end if
  ;
  insert into remarks(c_prefix,n_tran_id,c_chq_no,d_chq_dt,c_remark) values(
    new_name.c_prefix,new_name.n_srno,new_name.c_chq_no,new_name.d_chq_dt,new_name.c_remark)
end;
CREATE TRIGGER "insert_purchase_mst_dbnt_settle_det_into_dbnt_settle_mst_delete" after delete order 3
on "DBA".purchase_mst_dbnt_settle_det
referencing old as old_name
for each row
begin
  delete from dbnt_settle_mst where 
    dbnt_settle_mst.c_year = old_name.c_year and 
    dbnt_settle_mst.c_prefix = old_name.c_prefix and 
    dbnt_settle_mst.n_srno = old_name.n_srno and 
    dbnt_settle_mst.c_year1 = old_name.c_dbnt_year and 
    dbnt_settle_mst.c_prefix1 = old_name.c_dbnt_prefix and 
    dbnt_settle_mst.n_srno1 = old_name.n_dbnt_srno and 
    dbnt_settle_mst.c_supp_code = old_name.c_supp_code and 
    dbnt_settle_mst.c_reason_code = old_name.c_reason_code and
    dbnt_settle_mst.c_ref_no = old_name.c_ref_no;
end;
CREATE TRIGGER "insert_purchase_mst_dbnt_settle_det_into_dbnt_settle_mst_insert" after insert order 1
on "DBA".purchase_mst_dbnt_settle_det
referencing new as new_name
for each row
Begin

declare s_mfac_code char(6) ;
declare ledg_cnt numeric(3);
declare  s_credit_act_code char(6);

IF new_name.c_mfac_code is null then    
  select top 1 c_mfac_code  into s_mfac_code  from  dbnt_settle_mst  where dbnt_settle_mst.c_prefix=dbnt_settle_mst.c_prefix1 and 
                                                        dbnt_settle_mst.n_srno=dbnt_settle_mst.n_srno1 and 
                                                        dbnt_settle_mst.c_year=dbnt_settle_mst.c_year1 and 
                                                        dbnt_settle_mst.n_srno=new_name.n_dbnt_srno and 
                                                        dbnt_settle_mst.c_prefix=new_name.c_dbnt_prefix and 
                                                        dbnt_settle_mst.c_year=new_name.c_dbnt_year;
Else
    set s_mfac_code =new_name.c_mfac_code;
End if;
set s_credit_act_code ='-CLAIM';
print 'mfac : ' + s_mfac_code;
  insert into dbnt_settle_mst(c_year,c_prefix,n_srno,c_year1,c_prefix1,
    n_srno1,n_amount,c_supp_code,d_date,d_due_date,c_remark,c_ref_no,d_ref_dt,c_reason_code,c_mfac_code) 
    values(new_name.c_year,
    new_name.c_prefix,new_name.n_srno,new_name.c_dbnt_year,new_name.c_dbnt_prefix,new_name.n_dbnt_srno,
    -1 * (new_name.n_settle_amt+new_name.n_adj_amt),new_name.c_supp_code,new_name.d_date,new_name.d_date, new_name.c_settle_remark,
    new_name.c_ref_no,new_name.d_ref_dt,new_name.c_reason_code,s_mfac_code);
    
End;
CREATE TRIGGER "insert_purchase_mst_dbnt_settle_det_into_dbnt_settle_mst_update" after UPDATE order 1
on "DBA".purchase_mst_dbnt_settle_det
referencing old as old_name new as new_name
for each row
begin
declare s_mfac_code char(6) ;
 
  delete from dbnt_settle_mst where 
    dbnt_settle_mst.c_year = old_name.c_year and 
    dbnt_settle_mst.c_prefix = old_name.c_prefix and 
    dbnt_settle_mst.n_srno = old_name.n_srno and 
    dbnt_settle_mst.c_year1 = old_name.c_dbnt_year and 
    dbnt_settle_mst.c_prefix1 = old_name.c_dbnt_prefix and 
    dbnt_settle_mst.n_srno1 = old_name.n_dbnt_srno and 
    dbnt_settle_mst.c_supp_code = old_name.c_supp_code and
    dbnt_settle_mst.c_reason_code = old_name.c_reason_code and
    dbnt_settle_mst.c_ref_no = old_name.c_ref_no;
   
    IF new_name.c_mfac_code is null then    
        select top 1 c_mfac_code  into s_mfac_code  from  dbnt_settle_mst  where dbnt_settle_mst.c_prefix=dbnt_settle_mst.c_prefix1 and 
                                                        dbnt_settle_mst.n_srno=dbnt_settle_mst.n_srno1 and 
                                                        dbnt_settle_mst.c_year=dbnt_settle_mst.c_year1 and 
                                                        dbnt_settle_mst.n_srno=new_name.n_dbnt_srno and 
                                                        dbnt_settle_mst.c_prefix=new_name.c_dbnt_prefix and 
                                                        dbnt_settle_mst.c_year=new_name.c_dbnt_year;
    Else
        set s_mfac_code =new_name.c_mfac_code;
    End if;

  insert into dbnt_settle_mst(c_year,c_prefix,n_srno,c_year1,c_prefix1,
    n_srno1,n_amount,c_supp_code,d_date,d_due_date,c_remark,c_ref_no,d_ref_dt,c_reason_code,c_mfac_code) values(new_name.c_year,
    new_name.c_prefix,new_name.n_srno,new_name.c_dbnt_year,new_name.c_dbnt_prefix,new_name.n_dbnt_srno,
    -1 * (new_name.n_settle_amt+new_name.n_adj_amt),new_name.c_supp_code,new_name.d_date,new_name.d_date, new_name.c_settle_remark,new_name.c_ref_no,new_name.d_ref_dt,new_name.c_reason_code,s_mfac_code);
 
end;
CREATE TRIGGER "insert_pwd_history_from_user_pass_insert" after insert order 1 on
"dba"."user_pass"
referencing new as "new_name"
for each row
begin
  if "new_name"."n_year_end_flag" <> 1 then
    insert into "pwd_history"( "c_user_id","c_user_pass","d_ldate","t_ltime" ) values
      ( "new_name"."c_user_id","new_name"."c_user_pass","new_name"."d_ldate","new_name"."t_ltime" ) 
  end if
end;
CREATE TRIGGER "insert_settle_from_advance_note" after insert order 1 on
-----------------------------------
-----------------------------------
--purchase trigger end
--crnt Insert
--purchase trigger end
--crnt Insert
"DBA"."cust_advance"
referencing new as "new_name"
for each row
begin
  declare @new_c_year char(2);
  if "new_name"."n_yearend_flag" = 0 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
      "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
      -1*("new_name"."n_total"),"new_name"."c_cust_code","new_name"."d_adv_date","new_name"."d_adv_date",1 ) 
  end if
end;
CREATE TRIGGER "insert_settle_from_mdadj_adv_mst" after insert order 1 on
-----------------------------------
-----------------------------------
--purchase trigger end
--crnt Insert
--purchase trigger end
--crnt Insert
"DBA"."mdadj_adv_mst"
referencing new as "new_name"
for each row
begin
  if "new_name"."n_yearend_flag" = 0 then
    insert into "settle_mst_header"
      ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
      "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
      "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
      "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
      "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
      "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
      "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."d_mdadj_date","new_name"."c_cust_code",null,null,0,0,0,0,"new_name"."n_total",
      0,0,0,null,0,0,null,0,0,null,0,0,null,0,0,0,0,0,0,0,
      null,0,0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,0,0,null,null,
      0,null,null,null,0,0,null,0,null,0,0,
      0,0,null,null,null,0,0,0,null,null,0,
      "new_name"."c_remark","new_name"."n_settle_days",null,0,"new_name"."n_adj_type","new_name"."n_doc_type",0,null,
      "new_name"."c_act_code",7 ) ;
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
      "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
      -1*("new_name"."n_total"),"new_name"."c_cust_code","new_name"."d_mdadj_date","new_name"."d_mdadj_date",1 ) 
  end if
end;
CREATE TRIGGER "insert_settle_from_mdadj_dbnt_mst" after insert order 1 on
-----------------------------------
-----------------------------------
--purchase trigger end
--crnt Insert
--purchase trigger end
--crnt Insert
"DBA"."mdadj_dbnt_mst"
referencing new as "new_name"
for each row
begin
  if "new_name"."n_yearend_flag" = 0 then
    insert into "settle_mst_header"
      ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
      "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
      "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
      "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
      "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
      "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
      "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."d_mdadj_dbnt_date","new_name"."c_cust_code",null,null,0,0,0,0,"new_name"."n_total",
      0,0,0,null,0,0,null,0,0,null,0,0,null,0,0,0,0,0,0,0,
      null,0,0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,0,0,null,null,
      0,null,null,null,0,0,null,0,null,0,0,
      0,0,null,null,null,0,0,0,null,null,0,
      "new_name"."c_remark","new_name"."n_settle_days",null,0,"new_name"."n_adj_type","new_name"."n_doc_type",0,null,
      "new_name"."c_act_code",5 ) ;
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
      "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
      ("new_name"."n_total"),"new_name"."c_cust_code","new_name"."d_mdadj_dbnt_date","new_name"."d_mdadj_dbnt_date",1 ) 
  end if
end;
CREATE TRIGGER "insert_settle_from_mdadj_mst" after insert order 1 on
-----------------------------------
-----------------------------------
--purchase trigger end
--crnt Insert
--purchase trigger end
--crnt Insert
"DBA"."mdadj_mst"
referencing new as "new_name"
for each row
begin
  if "new_name"."n_yearend_flag" = 0 then
    insert into "settle_mst_header"
      ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
      "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
      "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
      "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
      "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
      "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
      "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."d_mdadj_date","new_name"."c_cust_code",null,null,0,0,0,0,"new_name"."n_total",
      0,0,0,null,0,0,null,0,0,null,0,0,null,0,0,0,0,0,0,0,
      null,0,0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,0,0,null,null,
      0,null,null,null,0,0,null,0,null,0,0,
      0,0,null,null,null,0,0,0,null,null,0,
      "new_name"."c_remark","new_name"."n_settle_days",null,0,"new_name"."n_adj_type","new_name"."n_doc_type",0,null,
      "new_name"."c_act_code",3 ) ;
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
      "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
      -1*("new_name"."n_total"),"new_name"."c_cust_code","new_name"."d_mdadj_date","new_name"."d_mdadj_date",1 ) 
  end if
end;
CREATE TRIGGER "insert_settle_mst" after insert order 1 on
"DBA"."settle_cust_rec_det"
referencing new as "new_name"
for each row
begin
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1","n_srno1","n_amount","c_cust_code","d_date","d_due_date","c_ref_no" ) values
    ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno","new_name"."c_year1","new_name"."c_prefix1","new_name"."n_srno1","new_name"."n_amount","new_name"."c_cust_code","new_name"."d_date","new_name"."d_due_date","new_name"."c_ref_no" ) 
end;
CREATE TRIGGER "insert_st_daywise_emp_performance_from_st_track_tray_time" after insert order 1 on
"DBA"."st_track_tray_time"
referencing new as "new_name"
for each row
begin
  declare @stage_grp_code char(6);
  declare "d_count" integer;
  declare "d_count_weekly" integer;
  declare "d_count_yearly" integer;
  if "new_name"."t_action_start_time" is null or "new_name"."t_action_end_time" is null or("Isnull"("new_name"."n_bounce_count",0)+"Isnull"("new_name"."n_pick_count",0) = 0) then
    return //if either of the time column null do not do anything 
  end if;
  select "c_stage_grp_code" into @stage_grp_code from "st_store_stage_mst" where "c_code" = "new_name"."c_stage_code";
  if @stage_grp_code is null then
    set @stage_grp_code = '-'
  end if;
  select "count"("c_stage_grp_code")
    into "d_count"
    from "st_daywise_emp_performance"
    where "c_user" = "new_name"."c_user"
    and "d_date" = cast("new_name"."t_time" as date)
    and "c_work_place" = "new_name"."c_work_place"
    and "c_stage_grp_code" = @stage_grp_code;
  if "d_count" = 0 then
    insert into "st_daywise_emp_performance"
      ( "d_date","c_stage_grp_code","c_work_place","c_user","n_avg_time_in_seconds","n_item_count" ) values
      ( cast("new_name"."t_time" as date),
      @stage_grp_code,
      "new_name"."c_work_place",
      "new_name"."c_user",
      "datediff"("second","new_name"."t_action_start_time","new_name"."t_action_end_time"),
      "Isnull"("new_name"."n_bounce_count",0)+"Isnull"("new_name"."n_pick_count",0) ) 
  else
    print "now"();
    print 'insert trigger start of update statment';
    update
      "st_daywise_emp_performance"
      set "n_avg_time_in_seconds" = "n_avg_time_in_seconds"+"datediff"("second","new_name"."t_action_start_time","new_name"."t_action_end_time"),
      "n_item_count" = "n_item_count"+"Isnull"("new_name"."n_bounce_count",0)+"Isnull"("new_name"."n_pick_count",0)
      where "c_user" = "new_name"."c_user"
      and "d_date" = cast("new_name"."t_time" as date)
      and "c_work_place" = "new_name"."c_work_place"
      and "c_stage_grp_code" = @stage_grp_code
  end if;
  // weekly tray time Calcualtions  
  select "count"("c_stage_grp_code")
    into "d_count_weekly"
    from "st_weekly_emp_performance"
    where "c_user" = "new_name"."c_user"
    and "n_week_number" = "datepart"("week",cast("new_name"."t_time" as date))
    and "c_work_place" = "new_name"."c_work_place"
    and "c_stage_grp_code" = @stage_grp_code;
  if "d_count_weekly" = 0 then
    insert into "st_weekly_emp_performance"
      ( "d_from_date","n_week_number","c_stage_grp_code","c_work_place","c_user","n_avg_time_in_seconds","n_item_count" ) values
      ( cast("new_name"."t_time" as date),
      "datepart"("week",cast("new_name"."t_time" as date)),
      @stage_grp_code,
      "new_name"."c_work_place",
      "new_name"."c_user",
      "datediff"("second","new_name"."t_action_start_time","new_name"."t_action_end_time"),
      "Isnull"("new_name"."n_bounce_count",0)+"Isnull"("new_name"."n_pick_count",0) ) 
  else
    update
      "st_weekly_emp_performance"
      set "n_avg_time_in_seconds" = "n_avg_time_in_seconds"+"datediff"("second","new_name"."t_action_start_time","new_name"."t_action_end_time"),
      "n_item_count" = "n_item_count"+"Isnull"("new_name"."n_bounce_count",0)+"Isnull"("new_name"."n_pick_count",0)
      where "c_user" = "new_name"."c_user"
      and "n_week_number" = "datepart"("week",cast("new_name"."t_time" as date))
      and "c_work_place" = "new_name"."c_work_place"
      and "c_stage_grp_code" = @stage_grp_code
  end if;
  // yearly wise calcualtions 
  select "count"("c_stage_grp_code")
    into "d_count_yearly"
    from "st_emp_peformance"
    where "c_user" = "new_name"."c_user"
    and "c_work_place" = "new_name"."c_work_place"
    and "c_stage_grp_code" = @stage_grp_code;
  if "d_count_yearly" = 0 then
    insert into "st_emp_peformance"
      ( "c_stage_grp_code","c_work_place","c_user","n_avg_time_in_seconds","n_item_count" ) values
      ( @stage_grp_code,
      "new_name"."c_work_place",
      "new_name"."c_user",
      "datediff"("second","new_name"."t_action_start_time","new_name"."t_action_end_time"),
      "Isnull"("new_name"."n_bounce_count",0)+"Isnull"("new_name"."n_pick_count",0) ) 
  else
    update
      "st_emp_peformance"
      set "n_avg_time_in_seconds" = "n_avg_time_in_seconds"+"datediff"("second","new_name"."t_action_start_time","new_name"."t_action_end_time"),
      "n_item_count" = "n_item_count"+"Isnull"("new_name"."n_bounce_count",0)+"Isnull"("new_name"."n_pick_count",0)
      where "c_user" = "new_name"."c_user"
      and "c_work_place" = "new_name"."c_work_place"
      and "c_stage_grp_code" = @stage_grp_code
  end if
end;
CREATE TRIGGER "insert_st_daywise_emp_performance_from_st_track_tray_time_on_update" before update order 1 on
"DBA"."st_track_tray_time"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @stage_grp_code char(6);
  declare "d_count" integer;
  declare "d_count_weekly" integer;
  declare "d_count_yearly" integer;
  if "new_name"."t_action_start_time" is null or "new_name"."t_action_end_time" is null
    or("Isnull"("new_name"."n_bounce_count",0)+"Isnull"("new_name"."n_pick_count",0) = 0) then
    return //if either of the time column null do not do anything 
  end if;
  if "old_name"."t_action_end_time" is not null then
    return
  end if;
  select "c_stage_grp_code" into @stage_grp_code from "st_store_stage_mst" where "c_code" = "new_name"."c_stage_code";
  if @stage_grp_code is null then
    set @stage_grp_code = '-'
  end if;
  select "count"("c_stage_grp_code")
    into "d_count"
    from "st_daywise_emp_performance"
    where "c_user" = "new_name"."c_user"
    and "d_date" = cast("new_name"."t_time" as date)
    and "c_work_place" = "new_name"."c_work_place"
    and "c_stage_grp_code" = @stage_grp_code;
  if "d_count" = 0 then
    insert into "st_daywise_emp_performance"
      ( "d_date","c_stage_grp_code","c_work_place","c_user","n_avg_time_in_seconds","n_item_count" ) values
      ( cast("new_name"."t_time" as date),
      @stage_grp_code,
      "new_name"."c_work_place",
      "new_name"."c_user",
      "datediff"("second","new_name"."t_action_start_time","new_name"."t_action_end_time"),
      "Isnull"("new_name"."n_bounce_count",0)+"Isnull"("new_name"."n_pick_count",0) ) 
  else
    update
      "st_daywise_emp_performance"
      set "n_avg_time_in_seconds" = "n_avg_time_in_seconds"+"datediff"("second","new_name"."t_action_start_time","new_name"."t_action_end_time"),
      "n_item_count" = "n_item_count"+"Isnull"("new_name"."n_bounce_count",0)+"Isnull"("new_name"."n_pick_count",0)
      --"n_item_count" = "Isnull"("new_name"."n_bounce_count",0)+"Isnull"("new_name"."n_pick_count",0)
      where "c_user" = "new_name"."c_user"
      and "d_date" = cast("new_name"."t_time" as date)
      and "c_work_place" = "new_name"."c_work_place"
      and "c_stage_grp_code" = @stage_grp_code
  end if;
  // weekly tray time Calcualtions  
  select "count"("c_stage_grp_code")
    into "d_count_weekly"
    from "st_weekly_emp_performance"
    where "c_user" = "new_name"."c_user"
    and "n_week_number" = "datepart"("week",cast("new_name"."t_time" as date))
    and "c_work_place" = "new_name"."c_work_place"
    and "c_stage_grp_code" = @stage_grp_code;
  if "d_count_weekly" = 0 then
    insert into "st_weekly_emp_performance"
      ( "d_from_date","n_week_number","c_stage_grp_code","c_work_place","c_user","n_avg_time_in_seconds","n_item_count" ) values
      ( cast("new_name"."t_time" as date),
      "datepart"("week",cast("new_name"."t_time" as date)),
      @stage_grp_code,
      "new_name"."c_work_place",
      "new_name"."c_user",
      "datediff"("second","new_name"."t_action_start_time","new_name"."t_action_end_time"),
      "Isnull"("new_name"."n_bounce_count",0)+"Isnull"("new_name"."n_pick_count",0) ) 
  else
    update
      "st_weekly_emp_performance"
      set "n_avg_time_in_seconds" = "n_avg_time_in_seconds"+"datediff"("second","new_name"."t_action_start_time","new_name"."t_action_end_time"),
      "n_item_count" = "n_item_count"+"Isnull"("new_name"."n_bounce_count",0)+"Isnull"("new_name"."n_pick_count",0)
      where "c_user" = "new_name"."c_user"
      and "n_week_number" = "datepart"("week",cast("new_name"."t_time" as date))
      and "c_work_place" = "new_name"."c_work_place"
      and "c_stage_grp_code" = @stage_grp_code
  end if;
  // yearly wise calcualtions 
  select "count"("c_stage_grp_code")
    into "d_count_yearly"
    from "st_emp_peformance"
    where "c_user" = "new_name"."c_user"
    and "c_work_place" = "new_name"."c_work_place"
    and "c_stage_grp_code" = @stage_grp_code;
  if "d_count_yearly" = 0 then
    insert into "st_emp_peformance"
      ( "c_stage_grp_code","c_work_place","c_user","n_avg_time_in_seconds","n_item_count" ) values
      ( @stage_grp_code,
      "new_name"."c_work_place",
      "new_name"."c_user",
      "datediff"("second","new_name"."t_action_start_time","new_name"."t_action_end_time"),
      "Isnull"("new_name"."n_bounce_count",0)+"Isnull"("new_name"."n_pick_count",0) ) 
  else
    update
      "st_emp_peformance"
      set "n_avg_time_in_seconds" = "n_avg_time_in_seconds"+"datediff"("second","new_name"."t_action_start_time","new_name"."t_action_end_time"),
      "n_item_count" = "n_item_count"+"Isnull"("new_name"."n_bounce_count",0)+"Isnull"("new_name"."n_pick_count",0)
      where "c_user" = "new_name"."c_user"
      and "c_work_place" = "new_name"."c_work_place"
      and "c_stage_grp_code" = @stage_grp_code
  end if
end;
CREATE TRIGGER "insert_st_track_mst_from_inv_summary_list_mst" after insert order 1 on
"DBA"."inv_summary_list_mst"
referencing new as "new_name"
for each row
begin
  declare "br_code" char(6);
  declare "c_phase" char(10);
  --Storetrack
  if "new_name"."n_store_track" = 2 and "new_name"."n_approved" = 1 then
    select top 1 "c_code" into "c_phase" from "st_phase_mst" where "n_rack_flag" = 1;
    select "uf_get_br_code"('000') into "br_code" from "dummy";
    insert into "st_track_mst"
      ( "c_br_code",
      "c_doc_no",
      "n_inout","c_phase_code","d_date",
      "c_user","c_system_name","c_system_ip","t_time_in","t_time_out",
      "n_complete","c_cust_code","c_order_id","n_urgent" ) values
      ( "br_code",
      "br_code"+'/'+"string"("new_name"."c_year")+'/'+"string"("new_name"."c_prefix")+'/'+"string"("new_name"."n_srno"),
      0,"c_phase","new_name"."d_date",
      "isNull"("new_name"."c_user",'3DS'),null,null,"new_name"."t_ltime",null,
      0,'',null,"new_name"."n_urgent" ) 
  --Storetrack
  end if
end;
CREATE TRIGGER "insert_st_track_mst_from_order_mst_insert" before insert order 1 on
"DBA"."ord_mst"
referencing new as "new_name"
for each row
begin
  declare "c_phase" char(6);
  if "new_name"."n_store_track" = 2 and "new_name"."n_approve" = 1 then
    select top 1 "c_code" into "c_phase" from "st_phase_mst" where "n_rack_flag" = 1;
    insert into "st_track_mst"
      ( "c_br_code","c_doc_no","n_inout","c_phase_code","c_cust_code",
      "d_date","c_user","c_system_name","c_system_ip","t_time_in",
      "t_time_out","n_complete","n_confirm","n_urgent","c_sort",
      "c_user_2","c_order_id","n_hold","c_note","c_dc_div",
      "t_confirm_time",
      "c_confirm_user" ) values
      ( '000',
      '000/'+"string"("new_name"."c_year")+'/'+"string"("new_name"."c_prefix")+'/'+"string"("new_name"."n_srno"),0,"c_phase","new_name"."c_cust_code",
      "new_name"."d_date","isNull"("new_name"."c_user",'3DS'),null,null,"isnull"("new_name"."t_ltime","now"()),
      null,0,0,"new_name"."n_urgent",null,
      null,null,0,null,null,
      null,null ) 
  end if;
  call "usp_check_update_last_tran_info"(0,"new_name"."c_cust_code",17,"new_name"."c_prefix","new_name"."n_srno","new_name"."d_date")
end;
CREATE TRIGGER "insert_st_track_mst_on_order_mst_update" before update order 1 on
"DBA"."ord_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "c_phase" char(6);
  //store track master updation
  if "new_name"."n_store_track" = 2 and "old_name"."n_approve" = 0 and "new_name"."n_approve" = 1 then
    select top 1 "c_code" into "c_phase" from "st_phase_mst" where "n_rack_flag" = 1;
    insert into "st_track_mst"
      ( "c_br_code","c_doc_no","n_inout","c_phase_code","c_cust_code",
      "d_date","c_user","c_system_name","c_system_ip","t_time_in",
      "t_time_out","n_complete","n_confirm","n_urgent","c_sort",
      "c_user_2","c_order_id","n_hold","c_note","c_dc_div",
      "t_confirm_time",
      "c_confirm_user" ) values
      ( '000',
      '000/'+"string"("new_name"."c_year")+'/'+"string"("new_name"."c_prefix")+'/'+"string"("new_name"."n_srno"),0,"c_phase","new_name"."c_cust_code",
      "new_name"."d_date","isNull"("new_name"."c_user",'3DS'),null,null,"new_name"."t_ltime",
      null,0,0,"new_name"."n_urgent",null,
      null,null,0,null,null,
      null,null ) 
  end if
end;
CREATE TRIGGER "insert_st_trck_det_from_st_track_mst_update" before update order 1 on
--------------------------------------------------------------------------------------------------------------------------------
"DBA"."st_track_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @split_to_godown numeric(1);
  declare @dummy_qty numeric(3);
  declare @store_code char(6);
  declare @store_enable_storetrack numeric(1);
  declare @cnt_pick_start_rack_grp numeric(9);
  declare @pick_start_rack_grp char(6);
  declare @cnt_pick_start_rack_grp_list char(1000);
  declare @max_seq numeric(5);
  declare @min_pos_seq numeric(5);
  declare @doc_min_pos_seq numeric(5);
  declare "s_br_code" char(6);
  declare @brcode char(6);
  declare "s_first_stge_code" char(6);
  declare "s_first_rack_grp_code" char(6);
  declare "s_year" char(2);
  declare "s_prefix" char(4);
  declare @c_tray_code char(6);
  declare "d_srno" numeric(18);
  declare "pos" numeric(6);
  declare @tray_assignment_active numeric(1);
  declare @n_enable_auto_pick numeric(1);
  declare "str" char(50);
  declare @first_rack_grp,@first_stage char(6);
  declare @stage_exit numeric(1);
  -- For Multi tray exit dummy item insertion 
  declare local temporary table
    "temp_pos_seq"(
    "c_stage_code" char(6) null,
    "n_pos_seq" numeric(4) null,) on commit preserve rows;
  declare local temporary table
    "temp_tray_assignment_seq"(
    "c_stage_code" char(6) null,
    "n_pos_seq" numeric(4) null,) on commit preserve rows;
  declare @fast_tracking_picking_flag numeric(1);
  select "isnull"("n_active",0) into @fast_tracking_picking_flag from "st_track_module_mst" where "c_code" = 'M00058';
  if @fast_tracking_picking_flag is null or @fast_tracking_picking_flag = '' then
    set @fast_tracking_picking_flag = 0
  end if;
  if "new_name"."n_inout" = 0 then
    set "str" = "new_name"."c_doc_no";
    set "pos" = "charindex"('/',"str");
    set "s_br_code" = "left"("str","pos"-1);
    --print(s_br_code);
    --15/O/1111
    set "str" = "substring"("str","pos"+1);
    set "pos" = "charindex"('/',"str");
    set "s_year" = "left"("str","pos"-1);
    --print(s_year);
    --O/1111
    set "str" = "substring"("str","pos"+1);
    set "pos" = "charindex"('/',"str");
    set "s_prefix" = "left"("str","pos"-1);
    --print(s_prefix);
    set "d_srno" = "substring"("str","pos"+1);
    set "str" = "s_prefix"
  --print(d_srno);
  end if;
  select "c_br_code" into @brcode from "System_Parameter";
  select "n_active" into @tray_assignment_active from "st_track_module_mst" where "c_code" = 'M00048';
  select "c_store_code","isnull"("n_enable_store_track",0) into @store_code,@store_enable_storetrack
    from "invoice_mst" join "store_mst" on "invoice_mst"."c_store_code" = "store_mst"."c_code"
    where "invoice_mst"."c_year" = "s_year"
    and "invoice_mst"."c_prefix" = "s_prefix"
    and "invoice_mst"."n_srno" = "d_srno";
  if @tray_assignment_active = 0 then
    if "old_name"."n_confirm" = 0 and "new_name"."n_confirm" = 1 then
      --SO Insertion 
      if "left"("s_prefix",1) = 'S' then
        --        print 'IN1';
        insert into "st_track_det"
          ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq",
          "n_qty","n_sch_qty","n_bal_qty","c_note","c_rack",
          "c_rack_grp_code","c_stage_code",
          "n_complete","c_reason_code","n_hold_flag",
          "c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2",
          "d_ldate",
          "t_ltime","n_scheme_disc","n_schm_qty_2_schm_disc" ) 
          select @brcode+'/'+"c_year"+'/'+"c_prefix"+'/'+"string"("n_srno"),0,"c_item_code","c_batch_no","n_seq",
            "n_qty"+"isnull"("n_scheme_qty",0),"isnull"("n_scheme_qty",0),"n_qty"+"isnull"("n_scheme_qty",0),null,"item_mst"."c_rack_code",
            "rack_mst"."c_group",(select "max"("c_stage_code") from "st_store_stage_det" where "st_store_stage_det"."c_rack_grp_code" = "rack_mst"."c_group"),
            0,'-',1,
            null,null,'-',null,null,
            "today"(),"now"(),"n_scheme_disc","n_schm_qty_2_schm_disc"
            from "ord_det"
              join "item_mst" on "item_mst"."c_code" = "ord_det"."c_item_code"
              join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
            where("ord_det"."c_year" = "s_year")
            and("ord_det"."c_prefix" = "s_prefix")
            and("ord_det"."n_srno" = "d_srno")
            and("ord_det"."n_store_track" = 2)
            and("ord_det"."n_approve" = 1)
            and("left"("s_prefix",1) = 'S')
      end if;
      if "left"("s_prefix",1) = 'M' then
        select "c_store_code","isnull"("n_enable_store_track",0) into @store_code,@store_enable_storetrack
          from "dc_mst" join "store_mst" on "dc_mst"."c_store_code" = "store_mst"."c_code"
          where "dc_mst"."c_year" = "s_year"
          and "dc_mst"."c_prefix" = "s_prefix"
          and "dc_mst"."n_srno" = "d_srno";
        select "c_menu_id" into @dummy_qty from "st_track_module_mst" where "c_code" = 'M00047';
        --DC Insertion 
        --        print 'IN2';
        insert into "st_track_det"
          ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq",
          "n_qty","n_sch_qty","n_bal_qty","c_note","c_rack",
          "c_rack_grp_code","c_stage_code",
          "n_complete","c_reason_code","n_hold_flag",
          "c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2",
          "d_ldate","t_ltime","n_scheme_disc","n_schm_qty_2_schm_disc",
          "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_parent_item_seq" ) 
          select @brcode+'/'+"dc_mst"."c_year"+'/'+"dc_mst"."c_prefix"+'/'+"string"("dc_det"."n_srno"),0,"c_item_code","c_batch_no","dc_det"."n_seq",
            "dc_det"."n_qty"+"isnull"("dc_det"."n_scheme_qty",0),"isnull"("dc_det"."n_scheme_qty",0),"dc_det"."n_qty"+"isnull"("dc_det"."n_scheme_qty",0),null,"item_mst"."c_rack_code",
            "rack_mst"."c_group",(select "max"("c_stage_code") from "st_store_stage_det" where "st_store_stage_det"."c_rack_grp_code" = "rack_mst"."c_group"),
            0,'-',0,
            null,null,'-',null,null,
            "today"(),"now"(),"n_scheme_disc","n_schm_qty_2_schm_disc",
            "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_parent_item_seq"
            from "dc_det" join "dc_mst" on "dc_mst"."n_srno" = "dc_det"."n_srno"
              join "item_mst" on "item_mst"."c_code" = "dc_det"."c_item_code"
              join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
            where("dc_mst"."c_year" = "s_year")
            and("dc_mst"."c_prefix" = "s_prefix")
            and("dc_det"."n_srno" = "d_srno")
            and("dc_det"."n_store_track" = 2)
            and("dc_det"."n_approve" = 1)
            and("left"("s_prefix",1) = 'M')
      end if;
      // todo_vinay
      if "s_prefix" = 'IS' then
        select top 1 "invoice_mst"."c_store_code","isnull"("n_enable_store_track",0) into @store_code,@store_enable_storetrack
          from "inv_summary_list_det" as "isd"
            join "inv_summary_list_mst" as "ism" on "ism"."n_srno" = "isd"."n_srno"
            join "invoice_mst" on "invoice_mst"."n_srno" = "n_inv_no"
            join "invoice_det" on "invoice_det"."n_srno" = "invoice_mst"."n_srno"
            join "store_mst" on "invoice_mst"."c_store_code" = "store_mst"."c_code"
          where "ism"."c_year" = "s_year"
          and "ism"."c_prefix" = "s_prefix"
          and "ism"."n_srno" = "d_srno"
          order by "n_enable_store_track" desc;
        --DC Insertion 
        --        print 'IN3';
        insert into "st_track_det"
          ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq",
          "n_qty","n_sch_qty","n_bal_qty","c_note","c_rack",
          "c_rack_grp_code","c_stage_code",
          "n_complete","c_reason_code","n_hold_flag",
          "c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2",
          "d_ldate",
          "t_ltime","n_scheme_disc","n_schm_qty_2_schm_disc",
          "n_ref_srno","c_ref_doc_no",
          "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc" ) 
          select @brcode+'/'+"ism"."c_year"+'/'+"ism"."c_prefix"+'/'+"string"("ism"."n_srno"),0,"c_item_code","c_batch_no","string"("isd"."n_seq")+'000'+"string"("invoice_det"."n_seq"),
            "invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),"isnull"("invoice_det"."n_scheme_qty",0),"invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),null,"item_mst"."c_rack_code",
            "rack_mst"."c_group",(select "max"("c_stage_code") from "st_store_stage_det" where "st_store_stage_det"."c_rack_grp_code" = "rack_mst"."c_group"),
            0,'-',0,
            null,null,'-',null,null,
            "today"(),
            "now"(),"n_scheme_disc","n_schm_qty_2_schm_disc",
            "isd"."n_inv_no",@brcode+'/'+"ism"."c_year"+'/'+"isd"."c_inv_prefix"+'/'+"string"("isd"."n_inv_no"),
            "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc"
            from "inv_summary_list_det" as "isd"
              join "inv_summary_list_mst" as "ism" on "ism"."n_srno" = "isd"."n_srno"
              join "invoice_mst" on "invoice_mst"."n_srno" = "n_inv_no"
              join "invoice_det" on "invoice_det"."n_srno" = "invoice_mst"."n_srno"
              join "item_mst" on "item_mst"."c_code" = "invoice_det"."c_item_code"
              join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
            where("ism"."c_year" = "s_year")
            and("ism"."c_prefix" = "s_prefix")
            and("ism"."n_srno" = "d_srno")
            and("ism"."n_store_track" = 2)
            and("ism"."n_approved" = 1)
            and("s_prefix" = 'IS')
      end if;
      if("s_prefix" = '02') then
        insert into "st_track_det"
          ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq",
          "n_qty","n_sch_qty","n_bal_qty","c_note","c_rack",
          "c_rack_grp_code","c_stage_code",
          "n_complete","c_reason_code","n_hold_flag",
          "c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2",
          "d_ldate","t_ltime","n_scheme_disc","n_schm_qty_2_schm_disc",
          "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_parent_item_seq" ) 
          select @brcode+'/'+"godown_tran_mst"."c_year"+'/'+"godown_tran_mst"."c_prefix"+'/'+"string"("godown_tran_det"."n_srno"),0,"c_item_code","c_batch_no","godown_tran_det"."n_seq",
            "godown_tran_det"."n_request_qty",0,"godown_tran_det"."n_request_qty",null,"item_mst"."c_godown_rack_code",
            "rack_mst"."c_group",(select "max"("c_stage_code") from "st_store_stage_det" where "st_store_stage_det"."c_rack_grp_code" = "rack_mst"."c_group"),
            0,'-',0,
            null,null,"GODOWN_TRAN_MST"."C_GODOWN_TO_CODE",null,null,
            "today"(),"now"(),0,0,
            0,0,0,0
            from "godown_tran_det" join "godown_tran_mst" on "godown_tran_mst"."n_srno" = "godown_tran_det"."n_srno"
              join "item_mst" on "item_mst"."c_code" = "godown_tran_det"."c_item_code"
              join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_godown_rack_code"
            where("godown_tran_mst"."c_year" = "s_year")
            and("godown_tran_mst"."c_prefix" = "s_prefix")
            and("godown_tran_det"."n_srno" = "d_srno")
            and("godown_tran_det"."n_store_track" = 2)
            and("godown_tran_det"."n_approved" = 1)
            and("s_prefix" = '02')
      end if;
      if "left"("s_prefix",1) = 'I' and @store_enable_storetrack = 1 then
        -- select n_active,* from st_track_module_mst where c_code = 'M00044';
        select "n_active" into @split_to_godown from "st_track_module_mst" where "c_code" = 'M00044';
        select "c_menu_id" into @dummy_qty from "st_track_module_mst" where "c_code" = 'M00047';
        if @split_to_godown = 0 then
          --          print 'IN4';
          insert into "st_track_det"
            ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq",
            "n_qty","n_sch_qty","n_bal_qty","c_note","c_rack",
            "c_rack_grp_code","c_stage_code",
            "n_complete","c_reason_code","n_hold_flag",
            "c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2",
            "d_ldate",
            "t_ltime",
            "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv" ) 
            select @brcode+'/'+"invoice_mst"."c_year"+'/'+"invoice_mst"."c_prefix"+'/'+"string"("invoice_det"."n_srno"),0,
              "invoice_det"."c_item_code","invoice_det"."c_batch_no","invoice_det"."n_seq",
              "invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),
              "isnull"("invoice_det"."n_scheme_qty",0),"invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),null,"item_mst"."c_rack_code",
              "rack_mst"."c_group",
              "st_store_stage_mst"."c_code",
              0,'-',0,
              null,null,
              "st_store_stage_mst"."c_godown_code",
              null,null,
              "today"(),"now"(),
              "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","isnull"("n_parent_item_seq",0),"isnull"("n_from_ord_inv",0)
              from "invoice_det" join "invoice_mst" on "invoice_mst"."n_srno" = "invoice_det"."n_srno"
                join "stock" on "stock"."c_item_code" = "invoice_det"."c_item_code"
                and "stock"."c_batch_no" = "invoice_det"."c_batch_no"
                join "item_mst" on "item_mst"."c_code" = "invoice_det"."c_item_code"
                join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
                join "rack_group_mst" on "rack_group_mst"."c_code" = "rack_mst"."c_group"
                join "st_store_stage_det" on "st_store_stage_det"."c_rack_grp_code" = "rack_group_mst"."c_code"
                join "st_store_stage_mst" on "st_store_stage_mst"."c_br_code" = "st_store_stage_det"."c_br_code"
                and "st_store_stage_mst"."c_code" = "st_store_stage_det"."c_stage_code"
              where("invoice_mst"."c_year" = "s_year")
              and("invoice_mst"."c_prefix" = "s_prefix")
              and("invoice_det"."n_srno" = "d_srno")
              and("invoice_det"."n_store_track" = 2)
              and("left"("s_prefix",1) = 'I')
        else
          --          print 'IN5';
          insert into "st_track_det"
            ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq",
            "n_qty","n_sch_qty","n_bal_qty","c_note","c_rack",
            "c_rack_grp_code","c_stage_code",
            "n_complete","c_reason_code","n_hold_flag",
            "c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2",
            "d_ldate",
            "t_ltime",
            "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv" ) 
            select @brcode+'/'+"invoice_mst"."c_year"+'/'+"invoice_mst"."c_prefix"+'/'+"string"("invoice_det"."n_srno"),0,
              "invoice_det"."c_item_code","invoice_det"."c_batch_no","invoice_det"."n_seq",
              "invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),
              "isnull"("invoice_det"."n_scheme_qty",0),"invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),null,"item_mst"."c_rack_code",
              "rack_mst"."c_group",
              "st_store_stage_mst"."c_code",
              0,'-',0,
              null,null,
              "st_store_stage_mst"."c_godown_code",
              null,null,
              "today"(),"now"(),
              "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","isnull"("n_parent_item_seq",0),"isnull"("n_from_ord_inv",0)
              from "invoice_det" join "invoice_mst" on "invoice_mst"."n_srno" = "invoice_det"."n_srno"
                join "stock" on "stock"."c_item_code" = "invoice_det"."c_item_code"
                and "stock"."c_batch_no" = "invoice_det"."c_batch_no"
                join "item_mst" on "item_mst"."c_code" = "invoice_det"."c_item_code"
                join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
                join "rack_group_mst" on "rack_group_mst"."c_code" = "rack_mst"."c_group"
                join "st_store_stage_det" on "st_store_stage_det"."c_rack_grp_code" = "rack_group_mst"."c_code"
                join "st_store_stage_mst" on "st_store_stage_mst"."c_br_code" = "st_store_stage_det"."c_br_code"
                and "st_store_stage_mst"."c_code" = "st_store_stage_det"."c_stage_code"
              where("invoice_mst"."c_year" = "s_year")
              and("invoice_mst"."c_prefix" = "s_prefix")
              and("invoice_det"."n_srno" = "d_srno")
              and("invoice_det"."n_store_track" = 2)
              and("left"("s_prefix",1) = 'I')
              and("item_mst"."c_godown_rack_code" = 'UNSURE'
              or("invoice_det"."n_qty"+"invoice_det"."n_scheme_qty")
               <= (("stock"."n_balance_qty"+"invoice_det"."n_qty"+"invoice_det"."n_scheme_qty")-"stock"."n_godown_qty")
              or "stock"."n_godown_qty" < ("invoice_det"."n_qty"+"invoice_det"."n_scheme_qty"));
          --          print 'IN6';
          insert into "st_track_det"
            ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq",
            "n_qty","n_sch_qty","n_bal_qty","c_note","c_rack",
            "c_rack_grp_code","c_stage_code",
            "n_complete","c_reason_code","n_hold_flag",
            "c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2",
            "d_ldate",
            "t_ltime",
            "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv" ) 
            select @brcode+'/'+"invoice_mst"."c_year"+'/'+"invoice_mst"."c_prefix"+'/'+"string"("invoice_det"."n_srno"),0,
              "invoice_det"."c_item_code","invoice_det"."c_batch_no","invoice_det"."n_seq",
              "invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),
              "isnull"("invoice_det"."n_scheme_qty",0),"invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),null,
              "item_mst"."c_godown_rack_code",
              "rack_mst"."c_group",
              "st_store_stage_mst"."c_code",
              0,'-',0,
              null,null,
              "st_store_stage_mst"."c_godown_code",
              null,null,
              "today"(),"now"(),
              "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","isnull"("n_parent_item_seq",0),"isnull"("n_from_ord_inv",0)
              from "invoice_det" join "invoice_mst" on "invoice_mst"."n_srno" = "invoice_det"."n_srno"
                join "stock" on "stock"."c_item_code" = "invoice_det"."c_item_code"
                and "stock"."c_batch_no" = "invoice_det"."c_batch_no"
                join "item_mst" on "item_mst"."c_code" = "invoice_det"."c_item_code"
                join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_godown_rack_code"
                join "rack_group_mst" on "rack_group_mst"."c_code" = "rack_mst"."c_group"
                join "st_store_stage_det" on "st_store_stage_det"."c_rack_grp_code" = "rack_group_mst"."c_code"
                join "st_store_stage_mst" on "st_store_stage_mst"."c_br_code" = "st_store_stage_det"."c_br_code"
                and "st_store_stage_mst"."c_code" = "st_store_stage_det"."c_stage_code"
              where("invoice_mst"."c_year" = "s_year")
              and("invoice_mst"."c_prefix" = "s_prefix")
              and("invoice_det"."n_srno" = "d_srno")
              and("invoice_det"."n_store_track" = 2)
              and("left"("s_prefix",1) = 'I')
              and("item_mst"."c_godown_rack_code" <> 'UNSURE'
              and("invoice_det"."n_qty"+"invoice_det"."n_scheme_qty")
               > (("stock"."n_balance_qty"+"invoice_det"."n_qty"+"invoice_det"."n_scheme_qty")-"stock"."n_godown_qty")
              and("invoice_det"."n_qty"+"invoice_det"."n_scheme_qty") < "stock"."n_godown_qty")
        end if end if;
      //Inserting one record for manual Rack Group
      if @store_enable_storetrack = 1 then
        select top 1 "c_rack_grp_code" into @pick_start_rack_grp from "st_store_stage_det" join "st_store_stage_mst" on "st_store_stage_mst"."c_code" = "st_store_stage_det"."c_stage_code"
            left outer join "manual_rack_group" on "manual_rack_group"."c_stage_code" = "st_store_stage_det"."c_stage_code"
            and "manual_rack_group"."c_rack_code" = "st_store_stage_det"."c_rack_grp_code"
          where "st_store_stage_mst"."c_godown_code" = '-'
          and "manual_rack_group"."c_rack_code" is null
          order by "st_store_stage_det"."n_pos_seq" asc;
        select "count"("c_group")
          into @cnt_pick_start_rack_grp from "invoice_det" join "invoice_mst" on "invoice_mst"."n_srno" = "invoice_det"."n_srno"
            join "item_mst" on "item_mst"."c_code" = "invoice_det"."c_item_code"
            join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
          where("invoice_mst"."c_year" = "s_year")
          and("invoice_mst"."c_prefix" = "s_prefix")
          and("invoice_det"."n_srno" = "d_srno")
          and "c_group" in( @pick_start_rack_grp ) ;
        --   if @cnt_pick_start_rack_grp = 0 then
        insert into "temp_pos_seq"
          select "st_store_stage_det"."c_stage_code",
            "min"("st_store_stage_det"."n_pos_seq")
            from "st_store_stage_det" left outer join "st_track_det"
              on "st_store_stage_det"."c_stage_code" = "st_track_det"."c_stage_code"
              and "st_store_stage_det"."c_rack_grp_code" = "st_track_det"."c_rack_grp_code"
              left outer join "manual_rack_group" on "manual_rack_group"."c_br_code" = "st_store_stage_det"."c_br_code"
              and "manual_rack_group"."c_stage_code" = "st_store_stage_det"."c_stage_code"
              and "manual_rack_group"."c_rack_code" = "st_store_stage_det"."c_rack_grp_code"
            where "c_doc_no" = "new_name"."c_doc_no" and "st_track_det"."n_inout" = 0
            and "manual_rack_group"."c_rack_code" is null
            group by "st_store_stage_det"."c_stage_code";
        insert into "temp_tray_assignment_seq"
          select "st_store_stage_det"."c_stage_code",
            "max"("st_store_stage_det"."n_pos_seq")
            from "st_store_stage_det" join "temp_pos_seq" on "temp_pos_seq"."c_stage_code" = "st_store_stage_det"."c_stage_code"
              left outer join "manual_rack_group" on "manual_rack_group"."c_br_code" = "st_store_stage_det"."c_br_code"
              and "manual_rack_group"."c_stage_code" = "st_store_stage_det"."c_stage_code"
              and "manual_rack_group"."c_rack_code" = "st_store_stage_det"."c_rack_grp_code"
            where "st_store_stage_det"."n_pos_seq" < "temp_pos_seq"."n_pos_seq" and "st_store_stage_det"."n_tray_in_exit" > 0 and "manual_rack_group"."c_stage_code" is null
            group by "st_store_stage_det"."c_stage_code";
        select "max"("n_seq") into @max_seq from "st_track_det" where "c_doc_no" = "new_name"."c_doc_no"; --item_max seq from st_track_det
        --        print 'IN6';
        insert into "st_track_det"
          ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq","n_qty","n_sch_qty","n_bal_qty","c_note","c_rack","c_rack_grp_code","c_stage_code","n_complete",
          "c_reason_code","n_hold_flag","c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2","d_ldate","t_ltime",
          "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_non_pick_flag","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv" ) 
          select "new_name"."c_doc_no",0,"t"."c_def_item_code","t"."bach",@max_seq+"number"(),"t"."n_qty","t"."sch_qty","t"."bal_qty","t"."note","t"."rack","t"."rk_grp","t"."stg","t"."cmplete",
            "t"."reason","t"."hld","t"."tray","t"."usr","t"."gdwn","t"."ref_no","t"."usr2","t"."dldate","t"."tltime",
            "t"."sch_slab_qty","t"."sch_slab_sch_qty","t"."sch_disc_per","t"."non_pick_flag","t"."n_scheme_disc","t"."n_schm_qty_2_schm_disc",0,0
            from(select distinct "st_store_stage_det"."c_def_item_code" as "c_def_item_code",'-' as "bach",
                @dummy_qty as "n_qty",0 as "sch_qty",@dummy_qty as "bal_qty",'' as "note",
                (select top 1 "c_code" from "rack_mst" where "c_group" = "st_store_stage_det"."c_rack_grp_code" order by "c_code" asc) as "rack",
                "st_store_stage_det"."c_rack_grp_code" as "rk_grp","st_store_stage_mst"."c_code" as "stg",0 as "cmplete",'-' as "reason",0 as "hld",null as "tray",null as "usr",
                '-' as "gdwn",null as "ref_no",null as "usr2","getdate"() as "dldate","getdate"() as "tltime",0 as "sch_slab_qty",0 as "sch_slab_sch_qty",
                0 as "sch_disc_per",1 as "non_pick_flag",0 as "n_scheme_disc",0 as "n_schm_qty_2_schm_disc"
                from "st_store_stage_mst" left outer join "st_store_stage_det" on "st_store_stage_det"."c_stage_code" = "st_store_stage_mst"."c_code"
                  left outer join "manual_rack_group" on "manual_rack_group"."c_br_CODE" = "st_store_stage_mst"."C_br_CODE"
                  and "manual_rack_group"."c_STAGE_CODE" = "st_store_stage_mst"."C_CODE"
                  and "manual_rack_group"."c_rack_CODE" = "st_store_stage_det"."c_rack_grp_code"
                  left outer join "st_track_det" on "st_track_det"."c_stage_code" = "st_store_stage_mst"."c_code"
                  join "temp_tray_assignment_seq" on "temp_tray_assignment_seq"."c_stage_code" = "st_store_stage_mst"."c_code"
                where "st_store_stage_det"."n_pos_seq" = "temp_tray_assignment_seq"."n_pos_seq"
                and "manual_rack_group"."c_STAGE_CODE" is null
                and "st_store_stage_mst"."c_godown_code" = '-'
                and "st_track_det"."c_doc_no" = "new_name"."c_doc_no"
                and "st_store_stage_det"."n_tray_in_exit" > 0) as "t"
      -- order by st_store_stage_det.n_pos_seq asc;
      -- end if 
      end if;
      insert into "st_doc_sort"( "c_doc_no","t_time" ) on existing skip values( "new_name"."c_doc_no","getdate"() ) ;
      --Added for Auto Pick 
      select "st_track_setup"."n_enable_auto_pick" into @n_enable_auto_pick from "st_track_setup";
      if @n_enable_auto_pick = 1 and @store_enable_storetrack = 1 then
        select top 1 "c_code"
          into @c_tray_code from "st_tray_mst" left outer join "st_track_tray_move" on "st_tray_mst"."c_code" = "st_track_tray_move"."c_tray_code"
          where "n_in_out_flag" = 4
          and "st_track_tray_move"."c_tray_code" is null
          order by "st_tray_mst"."c_code" asc;
        --        print 'pick insert 1';
        insert into "st_track_pick"
          ( "c_doc_no","n_inout","n_seq","n_org_seq","c_item_code",
          "c_batch_no","n_qty","n_confirm_qty","n_reject_qty","c_tray_code",
          "c_rack","c_rack_grp_code","c_stage_code","n_complete","n_hold_flag",
          "c_reason_code","c_note","t_time","c_device_id","c_godown_code",
          "c_user","c_user_2","n_err","c_chk_user",
          "c_phase_code","c_err_mark_user","c_barcode_user","c_pick_err_confirm_user","c_system_ip",
          "c_system_name","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv","c_actual_batch_no","n_actual_seq" ) on existing skip
          select "st_track_det"."c_doc_no","st_track_det"."n_inout","number"() as "n_seq","st_track_det"."n_seq" as "n_org_seq","st_track_det"."c_item_code",
            "st_track_det"."c_batch_no","st_track_det"."n_qty",0 as "confirm_qty",0 as "reject_qty",@c_tray_code as "c_tray_code",
            "st_track_det"."c_rack","st_track_det"."c_rack_grp_code","st_track_det"."c_stage_code",0 as "n_complete","st_track_det"."n_hold_flag",
            "st_track_det"."c_reason_code",null as "c_note","now"() as "t_time",'AUTO' as "c_device_id","st_track_det"."c_godown_code",
            'AUTO',"st_track_det"."c_user_2",0 as "n_err",null as "c_chk_user",
            null as "c_phase_code",null as "c_err_mark_user",null as "c_barcode_user",null as "c_pick_err_confirm_user",null as "c_system_ip",
            null as "c_system_name","n_scheme_disc","n_schm_qty_2_schm_disc","isnull"("n_parent_item_seq",0),"isnull"("n_from_ord_inv",0),
            "st_track_det"."c_batch_no" as "c_actual_batch_no",
            "st_track_det"."n_seq" as "n_actual_seq"
            from "st_track_det"
              join "manual_rack_group" on "manual_rack_group"."c_stage_code" = "st_track_det"."c_stage_code"
              and "manual_rack_group"."c_rack_code" = "st_track_det"."c_rack_grp_code"
              and "manual_rack_group"."n_cancel_flag" = 0
            where "c_doc_no" = "new_name"."c_doc_no";
        update "st_track_det"
          set "st_track_det"."n_bal_qty" = 0,
          "st_track_det"."n_complete" = 1,
          "st_track_det"."c_tray_code" = @c_tray_code,
          "st_track_det"."c_user" = 'AUTO',
          "st_track_det"."c_user_2" = "left"("isnull"("st_track_det"."c_user_2",'')+'TR',10) from
          "st_track_det"
          join "st_track_pick"
          on "st_track_det"."c_doc_no" = "st_track_pick"."c_doc_no"
          and "st_track_det"."n_inout" = "st_track_pick"."n_inout"
          and "st_track_det"."c_item_Code" = "st_track_pick"."c_item_Code"
          and "st_track_det"."c_batch_no" = "st_track_pick"."c_batch_no"
          and "st_track_det"."n_seq" = "st_track_pick"."n_org_seq"
          and "st_track_pick"."c_doc_no" = "new_name"."c_doc_no";
        insert into "st_track_tray_move"
          ( "c_doc_no","n_inout","c_tray_code","c_rack_grp_code","c_stage_code",
          "t_time","c_user","n_flag","c_godown_code","c_user_2",
          "n_eb","n_tray_flag",
          "n_auto_complete_tray" ) on existing skip
          select top 1 "st_track_det"."c_doc_no",9,@c_tray_code,'-',"st_track_det"."c_stage_code",
            "now"(),'AUTO',0,"st_track_det"."c_godown_code",null,
            0,0,1
            from "st_track_det"
            where "st_track_det"."c_doc_no" = "new_name"."c_doc_no" and "st_track_det"."c_tray_code" = @c_tray_code
      // else trayassignment   = 0
      end if
    elseif "old_name"."n_confirm" = 0 and "new_name"."n_confirm" = 2 then
      //Inserting as autopicked for urgent marked invoices
      if @fast_tracking_picking_flag = 0 then
        --        print 'IN7';
        insert into "st_track_det"
          ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq",
          "n_qty","n_sch_qty","n_bal_qty","c_note","c_rack",
          "c_rack_grp_code","c_stage_code",
          "n_complete","c_reason_code","n_hold_flag",
          "c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2",
          "d_ldate",
          "t_ltime",
          "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv" ) 
          select @brcode+'/'+"invoice_mst"."c_year"+'/'+"invoice_mst"."c_prefix"+'/'+"string"("invoice_det"."n_srno"),0,"c_item_code","c_batch_no","invoice_det"."n_seq",
            "invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),"isnull"("invoice_det"."n_scheme_qty",0),0,null,"item_mst"."c_rack_code",
            "rack_mst"."c_group",(select "max"("c_stage_code") from "st_store_stage_det" where "st_store_stage_det"."c_rack_grp_code" = "rack_mst"."c_group"),
            1 as "n_complte",
            '-' as "c_reason_code",
            0 as "n_hold_flag",
            "new_name"."c_auto_tray_code",
            null as "c_user",
            '-' as "c_godown_code",
            null as "c_stin_ref_no",
            null as "c_user_2",
            "today"(),"now"(),
            "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","isnull"("n_parent_item_seq",0),"isnull"("n_from_ord_inv",0)
            from "invoice_det" join "invoice_mst" on "invoice_mst"."n_srno" = "invoice_det"."n_srno"
              join "item_mst" on "item_mst"."c_code" = "invoice_det"."c_item_code"
              join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
            where("invoice_mst"."c_year" = "s_year")
            and("invoice_mst"."c_prefix" = "s_prefix")
            and("invoice_det"."n_srno" = "d_srno")
            and("invoice_det"."n_store_track" = 2)
            and("left"("s_prefix",1) = 'I');
        delete from "st_track_pick" where "c_doc_no" = "new_name"."c_doc_no" and "n_inout" = 0;
        delete from "st_track_tray_move" where "c_doc_no" = "new_name"."c_doc_no";
        delete from "st_track_det" where "c_doc_no" = "new_name"."c_doc_no" and "n_non_pick_flag" = 1 and "n_inout" = 0;
        --        print 'pick insert 2';
        insert into "st_track_pick"
          ( "c_doc_no","n_inout","n_seq","n_org_seq","c_item_code",
          "c_batch_no","n_qty","n_confirm_qty","n_reject_qty","c_tray_code",
          "c_rack","c_rack_grp_code","c_stage_code","n_complete","n_hold_flag",
          "c_reason_code","c_note","t_time","c_device_id","c_godown_code",
          "c_user","c_user_2","n_err","c_chk_user",
          "c_phase_code","c_err_mark_user","c_barcode_user","c_pick_err_confirm_user","c_system_ip",
          "c_system_name","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv","c_actual_batch_no","n_actual_seq" ) on existing skip
          select "st_track_det"."c_doc_no","st_track_det"."n_inout","number"() as "n_seq","st_track_det"."n_seq" as "n_org_seq","st_track_det"."c_item_code",
            "st_track_det"."c_batch_no","st_track_det"."n_qty",0 as "confirm_qty",0 as "reject_qty","new_name"."c_auto_tray_code" as "c_tray_code",
            "st_track_det"."c_rack","st_track_det"."c_rack_grp_code","st_track_det"."c_stage_code",0 as "n_complete","st_track_det"."n_hold_flag",
            "st_track_det"."c_reason_code",null as "c_note","now"() as "t_time",'AUTOR' as "c_device_id","st_track_det"."c_godown_code",
            "st_track_det"."c_user","st_track_det"."c_user_2",0 as "n_err",null as "c_chk_user",
            null as "c_phase_code",null as "c_err_mark_user",null as "c_barcode_user",null as "c_pick_err_confirm_user",null as "c_system_ip",
            null as "c_system_name","n_scheme_disc","n_schm_qty_2_schm_disc","isnull"("n_parent_item_seq",0),"isnull"("n_from_ord_inv",0),
            "st_track_det"."c_batch_no" as "c_actual_batch_no","st_track_det"."n_seq" as "n_actual_seq"
            from "st_track_det"
            where "c_doc_no" = "new_name"."c_doc_no";
        insert into "st_track_tray_move"
          ( "c_doc_no","n_inout","c_tray_code","c_rack_grp_code","c_stage_code",
          "t_time","c_user","n_flag","c_godown_code","c_user_2",
          "n_eb","n_tray_flag",
          "n_auto_complete_tray" ) on existing skip
          select top 1 "st_track_det"."c_doc_no",9,"new_name"."c_auto_tray_code",'-',"st_track_det"."c_stage_code",
            "now"(),'AUTOR',0,"st_track_det"."c_godown_code",null,
            0,0,1
            from "st_track_det"
            where "st_track_det"."c_doc_no" = "new_name"."c_doc_no" and "st_track_det"."c_tray_code" = "new_name"."c_auto_tray_code"
      else //fastrack picking module check 
        --        print 'IN8';
        insert into "st_track_det"
          ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq",
          "n_qty","n_sch_qty","n_bal_qty","c_note","c_rack",
          "c_rack_grp_code","c_stage_code",
          "n_complete","c_reason_code","n_hold_flag",
          "c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2",
          "d_ldate",
          "t_ltime",
          "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv" ) 
          select @brcode+'/'+"invoice_mst"."c_year"+'/'+"invoice_mst"."c_prefix"+'/'+"string"("invoice_det"."n_srno"),0,"c_item_code","c_batch_no","invoice_det"."n_seq",
            "invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),"isnull"("invoice_det"."n_scheme_qty",0),"invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),null,"item_mst"."c_rack_code",
            'FTRA'+"right"("store_mst"."c_code",2), --'FTRACK',
            'FTRA'+"right"("store_mst"."c_code",2), --'FTRACK',
            0 as "n_complte",
            '-' as "c_reason_code",
            0 as "n_hold_flag",
            null,
            null as "c_user",
            '-' as "c_godown_code",
            null as "c_stin_ref_no",
            null as "c_user_2",
            "today"(),"now"(),
            "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","isnull"("n_parent_item_seq",0),"isnull"("n_from_ord_inv",0)
            from "invoice_det" join "invoice_mst" on "invoice_mst"."n_srno" = "invoice_det"."n_srno"
              join "item_mst" on "item_mst"."c_code" = "invoice_det"."c_item_code"
              join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
              join "rack_group_mst" on "rack_group_mst"."c_code" = "rack_mst"."c_group"
              join "store_mst" on "store_mst"."c_code" = "rack_group_mst"."c_store_code"
            where("invoice_mst"."c_year" = "s_year")
            and("invoice_mst"."c_prefix" = "s_prefix")
            and("invoice_det"."n_srno" = "d_srno")
            and("invoice_det"."n_store_track" = 2)
            and("left"("s_prefix",1) = 'I')
      end if
    elseif "old_name"."n_confirm" = 1 and "new_name"."n_confirm" = 2 then
      --      print 'before if confirm 1 to 2';
      if @fast_tracking_picking_flag = 0 then
        --        print 'after if fast track flag is disabled';
        //Confirmed inv removing from store track and inserting as auto picked for the purpose of invoice checking in system
        update
          "st_track_det"
          set "c_tray_code" = "new_name"."c_auto_tray_code","n_complete" = 1,"n_bal_qty" = 0,"c_user" = 'AUTOR'
          where "n_inout" = 0 and "c_doc_no" = "new_name"."c_doc_no";
        delete from "st_track_pick" where "c_doc_no" = "new_name"."c_doc_no" and "n_inout" = 0;
        delete from "st_track_tray_move" where "c_doc_no" = "new_name"."c_doc_no";
        delete from "st_track_det" where "c_doc_no" = "new_name"."c_doc_no" and "n_non_pick_flag" = 1;
        --        print 'pick insert 3';
        insert into "st_track_pick"
          ( "c_doc_no","n_inout","n_seq","n_org_seq","c_item_code",
          "c_batch_no","n_qty","n_confirm_qty","n_reject_qty","c_tray_code",
          "c_rack","c_rack_grp_code","c_stage_code","n_complete","n_hold_flag",
          "c_reason_code","c_note","t_time","c_device_id","c_godown_code",
          "c_user","c_user_2","n_err","c_chk_user",
          "c_phase_code","c_err_mark_user","c_barcode_user","c_pick_err_confirm_user","c_system_ip",
          "c_system_name","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv","c_actual_batch_no","n_actual_seq" ) on existing skip
          select "st_track_det"."c_doc_no","st_track_det"."n_inout","number"() as "n_seq","st_track_det"."n_seq" as "n_org_seq","st_track_det"."c_item_code",
            "st_track_det"."c_batch_no","st_track_det"."n_qty",0 as "confirm_qty",0 as "reject_qty","new_name"."c_auto_tray_code" as "c_tray_code",
            "st_track_det"."c_rack","st_track_det"."c_rack_grp_code","st_track_det"."c_stage_code",0 as "n_complete","st_track_det"."n_hold_flag",
            "st_track_det"."c_reason_code",null as "c_note","now"() as "t_time",'AUTOR' as "c_device_id","st_track_det"."c_godown_code",
            "st_track_det"."c_user","st_track_det"."c_user_2",0 as "n_err",null as "c_chk_user",
            null as "c_phase_code",null as "c_err_mark_user",null as "c_barcode_user",null as "c_pick_err_confirm_user",null as "c_system_ip",
            null as "c_system_name","n_scheme_disc","n_schm_qty_2_schm_disc","isnull"("n_parent_item_seq",0),"isnull"("n_from_ord_inv",0),
            "st_track_det"."c_batch_no" as "c_actual_batch_no","st_track_det"."n_seq" as "n_actual_seq"
            from "st_track_det"
            where "c_doc_no" = "new_name"."c_doc_no" and "n_non_pick_flag" = 0;
        insert into "st_track_tray_move"
          ( "c_doc_no","n_inout","c_tray_code","c_rack_grp_code","c_stage_code",
          "t_time","c_user","n_flag","c_godown_code","c_user_2",
          "n_eb","n_tray_flag",
          "n_auto_complete_tray" ) on existing skip
          select top 1 "st_track_det"."c_doc_no",9,"new_name"."c_auto_tray_code",'-',"st_track_det"."c_stage_code",
            "now"(),'AUTOR',0,"st_track_det"."c_godown_code",null,
            0,0,1
            from "st_track_det"
            where "st_track_det"."c_doc_no" = "new_name"."c_doc_no" and "st_track_det"."c_tray_code" = "new_name"."c_auto_tray_code"
      else // Fast track module checking 
        --        print 'after if fast track flag is enabled';
        update
          "st_track_det"
          join "item_mst" on "item_mst"."c_code" = "st_track_det"."c_item_code"
          join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
          join "rack_group_mst" on "rack_group_mst"."c_code" = "rack_mst"."c_group"
          join "store_mst" on "store_mst"."c_code" = "rack_group_mst"."c_store_code"
          set "n_complete" = 0,"n_bal_qty" = "n_qty","st_track_det"."c_user" = null,"st_track_det"."c_rack_grp_code" = 'FTRA'+"right"("store_mst"."c_code",2),"st_track_det"."c_stage_code" = 'FTRA'+"right"("store_mst"."c_code",2),
          "c_tray_code" = null
          where "n_inout" = 0 and "c_doc_no" = "new_name"."c_doc_no";
        //        update
        //          "st_track_det"
        //          set "n_complete" = 0,"n_bal_qty" = "n_qty","c_user" = null,"c_rack_grp_code" = 'FTRACK',"c_stage_code" = 'FTRACK',"c_tray_code" = null
        //          where "n_inout" = 0 and "c_doc_no" = "new_name"."c_doc_no";
        delete from "st_track_pick" where "c_doc_no" = "new_name"."c_doc_no" and "n_inout" = 0;
        delete from "st_track_tray_move" where "c_doc_no" = "new_name"."c_doc_no";
        delete from "st_track_det" where "c_doc_no" = "new_name"."c_doc_no" and "n_non_pick_flag" = 1
      --TRAY ASSIGNMent ELSE gargee
      end if
    end if
  else if "old_name"."n_confirm" = 0 and "new_name"."n_confirm" = 1 then
      --SO Insertion 
      if "left"("s_prefix",1) = 'S' then
        --        print 'IN9';
        insert into "st_track_det"
          ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq",
          "n_qty","n_sch_qty","n_bal_qty","c_note","c_rack",
          "c_rack_grp_code","c_stage_code",
          "n_complete","c_reason_code","n_hold_flag",
          "c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2",
          "d_ldate",
          "t_ltime","n_scheme_disc","n_schm_qty_2_schm_disc" ) 
          select @brcode+'/'+"c_year"+'/'+"c_prefix"+'/'+"string"("n_srno"),0,"c_item_code","c_batch_no","n_seq",
            "n_qty"+"isnull"("n_scheme_qty",0),"isnull"("n_scheme_qty",0),"n_qty"+"isnull"("n_scheme_qty",0),null,"item_mst"."c_rack_code",
            "rack_mst"."c_group",(select "max"("c_stage_code") from "st_store_stage_det" where "st_store_stage_det"."c_rack_grp_code" = "rack_mst"."c_group"),
            0,'-',1,
            null,null,'-',null,null,
            "today"(),"now"(),"n_scheme_disc","n_schm_qty_2_schm_disc"
            from "ord_det"
              join "item_mst" on "item_mst"."c_code" = "ord_det"."c_item_code"
              join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
            where("ord_det"."c_year" = "s_year")
            and("ord_det"."c_prefix" = "s_prefix")
            and("ord_det"."n_srno" = "d_srno")
            and("ord_det"."n_store_track" = 2)
            and("ord_det"."n_approve" = 1)
            and("left"("s_prefix",1) = 'S')
      end if;
      if "left"("s_prefix",1) = 'M' then
        select "c_store_code","isnull"("n_enable_store_track",0) into @store_code,@store_enable_storetrack
          from "dc_mst" join "store_mst" on "dc_mst"."c_store_code" = "store_mst"."c_code"
          where "dc_mst"."c_year" = "s_year"
          and "dc_mst"."c_prefix" = "s_prefix"
          and "dc_mst"."n_srno" = "d_srno";
        select "c_menu_id" into @dummy_qty from "st_track_module_mst" where "c_code" = 'M00047';
        --DC Insertion 
        --        print 'IN10';
        insert into "st_track_det"
          ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq",
          "n_qty","n_sch_qty","n_bal_qty","c_note","c_rack",
          "c_rack_grp_code","c_stage_code",
          "n_complete","c_reason_code","n_hold_flag",
          "c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2",
          "d_ldate",
          "t_ltime","n_scheme_disc","n_schm_qty_2_schm_disc",
          "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_parent_item_seq" ) 
          select @brcode+'/'+"dc_mst"."c_year"+'/'+"dc_mst"."c_prefix"+'/'+"string"("dc_det"."n_srno"),0,"c_item_code","c_batch_no","dc_det"."n_seq",
            "dc_det"."n_qty"+"isnull"("dc_det"."n_scheme_qty",0),"isnull"("dc_det"."n_scheme_qty",0),"dc_det"."n_qty"+"isnull"("dc_det"."n_scheme_qty",0),null,"item_mst"."c_rack_code",
            "rack_mst"."c_group",(select "max"("c_stage_code") from "st_store_stage_det" where "st_store_stage_det"."c_rack_grp_code" = "rack_mst"."c_group"),
            0,'-',0,
            null,null,'-',null,null,
            "today"(),"now"(),"n_scheme_disc","n_schm_qty_2_schm_disc",
            "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_parent_item_seq"
            from "dc_det" join "dc_mst" on "dc_mst"."n_srno" = "dc_det"."n_srno"
              join "item_mst" on "item_mst"."c_code" = "dc_det"."c_item_code"
              join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
            where("dc_mst"."c_year" = "s_year")
            and("dc_mst"."c_prefix" = "s_prefix")
            and("dc_det"."n_srno" = "d_srno")
            and("dc_det"."n_store_track" = 2)
            and("dc_det"."n_approve" = 1)
            and("left"("s_prefix",1) = 'M')
      end if;
      // todo_vinay
      if "s_prefix" = 'IS' then
        select top 1 "invoice_mst"."c_store_code","isnull"("n_enable_store_track",0) into @store_code,@store_enable_storetrack
          from "inv_summary_list_det" as "isd"
            join "inv_summary_list_mst" as "ism" on "ism"."n_srno" = "isd"."n_srno"
            join "invoice_mst" on "invoice_mst"."n_srno" = "n_inv_no"
            join "invoice_det" on "invoice_det"."n_srno" = "invoice_mst"."n_srno"
            join "store_mst" on "invoice_mst"."c_store_code" = "store_mst"."c_code"
          where "ism"."c_year" = "s_year"
          and "ism"."c_prefix" = "s_prefix"
          and "ism"."n_srno" = "d_srno"
          order by "n_enable_store_track" desc;
        --DC Insertion 
        --        print 'IN11';
        insert into "st_track_det"
          ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq",
          "n_qty","n_sch_qty","n_bal_qty","c_note","c_rack",
          "c_rack_grp_code","c_stage_code",
          "n_complete","c_reason_code","n_hold_flag",
          "c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2",
          "d_ldate",
          "t_ltime","n_scheme_disc","n_schm_qty_2_schm_disc",
          "n_ref_srno","c_ref_doc_no",
          "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc" ) 
          select @brcode+'/'+"ism"."c_year"+'/'+"ism"."c_prefix"+'/'+"string"("ism"."n_srno"),0,"c_item_code","c_batch_no","string"("isd"."n_seq")+'000'+"string"("invoice_det"."n_seq"),
            "invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),"isnull"("invoice_det"."n_scheme_qty",0),"invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),null,"item_mst"."c_rack_code",
            "rack_mst"."c_group",(select "max"("c_stage_code") from "st_store_stage_det" where "st_store_stage_det"."c_rack_grp_code" = "rack_mst"."c_group"),
            0,'-',0,
            null,null,'-',null,null,
            "today"(),"now"(),"n_scheme_disc","n_schm_qty_2_schm_disc",
            "isd"."n_inv_no",@brcode+'/'+"ism"."c_year"+'/'+"isd"."c_inv_prefix"+'/'+"string"("isd"."n_inv_no"),
            "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc"
            from "inv_summary_list_det" as "isd"
              join "inv_summary_list_mst" as "ism" on "ism"."n_srno" = "isd"."n_srno"
              join "invoice_mst" on "invoice_mst"."n_srno" = "n_inv_no"
              join "invoice_det" on "invoice_det"."n_srno" = "invoice_mst"."n_srno"
              join "item_mst" on "item_mst"."c_code" = "invoice_det"."c_item_code"
              join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
            where("ism"."c_year" = "s_year")
            and("ism"."c_prefix" = "s_prefix")
            and("ism"."n_srno" = "d_srno")
            and("ism"."n_store_track" = 2)
            and("ism"."n_approved" = 1)
            and("s_prefix" = 'IS')
      end if;
      if "left"("s_prefix",1) = 'I' and @store_enable_storetrack = 1 then
        select "c_menu_id" into @dummy_qty from "st_track_module_mst" where "c_code" = 'M00047';
        --        print 'IN12';
        insert into "st_track_det"
          ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq",
          "n_qty","n_sch_qty","n_bal_qty","c_note","c_rack",
          "c_rack_grp_code","c_stage_code",
          "n_complete","c_reason_code","n_hold_flag",
          "c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2",
          "d_ldate",
          "t_ltime",
          "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv" ) 
          select @brcode+'/'+"invoice_mst"."c_year"+'/'+"invoice_mst"."c_prefix"+'/'+"string"("invoice_det"."n_srno"),0,
            "invoice_det"."c_item_code","invoice_det"."c_batch_no","invoice_det"."n_seq",
            "invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),
            "isnull"("invoice_det"."n_scheme_qty",0),"invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),null,"item_mst"."c_rack_code",
            "rack_mst"."c_group",
            "st_store_stage_mst"."c_code",
            0,'-',0,
            null,null,
            "st_store_stage_mst"."c_godown_code",
            null,null,
            "today"(),"now"(),
            "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","isnull"("n_parent_item_seq",0),"isnull"("n_from_ord_inv",0)
            from "invoice_det" join "invoice_mst" on "invoice_mst"."n_srno" = "invoice_det"."n_srno"
              join "stock" on "stock"."c_item_code" = "invoice_det"."c_item_code"
              and "stock"."c_batch_no" = "invoice_det"."c_batch_no"
              join "item_mst" on "item_mst"."c_code" = "invoice_det"."c_item_code"
              join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
              join "rack_group_mst" on "rack_group_mst"."c_code" = "rack_mst"."c_group"
              join "st_store_stage_det" on "st_store_stage_det"."c_rack_grp_code" = "rack_group_mst"."c_code"
              join "st_store_stage_mst" on "st_store_stage_mst"."c_br_code" = "st_store_stage_det"."c_br_code"
              and "st_store_stage_mst"."c_code" = "st_store_stage_det"."c_stage_code"
            where("invoice_mst"."c_year" = "s_year")
            and("invoice_mst"."c_prefix" = "s_prefix")
            and("invoice_det"."n_srno" = "d_srno")
            and("invoice_det"."n_store_track" = 2)
            and("left"("s_prefix",1) = 'I')
            and("item_mst"."c_godown_rack_code" = 'UNSURE'
            or("invoice_det"."n_qty"+"invoice_det"."n_scheme_qty")
             <= (("stock"."n_balance_qty"+"invoice_det"."n_qty"+"invoice_det"."n_scheme_qty")-"stock"."n_godown_qty")
            or "stock"."n_godown_qty" < ("invoice_det"."n_qty"+"invoice_det"."n_scheme_qty"));
        --        print 'IN13';
        insert into "st_track_det"
          ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq",
          "n_qty","n_sch_qty","n_bal_qty","c_note","c_rack",
          "c_rack_grp_code","c_stage_code",
          "n_complete","c_reason_code","n_hold_flag",
          "c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2",
          "d_ldate",
          "t_ltime",
          "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv" ) 
          select @brcode+'/'+"invoice_mst"."c_year"+'/'+"invoice_mst"."c_prefix"+'/'+"string"("invoice_det"."n_srno"),0,
            "invoice_det"."c_item_code","invoice_det"."c_batch_no","invoice_det"."n_seq",
            "invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),
            "isnull"("invoice_det"."n_scheme_qty",0),"invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),null,
            "item_mst"."c_godown_rack_code",
            "rack_mst"."c_group",
            "st_store_stage_mst"."c_code",
            0,'-',0,
            null,null,
            "st_store_stage_mst"."c_godown_code",
            null,null,
            "today"(),"now"(),
            "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","isnull"("n_parent_item_seq",0),"isnull"("n_from_ord_inv",0)
            from "invoice_det" join "invoice_mst" on "invoice_mst"."n_srno" = "invoice_det"."n_srno"
              join "stock" on "stock"."c_item_code" = "invoice_det"."c_item_code"
              and "stock"."c_batch_no" = "invoice_det"."c_batch_no"
              join "item_mst" on "item_mst"."c_code" = "invoice_det"."c_item_code"
              join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_godown_rack_code"
              join "rack_group_mst" on "rack_group_mst"."c_code" = "rack_mst"."c_group"
              join "st_store_stage_det" on "st_store_stage_det"."c_rack_grp_code" = "rack_group_mst"."c_code"
              join "st_store_stage_mst" on "st_store_stage_mst"."c_br_code" = "st_store_stage_det"."c_br_code"
              and "st_store_stage_mst"."c_code" = "st_store_stage_det"."c_stage_code"
            where("invoice_mst"."c_year" = "s_year")
            and("invoice_mst"."c_prefix" = "s_prefix")
            and("invoice_det"."n_srno" = "d_srno")
            and("invoice_det"."n_store_track" = 2)
            and("left"("s_prefix",1) = 'I')
            and("item_mst"."c_godown_rack_code" <> 'UNSURE'
            and("invoice_det"."n_qty"+"invoice_det"."n_scheme_qty")
             > (("stock"."n_balance_qty"+"invoice_det"."n_qty"+"invoice_det"."n_scheme_qty")-"stock"."n_godown_qty")
            and("invoice_det"."n_qty"+"invoice_det"."n_scheme_qty") < "stock"."n_godown_qty")
      end if;
      //Inserting one record for manual Rack Group
      if @store_enable_storetrack = 1 then
        select top 1 "c_rack_grp_code" into @pick_start_rack_grp from "st_store_stage_det" join "st_store_stage_mst" on "st_store_stage_mst"."c_code" = "st_store_stage_det"."c_stage_code"
            left outer join "manual_rack_group" on "manual_rack_group"."c_stage_code" = "st_store_stage_det"."c_stage_code"
            and "manual_rack_group"."c_rack_code" = "st_store_stage_det"."c_rack_grp_code"
          where "st_store_stage_mst"."c_godown_code" = '-'
          and "manual_rack_group"."c_rack_code" is null
          order by "st_store_stage_det"."n_pos_seq" asc;
        select "count"("c_group")
          into @cnt_pick_start_rack_grp from "invoice_det" join "invoice_mst" on "invoice_mst"."n_srno" = "invoice_det"."n_srno"
            join "item_mst" on "item_mst"."c_code" = "invoice_det"."c_item_code"
            join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
          where("invoice_mst"."c_year" = "s_year")
          and("invoice_mst"."c_prefix" = "s_prefix")
          and("invoice_det"."n_srno" = "d_srno")
          and "c_group" in( @pick_start_rack_grp ) ;
        if @cnt_pick_start_rack_grp = 0 then
          insert into "temp_pos_seq"
            select "st_store_stage_det"."c_stage_code",
              "min"("st_store_stage_det"."n_pos_seq")
              from "st_store_stage_det" left outer join "st_track_det"
                on "st_store_stage_det"."c_stage_code" = "st_track_det"."c_stage_code"
                and "st_store_stage_det"."c_rack_grp_code" = "st_track_det"."c_rack_grp_code"
                left outer join "manual_rack_group" on "manual_rack_group"."c_br_code" = "st_store_stage_det"."c_br_code"
                and "manual_rack_group"."c_stage_code" = "st_store_stage_det"."c_stage_code"
                and "manual_rack_group"."c_rack_code" = "st_store_stage_det"."c_rack_grp_code"
              where "c_doc_no" = "new_name"."c_doc_no" and "st_track_det"."n_inout" = 0
              and "manual_rack_group"."c_rack_code" is null
              group by "st_store_stage_det"."c_stage_code";
          insert into "temp_tray_assignment_seq"
            select "st_store_stage_det"."c_stage_code",
              "max"("st_store_stage_det"."n_pos_seq")
              from "st_store_stage_det" join "temp_pos_seq" on "temp_pos_seq"."c_stage_code" = "st_store_stage_det"."c_stage_code"
              where "st_store_stage_det"."n_pos_seq" < "temp_pos_seq"."n_pos_seq" and "st_store_stage_det"."n_tray_in_exit" > 0
              group by "st_store_stage_det"."c_stage_code";
          select "max"("n_seq") into @max_seq from "st_track_det" where "c_doc_no" = "new_name"."c_doc_no"; --item_max seq from st_track_det
          //find the seq of  first item to be be picked   for the document 
          --gg 
          --          print 'IN14';
          insert into "st_track_det"
            ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq","n_qty","n_sch_qty","n_bal_qty","c_note","c_rack","c_rack_grp_code","c_stage_code","n_complete",
            "c_reason_code","n_hold_flag","c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2","d_ldate","t_ltime",
            "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_non_pick_flag","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv" ) 
            select "new_name"."c_doc_no",0,"t"."c_def_item_code","t"."bach",@max_seq+"number"(),"t"."n_qty","t"."sch_qty","t"."bal_qty","t"."note","t"."rack","t"."rk_grp","t"."stg","t"."cmplete",
              "t"."reason","t"."hld","t"."tray","t"."usr","t"."gdwn","t"."ref_no","t"."usr2","t"."dldate","t"."tltime",
              "t"."sch_slab_qty","t"."sch_slab_sch_qty","t"."sch_disc_per","t"."non_pick_flag","t"."n_scheme_disc","t"."n_schm_qty_2_schm_disc",0,0
              from(select distinct "st_store_stage_det"."c_def_item_code" as "c_def_item_code",'-' as "bach",
                  @dummy_qty as "n_qty",0 as "sch_qty",@dummy_qty as "bal_qty",'' as "note",
                  (select top 1 "c_code" from "rack_mst" where "c_group" = "st_store_stage_det"."c_rack_grp_code" order by "c_code" asc) as "rack",
                  "st_store_stage_det"."c_rack_grp_code" as "rk_grp","st_store_stage_mst"."c_code" as "stg",0 as "cmplete",'-' as "reason",0 as "hld",null as "tray",null as "usr",
                  '-' as "gdwn",null as "ref_no",null as "usr2","getdate"() as "dldate","getdate"() as "tltime",0 as "sch_slab_qty",0 as "sch_slab_sch_qty",
                  0 as "sch_disc_per",1 as "non_pick_flag",0 as "n_scheme_disc",0 as "n_schm_qty_2_schm_disc"
                  from "st_store_stage_mst" left outer join "st_store_stage_det" on "st_store_stage_det"."c_stage_code" = "st_store_stage_mst"."c_code"
                    left outer join "manual_rack_group" on "manual_rack_group"."c_br_CODE" = "st_store_stage_mst"."C_br_CODE"
                    and "manual_rack_group"."c_STAGE_CODE" = "st_store_stage_mst"."C_CODE"
                    and "manual_rack_group"."c_rack_CODE" = "st_store_stage_det"."c_rack_grp_code"
                    left outer join "st_track_det" on "st_track_det"."c_stage_code" = "st_store_stage_mst"."c_code"
                    join "temp_tray_assignment_seq" on "temp_tray_assignment_seq"."c_stage_code" = "st_store_stage_mst"."c_code"
                  where "st_store_stage_det"."n_pos_seq" = "temp_tray_assignment_seq"."n_pos_seq"
                  and "manual_rack_group"."c_STAGE_CODE" is null
                  and "st_store_stage_mst"."c_godown_code" = '-'
                  and "st_track_det"."c_doc_no" = "new_name"."c_doc_no"
                  and "st_store_stage_det"."n_tray_in_exit" > 0) as "t"
        --order by st_store_stage_det.n_pos_seq asc;
        end if end if;
      insert into "st_doc_sort"( "c_doc_no","t_time" ) on existing skip values( "new_name"."c_doc_no","getdate"() ) ;
      --Added for Auto Pick 
      select "st_track_setup"."n_enable_auto_pick" into @n_enable_auto_pick from "st_track_setup";
      if @n_enable_auto_pick = 1 and @store_enable_storetrack = 1 then
        select top 1
          "c_code"
          into @c_tray_code from "st_tray_mst"
            left outer join "st_track_tray_move" on "st_tray_mst"."c_code" = "st_track_tray_move"."c_tray_code"
          --left outer join st_track_det on st_track_det.c_tray_code=st_tray_mst.c_code and n_complete in (1,0) 
          where "n_in_out_flag" = 4
          and "st_track_tray_move"."c_tray_code" is null
          -- and st_track_det.c_tray_code is null 
          order by "st_tray_mst"."c_code" asc;
        --        print 'pick insert 4';
        insert into "st_track_pick"
          ( "c_doc_no","n_inout","n_seq","n_org_seq","c_item_code",
          "c_batch_no","n_qty","n_confirm_qty","n_reject_qty","c_tray_code",
          "c_rack","c_rack_grp_code","c_stage_code","n_complete","n_hold_flag",
          "c_reason_code","c_note","t_time","c_device_id","c_godown_code",
          "c_user","c_user_2","n_err","c_chk_user",
          "c_phase_code","c_err_mark_user","c_barcode_user","c_pick_err_confirm_user","c_system_ip",
          "c_system_name","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv","c_actual_batch_no","n_actual_seq" ) on existing skip
          select "st_track_det"."c_doc_no","st_track_det"."n_inout","number"() as "n_seq","st_track_det"."n_seq" as "n_org_seq","st_track_det"."c_item_code",
            "st_track_det"."c_batch_no","st_track_det"."n_qty",0 as "confirm_qty",0 as "reject_qty",@c_tray_code as "c_tray_code",
            "st_track_det"."c_rack","st_track_det"."c_rack_grp_code","st_track_det"."c_stage_code",0 as "n_complete","st_track_det"."n_hold_flag",
            "st_track_det"."c_reason_code",null as "c_note","now"() as "t_time",'AUTO' as "c_device_id","st_track_det"."c_godown_code",
            'AUTO',"st_track_det"."c_user_2",0 as "n_err",null as "c_chk_user",
            null as "c_phase_code",null as "c_err_mark_user",null as "c_barcode_user",null as "c_pick_err_confirm_user",null as "c_system_ip",
            null as "c_system_name","n_scheme_disc","n_schm_qty_2_schm_disc","isnull"("n_parent_item_seq",0),"isnull"("n_from_ord_inv",0),
            "st_track_det"."c_batch_no" as "c_actual_batch_no","st_track_det"."n_seq" as "n_actual_seq"
            from "st_track_det"
              join "manual_rack_group" on "manual_rack_group"."c_stage_code" = "st_track_det"."c_stage_code"
              and "manual_rack_group"."c_rack_code" = "st_track_det"."c_rack_grp_code"
              and "manual_rack_group"."n_cancel_flag" = 0
            where "c_doc_no" = "new_name"."c_doc_no";
        update "st_track_det"
          set "st_track_det"."n_bal_qty" = 0,
          "st_track_det"."n_complete" = 1,
          "st_track_det"."c_tray_code" = @c_tray_code,
          "st_track_det"."c_user" = 'AUTO',
          "st_track_det"."c_user_2" = "left"("isnull"("st_track_det"."c_user_2",'')+'TR',10) from
          "st_track_det"
          join "st_track_pick"
          on "st_track_det"."c_doc_no" = "st_track_pick"."c_doc_no"
          and "st_track_det"."n_inout" = "st_track_pick"."n_inout"
          and "st_track_det"."c_item_Code" = "st_track_pick"."c_item_Code"
          and "st_track_det"."c_batch_no" = "st_track_pick"."c_batch_no"
          and "st_track_det"."n_seq" = "st_track_pick"."n_org_seq"
          and "st_track_pick"."c_doc_no" = "new_name"."c_doc_no";
        insert into "st_track_tray_move"
          ( "c_doc_no","n_inout","c_tray_code","c_rack_grp_code","c_stage_code",
          "t_time","c_user","n_flag","c_godown_code","c_user_2",
          "n_eb","n_tray_flag",
          "n_auto_complete_tray" ) on existing skip
          select top 1 "st_track_det"."c_doc_no",9,@c_tray_code,'-',"st_track_det"."c_stage_code",
            "now"(),'AUTO',0,"st_track_det"."c_godown_code",null,
            0,0,1
            from "st_track_det"
            where "st_track_det"."c_doc_no" = "new_name"."c_doc_no" and "st_track_det"."c_tray_code" = @c_tray_code
      end if
    elseif "old_name"."n_confirm" = 0 and "new_name"."n_confirm" = 2 then
      //Inserting as autopicked for urgent marked invoices
      if @fast_tracking_picking_flag = 0 then
        --        print 'IN15';
        insert into "st_track_det"
          ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq",
          "n_qty","n_sch_qty","n_bal_qty","c_note","c_rack",
          "c_rack_grp_code","c_stage_code",
          "n_complete","c_reason_code","n_hold_flag",
          "c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2",
          "d_ldate",
          "t_ltime",
          "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv" ) 
          select @brcode+'/'+"invoice_mst"."c_year"+'/'+"invoice_mst"."c_prefix"+'/'+"string"("invoice_det"."n_srno"),0,"c_item_code","c_batch_no","invoice_det"."n_seq",
            "invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),"isnull"("invoice_det"."n_scheme_qty",0),0,null,"item_mst"."c_rack_code",
            "rack_mst"."c_group",(select "max"("c_stage_code") from "st_store_stage_det" where "st_store_stage_det"."c_rack_grp_code" = "rack_mst"."c_group"),
            1 as "n_complte",
            '-' as "c_reason_code",
            0 as "n_hold_flag",
            "new_name"."c_auto_tray_code",
            null as "c_user",
            '-' as "c_godown_code",
            null as "c_stin_ref_no",
            null as "c_user_2",
            "today"(),"now"(),
            "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","isnull"("n_parent_item_seq",0),"isnull"("n_from_ord_inv",0)
            from "invoice_det" join "invoice_mst" on "invoice_mst"."n_srno" = "invoice_det"."n_srno"
              join "item_mst" on "item_mst"."c_code" = "invoice_det"."c_item_code"
              join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
            where("invoice_mst"."c_year" = "s_year")
            and("invoice_mst"."c_prefix" = "s_prefix")
            and("invoice_det"."n_srno" = "d_srno")
            and("invoice_det"."n_store_track" = 2)
            and("left"("s_prefix",1) = 'I');
        delete from "st_track_pick" where "c_doc_no" = "new_name"."c_doc_no" and "n_inout" = 0;
        delete from "st_track_tray_move" where "c_doc_no" = "new_name"."c_doc_no";
        delete from "st_track_det" where "c_doc_no" = "new_name"."c_doc_no" and "n_non_pick_flag" = 1 and "n_inout" = 0;
        --        print 'pick insert 5';
        insert into "st_track_pick"
          ( "c_doc_no","n_inout","n_seq","n_org_seq","c_item_code",
          "c_batch_no","n_qty","n_confirm_qty","n_reject_qty","c_tray_code",
          "c_rack","c_rack_grp_code","c_stage_code","n_complete","n_hold_flag",
          "c_reason_code","c_note","t_time","c_device_id","c_godown_code",
          "c_user","c_user_2","n_err","c_chk_user",
          "c_phase_code","c_err_mark_user","c_barcode_user","c_pick_err_confirm_user","c_system_ip",
          "c_system_name","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv","c_actual_batch_no","n_actual_seq" ) on existing skip
          select "st_track_det"."c_doc_no","st_track_det"."n_inout","number"() as "n_seq","st_track_det"."n_seq" as "n_org_seq","st_track_det"."c_item_code",
            "st_track_det"."c_batch_no","st_track_det"."n_qty",0 as "confirm_qty",0 as "reject_qty","new_name"."c_auto_tray_code" as "c_tray_code",
            "st_track_det"."c_rack","st_track_det"."c_rack_grp_code","st_track_det"."c_stage_code",0 as "n_complete","st_track_det"."n_hold_flag",
            "st_track_det"."c_reason_code",null as "c_note","now"() as "t_time",'AUTOR' as "c_device_id","st_track_det"."c_godown_code",
            "st_track_det"."c_user","st_track_det"."c_user_2",0 as "n_err",null as "c_chk_user",
            null as "c_phase_code",null as "c_err_mark_user",null as "c_barcode_user",null as "c_pick_err_confirm_user",null as "c_system_ip",
            null as "c_system_name","n_scheme_disc","n_schm_qty_2_schm_disc","isnull"("n_parent_item_seq",0),"isnull"("n_from_ord_inv",0),
            "st_track_det"."c_batch_no" as "c_actual_batch_no","st_track_det"."n_seq" as "n_actual_seq"
            from "st_track_det"
            where "c_doc_no" = "new_name"."c_doc_no";
        insert into "st_track_tray_move"
          ( "c_doc_no","n_inout","c_tray_code","c_rack_grp_code","c_stage_code",
          "t_time","c_user","n_flag","c_godown_code","c_user_2",
          "n_eb","n_tray_flag",
          "n_auto_complete_tray" ) on existing skip
          select top 1 "st_track_det"."c_doc_no",9,"new_name"."c_auto_tray_code",'-',"st_track_det"."c_stage_code",
            "now"(),'AUTOR',0,"st_track_det"."c_godown_code",null,
            0,0,1
            from "st_track_det"
            where "st_track_det"."c_doc_no" = "new_name"."c_doc_no" and "st_track_det"."c_tray_code" = "new_name"."c_auto_tray_code"
      else
        --        print 'IN16';
        insert into "st_track_det"
          ( "c_doc_no","n_inout","c_item_code","c_batch_no","n_seq",
          "n_qty","n_sch_qty","n_bal_qty","c_note","c_rack",
          "c_rack_grp_code","c_stage_code",
          "n_complete","c_reason_code","n_hold_flag",
          "c_tray_code","c_user","c_godown_code","c_stin_ref_no","c_user_2",
          "d_ldate",
          "t_ltime",
          "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv" ) 
          select @brcode+'/'+"invoice_mst"."c_year"+'/'+"invoice_mst"."c_prefix"+'/'+"string"("invoice_det"."n_srno"),0,"c_item_code","c_batch_no","invoice_det"."n_seq",
            "invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),"isnull"("invoice_det"."n_scheme_qty",0),
            "invoice_det"."n_qty"+"isnull"("invoice_det"."n_scheme_qty",0),null,"item_mst"."c_rack_code",
            'FTRA'+"right"("store_mst"."c_code",2), --'FTRACK',
            'FTRA'+"right"("store_mst"."c_code",2), --'FTRACK',
            0 as "n_complte",
            '-' as "c_reason_code",
            0 as "n_hold_flag",
            null,
            null as "c_user",
            '-' as "c_godown_code",
            null as "c_stin_ref_no",
            null as "c_user_2",
            "today"(),"now"(),
            "n_sch_slab_qty","n_sch_slab_sch_qty","n_sch_disc_perc","n_scheme_disc","n_schm_qty_2_schm_disc","isnull"("n_parent_item_seq",0),"isnull"("n_from_ord_inv",0)
            from "invoice_det" join "invoice_mst" on "invoice_mst"."n_srno" = "invoice_det"."n_srno"
              join "item_mst" on "item_mst"."c_code" = "invoice_det"."c_item_code"
              join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
              join "rack_group_mst" on "rack_group_mst"."c_code" = "rack_mst"."c_group"
              join "store_mst" on "store_mst"."c_code" = "rack_group_mst"."c_store_code"
            where("invoice_mst"."c_year" = "s_year")
            and("invoice_mst"."c_prefix" = "s_prefix")
            and("invoice_det"."n_srno" = "d_srno")
            and("invoice_det"."n_store_track" = 2)
            and("left"("s_prefix",1) = 'I')
      end if
    elseif "old_name"."n_confirm" = 1 and "new_name"."n_confirm" = 2 then
      if @fast_tracking_picking_flag = 0 then
        //Confirmed inv removing from store track and inserting as auto picked for the purpose of invoice checking in system
        update
          "st_track_det"
          set "c_tray_code" = "new_name"."c_auto_tray_code","n_complete" = 1,"n_bal_qty" = 0,"c_user" = 'AUTOR'
          where "n_inout" = 0 and "c_doc_no" = "new_name"."c_doc_no";
        delete from "st_track_pick" where "c_doc_no" = "new_name"."c_doc_no" and "n_inout" = 0;
        delete from "st_track_tray_move" where "c_doc_no" = "new_name"."c_doc_no";
        delete from "st_track_det" where "c_doc_no" = "new_name"."c_doc_no" and "n_non_pick_flag" = 1;
        --        print 'pick insert 6';
        insert into "st_track_pick"
          ( "c_doc_no","n_inout","n_seq","n_org_seq","c_item_code",
          "c_batch_no","n_qty","n_confirm_qty","n_reject_qty","c_tray_code",
          "c_rack","c_rack_grp_code","c_stage_code","n_complete","n_hold_flag",
          "c_reason_code","c_note","t_time","c_device_id","c_godown_code",
          "c_user","c_user_2","n_err","c_chk_user",
          "c_phase_code","c_err_mark_user","c_barcode_user","c_pick_err_confirm_user","c_system_ip",
          "c_system_name","n_scheme_disc","n_schm_qty_2_schm_disc","n_parent_item_seq","n_from_ord_inv","c_actual_batch_no","n_actual_seq" ) on existing skip
          select "st_track_det"."c_doc_no","st_track_det"."n_inout","number"() as "n_seq","st_track_det"."n_seq" as "n_org_seq","st_track_det"."c_item_code",
            "st_track_det"."c_batch_no","st_track_det"."n_qty",0 as "confirm_qty",0 as "reject_qty","new_name"."c_auto_tray_code" as "c_tray_code",
            "st_track_det"."c_rack","st_track_det"."c_rack_grp_code","st_track_det"."c_stage_code",0 as "n_complete","st_track_det"."n_hold_flag",
            "st_track_det"."c_reason_code",null as "c_note","now"() as "t_time",'AUTOR' as "c_device_id","st_track_det"."c_godown_code",
            "st_track_det"."c_user","st_track_det"."c_user_2",0 as "n_err",null as "c_chk_user",
            null as "c_phase_code",null as "c_err_mark_user",null as "c_barcode_user",null as "c_pick_err_confirm_user",null as "c_system_ip",
            null as "c_system_name","n_scheme_disc","n_schm_qty_2_schm_disc","isnull"("n_parent_item_seq",0),"isnull"("n_from_ord_inv",0),
            "st_track_det"."c_batch_no" as "c_actual_batch_no","st_track_det"."n_seq" as "n_actual_seq"
            from "st_track_det"
            where "c_doc_no" = "new_name"."c_doc_no" and "n_non_pick_flag" = 0;
        insert into "st_track_tray_move"
          ( "c_doc_no","n_inout","c_tray_code","c_rack_grp_code","c_stage_code",
          "t_time","c_user","n_flag","c_godown_code","c_user_2",
          "n_eb","n_tray_flag",
          "n_auto_complete_tray" ) on existing skip
          select top 1 "st_track_det"."c_doc_no",9,"new_name"."c_auto_tray_code",'-',"st_track_det"."c_stage_code",
            "now"(),'AUTOR',0,"st_track_det"."c_godown_code",null,
            0,0,1
            from "st_track_det"
            where "st_track_det"."c_doc_no" = "new_name"."c_doc_no" and "st_track_det"."c_tray_code" = "new_name"."c_auto_tray_code"
      else // fast track picking module check
        update
          "st_track_det"
          join "item_mst" on "item_mst"."c_code" = "st_track_det"."c_item_code"
          join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
          join "rack_group_mst" on "rack_group_mst"."c_code" = "rack_mst"."c_group"
          join "store_mst" on "store_mst"."c_code" = "rack_group_mst"."c_store_code"
          set "st_track_det"."n_complete" = 0,"st_track_det"."n_bal_qty" = "st_track_det"."n_qty","st_track_det"."c_user" = null,
          "st_track_det"."c_rack_grp_code" = 'FTRA'+"right"("store_mst"."c_code",2),"st_track_det"."c_stage_code" = 'FTRA'+"right"("store_mst"."c_code",2),"st_track_det"."c_tray_code" = null
          where "st_track_det"."n_inout" = 0 and "st_track_det"."c_doc_no" = "new_name"."c_doc_no";
        //        update
        //          "st_track_det"
        //          set "n_complete" = 0,"n_bal_qty" = "n_qty","c_user" = null,"c_rack_grp_code" = 'FTRACK',"c_stage_code" = 'FTRACK',"c_tray_code" = null
        //          where "n_inout" = 0 and "c_doc_no" = "new_name"."c_doc_no";
        delete from "st_track_pick" where "c_doc_no" = "new_name"."c_doc_no" and "n_inout" = 0;
        delete from "st_track_tray_move" where "c_doc_no" = "new_name"."c_doc_no";
        delete from "st_track_det" where "c_doc_no" = "new_name"."c_doc_no" and "n_non_pick_flag" = 1
      end if
    end if
  end if
end;
CREATE TRIGGER "insert_update_ledger" after insert order 1
on "DBA".crnt_debit_act
referencing new as new_name
for each row
when(new_name.n_ledg_effect=1)
begin
  insert into ledger(c_prefix,n_tran_no,d_date,c_act_code,
    n_amount,c_opp_act_code) values(
    new_name.c_prefix,new_name.n_srno,new_name.d_crnt_date,
    new_name.c_debit_act,new_name.n_amount,new_name.c_cust_code)
end;
CREATE TRIGGER "Insert_Update_Purchase_Bal_Amount" after insert order 1
on "DBA".supp_pay_det
referencing new as new_name
for each row
begin
  update purchase_mst set
    purchase_mst.n_purchase_balance_amt
    =purchase_mst.n_purchase_balance_amt-new_name.n_amount
    where purchase_mst.c_prefix=new_name.c_prefix
    and purchase_mst.n_srno=new_name.n_purchase_no
end;
CREATE TRIGGER "insert_update_transporter_balance_amt" after insert order 1 on
"DBA"."transporter_payment_det"
referencing new as "new_name"
for each row
begin
  update "transporter_payment_ledger" set "transporter_payment_ledger"."n_bal_amount"
     = "transporter_payment_ledger"."n_bal_amount"-"new_name"."n_amount"
    where "transporter_payment_ledger"."n_doc_no" = "new_name"."n_invoice_no"
end;
CREATE TRIGGER "insert_user_lock_logon_det_insert" after insert order 1 on
"DBA"."logon_det"
referencing new as "new_name"
for each row
begin
  declare @chk_tmp_lock,@perm_lock,@n_lock_check_enabled numeric(1);
  declare @temp_lock_count_pwdsetup,@temp_det_lock_count numeric(4);
  select top 1 "n_enable_pswd_lock","n_temp_lock_after_n_failure" into @n_lock_check_enabled,@temp_lock_count_pwdsetup from "pwd_setup_param";
  if @n_lock_check_enabled is null then
    set @n_lock_check_enabled = 0
  end if;
  if @n_lock_check_enabled = 0 then
    return
  end if;
  if @temp_lock_count_pwdsetup is null then
    set @temp_lock_count_pwdsetup = 0
  end if;
  select "n_temp_id_locked","n_permanent_id_locked" into @chk_tmp_lock,@perm_lock from "ddds_user_mst" where "c_user_id" = "new_name"."c_user";
  if @chk_tmp_lock is null then
    set @chk_tmp_lock = 0
  end if;
  if @perm_lock is null then
    set @perm_lock = 0
  end if;
  select "count"() into @temp_det_lock_count from "logon_det_temp_lock" where "c_user_id" = "new_name"."c_user";
  if @temp_det_lock_count is null then
    set @temp_det_lock_count = 0
  end if;
  if "new_name"."n_wrong_user_pswd_try" = 1 and @chk_tmp_lock = 0 and @temp_det_lock_count < @temp_lock_count_pwdsetup then
    insert into "logon_det_temp_lock"( "c_user_id","d_logon_date_time","d_date" ) values( "new_name"."c_user","new_name"."d_logon_date_time","new_name"."d_date" ) 
  elseif "new_name"."n_wrong_user_pswd_try" = 0 then
    delete from "logon_det_temp_lock" where "c_user_id" = "new_name"."c_user";
    delete from "user_lock_det" where "c_user_id" = "new_name"."c_user"
  end if
end;
CREATE TRIGGER "item_stk_block_update_from_ord" after update order 1 on
"DBA"."ord_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "d_count" decimal(8);
  declare @isloexist decimal(8);
  declare @invno decimal(18);
  declare @sumbal numeric(8);
  set @sumbal = 0;
  if "old_name"."n_hold_pending" = 1 then
    select "sum"("n_bal_qty") into @sumbal from "ord_det" where "n_srno" = "old_name"."n_srno" group by "n_srno";
    if @sumbal > 0 then
      update "ord_mst" set "n_chk_pending" = 1 where "n_srno" = "old_name"."n_srno" and "old_name"."n_hold_pending" = 1
    else
      update "ord_mst" set "n_chk_pending" = 0 where "n_srno" = "old_name"."n_srno" and "old_name"."n_hold_pending" = 1
    end if end if;
  if("old_name"."n_block_stock" = 0 and "new_name"."n_block_stock" = 0) then return end if;
  select "count"() into "d_count" from "item_stock_block" where "item_stock_block"."c_item_code" = "old_name"."c_item_code";
  select "count"() into @isloexist from "lost_order_master" where "c_item_code" = "old_name"."c_item_code" and "n_ord_srno" = "old_name"."n_srno" and "c_ord_prefix" = "old_name"."c_prefix";
  if "new_name"."n_block_stock" > 0 and "old_name"."n_block_stock" = 0 and("old_name"."n_issue_qty" = 0 and "new_name"."n_issue_qty" = 0) and("new_name"."n_lock" = 0 and "old_name"."n_lock" = 0) then --putting block
    if "d_count" > 0 then
      update "item_stock_block"
        set "n_qty" = "n_qty"+("new_name"."n_qty"+"new_name"."n_scheme_qty"),
        "d_ldate" = "today"(),
        "t_ltime" = "now"()
        where "c_item_code" = "old_name"."c_item_code"
    else
      insert into "item_stock_block"( "c_item_code","n_qty","d_ldate","t_ltime" ) values
        ( "new_name"."c_item_code","new_name"."n_qty"+"new_name"."n_scheme_qty","today"(),"now"() ) 
    end if;
    if("new_name"."n_qty_actual"-"new_name"."n_qty") > 0 and @isloexist <= 0 then
      insert into "lost_order_master"( "c_item_code",
        "d_date",
        "n_qty",
        "c_ord_year",
        "c_ord_prefix",
        "n_ord_srno",
        "c_reason_code",
        "n_block_stock" ) on existing skip values
        ( "new_name"."c_item_code","uf_default_date"(),"new_name"."n_qty_actual"-"new_name"."n_qty","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",'R08001',"new_name"."n_block_stock" ) 
    end if end if; --EOF putting block
  if "new_name"."n_block_stock" = 0 and "old_name"."n_block_stock" = 1 and("old_name"."n_issue_qty" = 0 and "new_name"."n_issue_qty" = 0) and("new_name"."n_lock" = 0 and "old_name"."n_lock" = 0) then ---block removed
    update "item_stock_block"
      set "n_qty" = "n_qty"-("old_name"."n_qty"+"old_name"."n_scheme_qty"),
      "d_ldate" = "today"(),
      "t_ltime" = "now"()
      where "c_item_code" = "old_name"."c_item_code"
  ---   delete from lost_order_master where c_item_code=old_name.c_item_code and n_ord_srno=old_name.n_srno and c_ord_prefix=old_name.c_prefix; 
  end if; -----EOF block removed
  if "new_name"."n_block_stock" > 0 and "old_name"."n_block_stock" > 0 and("old_name"."n_issue_qty" = 0 and "new_name"."n_issue_qty" = 0) and("new_name"."n_lock" = 0 and "old_name"."n_lock" = 0) then ---no change in block and qty modification
    if "new_name"."n_block_stock" = 1 and "old_name"."n_block_stock" = 1 then
      update "item_stock_block"
        set "n_qty" = "n_qty"-("old_name"."n_qty"+"old_name"."n_scheme_qty"),
        "d_ldate" = "today"(),
        "t_ltime" = "now"()
        where "c_item_code" = "old_name"."c_item_code";
      update "item_stock_block"
        set "n_qty" = "n_qty"+("new_name"."n_qty"+"new_name"."n_scheme_qty"),
        "d_ldate" = "today"(),
        "t_ltime" = "now"()
        where "c_item_code" = "old_name"."c_item_code"
    end if;
    if @isloexist > 0 then
      delete from "lost_order_master" where "c_item_code" = "old_name"."c_item_code" and "n_ord_srno" = "old_name"."n_srno" and "c_ord_prefix" = "old_name"."c_prefix";
      set @isloexist = 0
    end if;
    if @isloexist <= 0 then
      if "new_name"."n_qty_actual" > "new_name"."n_qty" then
        insert into "lost_order_master"( "c_item_code",
          "d_date",
          "n_qty",
          "c_ord_year",
          "c_ord_prefix",
          "n_ord_srno",
          "c_reason_code",
          "n_block_stock" ) on existing skip values
          ( "new_name"."c_item_code","uf_default_date"(),"new_name"."n_qty_actual"-"new_name"."n_qty","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",'R08001',"new_name"."n_block_stock" ) 
      end if end if end if; --EOF ---no change in block and qty modification
  -------------Do Not process
  if "new_name"."n_block_stock" = 1 and "old_name"."n_block_stock" = 1 then
    select "isnull"("n_invno",0) into @invno from "ord_mst" where "n_srno" = "old_name"."n_srno" and "c_prefix" = "old_name"."c_prefix";
    if "new_name"."n_lock" = 1 and("old_name"."n_lock" = 0 or "old_name"."n_lock" = 2) and "old_name"."n_issue_qty" = 0 and "new_name"."n_issue_qty" = 0 and @invno = 0 then
      update "item_stock_block"
        set "n_qty" = "n_qty"-("old_name"."n_qty"+"old_name"."n_scheme_qty"),
        "d_ldate" = "today"(),
        "t_ltime" = "now"()
        where "c_item_code" = "old_name"."c_item_code"
    end if;
    if("new_name"."n_lock" = 0 or "new_name"."n_lock" = 2) and "old_name"."n_lock" = 1 and "old_name"."n_issue_qty" = 0 and "new_name"."n_issue_qty" = 0 and @invno = 0 then
      update "item_stock_block"
        set "n_qty" = "n_qty"+("old_name"."n_qty"+"old_name"."n_scheme_qty"),
        "d_ldate" = "today"(),
        "t_ltime" = "now"()
        where "c_item_code" = "old_name"."c_item_code"
    end if
  end if
end;
CREATE TRIGGER "ledger_insert_from_act_mst" after insert order 1
on "DBA".act_mst
referencing new as new_name
for each row
begin
  declare d_amount decimal(14,2);
  declare dt_date date;

  If new_name.c_drug_licence_no_1 is not null or trim(new_name.c_drug_licence_no_1) <> ''  then
    INSERT INTO  act_license_det (c_act_code,c_license_code,c_license_no,d_valid_to,d_date,c_user,d_ldate,c_luser)
          Values(new_name.c_code,'L00001' ,TRIM(new_name.c_drug_licence_no_1),new_name.d_dl_date,uf_default_date(),new_name.c_user,null,null);
  End if  ;

  If new_name.c_drug_licence_no_2 is not null or trim(new_name.c_drug_licence_no_2) <> ''  then
    INSERT INTO  act_license_det (c_act_code,c_license_code,c_license_no,d_valid_to,d_date,c_user,d_ldate,c_luser)
          Values(new_name.c_code,'L00002' ,TRIM(new_name.c_drug_licence_no_2),null,uf_default_date(),new_name.c_user,null,null);
  End if  ;
  If new_name.c_narcotic_dl_no is not null or trim(new_name.c_narcotic_dl_no) <> ''  then
    INSERT INTO  act_license_det (c_act_code,c_license_code,c_license_no,d_valid_to,d_date,c_user,d_ldate,c_luser)
          Values(new_name.c_code,'L00003' ,TRIM(new_name.c_narcotic_dl_no),null,uf_default_date(),new_name.c_user,null,null);
  End if  ;

  If new_name.c_food_lic_no is not null or trim(new_name.c_food_lic_no) <> ''  then
    INSERT INTO  act_license_det (c_act_code,c_license_code,c_license_no,d_valid_to,d_date,c_user,d_ldate,c_luser)
          Values(new_name.c_code,'L00004' ,TRIM(new_name.c_food_lic_no),null,uf_default_date(),new_name.c_user,null,null);
  End if  ;
      
  insert into act_balance(c_act_code,n_cur_bal) values(new_name.c_code,0);
  if new_name.n_op_bal<>0 then
    select days(d_ac_year_st_date,-1) into dt_date from system_parameter;
    if new_name.c_credit_debit='C' then set d_amount=(-1)*new_name.n_op_bal
    else set d_amount=new_name.n_op_bal
    end if
    ;
    insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values('OP',
      -1,new_name.c_code,dt_date,d_amount,'~~~~~~');
    update ledger set n_amount=ledger.n_amount-d_amount where c_prefix='OP'
      and n_tran_no=-1 and c_act_code='~~~~~~'
  end if
end;
CREATE TRIGGER "license_insert_from_act_mst_ship_det" after insert order 1
on "DBA".act_mst_ship_det
referencing new as new_name
for each row
begin

  If new_name.c_drug_licence_no_1 is not null or trim(new_name.c_drug_licence_no_1) <> ''  then

    INSERT INTO  act_ship_license_det (c_act_code,c_ship_code,c_license_code,c_license_no,d_valid_to,d_date,c_user,d_ldate,c_luser) on existing update
          Values(new_name.c_code,new_name.c_ship_code,'L00001' ,TRIM(new_name.c_drug_licence_no_1),new_name.d_dl_date,uf_default_date(),new_name.c_user,null,null);

  End if  ;

  If new_name.c_drug_licence_no_2 is not null or trim(new_name.c_drug_licence_no_2) <> ''  then
    INSERT INTO  act_ship_license_det (c_act_code,c_ship_code,c_license_code,c_license_no,d_valid_to,d_date,c_user,d_ldate,c_luser) on existing update
          Values(new_name.c_code,new_name.c_ship_code,'L00002' ,TRIM(new_name.c_drug_licence_no_2),null,uf_default_date(),new_name.c_user,null,null);
  End if  ;
  If new_name.c_narcotic_dl_no is not null or trim(new_name.c_narcotic_dl_no) <> ''  then
    INSERT INTO  act_ship_license_det (c_act_code,c_ship_code,c_license_code,c_license_no,d_valid_to,d_date,c_user,d_ldate,c_luser) on existing update
          Values(new_name.c_code,new_name.c_ship_code,'L00003',TRIM(new_name.c_narcotic_dl_no),null,uf_default_date(),new_name.c_user,null,null);
  End if  ;

  If new_name.c_food_lic_no is not null or trim(new_name.c_food_lic_no) <> ''  then
    INSERT INTO  act_ship_license_det (c_act_code,c_ship_code,c_license_code,c_license_no,d_valid_to,d_date,c_user,d_ldate,c_luser) on existing update
          Values(new_name.c_code,new_name.c_ship_code,'L00004',TRIM(new_name.c_food_lic_no),null,uf_default_date(),new_name.c_user,null,null);
  End if;
end;
CREATE TRIGGER "license_update_from_act_mst_ship_det" after update order 1 on
"DBA"."act_mst_ship_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "s_lc_code" char(6);
  if "New_name"."c_drug_licence_no_1" is null and "old_name"."c_drug_licence_no_1" is not null then
    delete from "act_ship_license_det"
      where "act_ship_license_det"."c_ship_code" = "new_name"."c_ship_code"
      and "act_license_det"."c_act_code" = "new_name"."c_code"
      and "act_ship_license_det"."c_license_code" = 'L00001'
  else
    select "c_license_code" into "s_lc_code" from "act_ship_license_det"
      where "act_ship_license_det"."c_ship_code" = "new_name"."c_ship_code"
      and "act_ship_license_det"."c_act_code" = "new_name"."c_code"
      and "act_ship_license_det"."c_license_code" = 'L00001';
    if sqlstate = '02000' then
      if "new_name"."c_drug_licence_no_1" is not null then
        insert into "act_ship_license_det"( "c_act_code","c_ship_code","c_license_code","c_license_no","d_valid_to","d_date","c_user","d_ldate","c_luser" ) values
          ( "new_name"."c_code","new_name"."c_ship_code",'L00001',"TRIM"("new_name"."c_drug_licence_no_1"),"new_name"."d_dl_date","uf_default_date"(),"new_name"."c_user",null,null ) 
      end if
    else update "act_ship_license_det" set "c_license_no" = "new_name"."c_drug_licence_no_1","d_valid_to" = "new_name"."d_dl_date","c_luser" = "new_name"."c_user",
        "d_ldate" = "uf_default_date"()
        where "act_ship_license_det"."c_ship_code" = "new_name"."c_ship_code"
        and "act_ship_license_det"."c_act_code" = "new_name"."c_code"
        and "act_ship_license_det"."c_license_code" = 'L00001'
    end if end if;
  if "New_name"."c_drug_licence_no_2" is null and "OLD_name"."c_drug_licence_no_2" is not null then
    delete from "act_ship_license_det"
      where "act_ship_license_det"."c_ship_code" = "new_name"."c_ship_code"
      and "act_ship_license_det"."c_act_code" = "new_name"."c_code"
      and "act_ship_license_det"."c_license_code" = 'L00002'
  else
    select "c_license_code" into "s_lc_code" from "act_ship_license_det"
      where "act_ship_license_det"."c_ship_code" = "new_name"."c_ship_code"
      and "act_ship_license_det"."c_act_code" = "new_name"."c_code"
      and "act_ship_license_det"."c_license_code" = 'L00002';
    if sqlstate = '02000' then
      if "new_name"."c_drug_licence_no_2" is not null then
        insert into "act_ship_license_det"( "c_act_code","c_ship_code","c_license_code","c_license_no","d_valid_to","d_date","c_user","d_ldate","c_luser" ) values
          ( "new_name"."c_code","new_name"."c_ship_code",'L00002',"TRIM"("new_name"."c_drug_licence_no_2"),null,"uf_default_date"(),"new_name"."c_user",null,null ) 
      end if
    else update "act_ship_license_det" set "c_license_no" = "new_name"."c_drug_licence_no_2","c_luser" = "new_name"."c_user","d_ldate" = "uf_default_date"()
        where "act_ship_license_det"."c_ship_code" = "new_name"."c_ship_code"
        and "act_ship_license_det"."c_act_code" = "new_name"."c_code"
        and "act_ship_license_det"."c_act_code" = 'L00002'
    end if end if;
  if "New_name"."c_narcotic_dl_no" is null and "OLD_name"."c_narcotic_dl_no" is not null then
    delete from "act_ship_license_det"
      where "act_ship_license_det"."c_ship_code" = "new_name"."c_ship_code"
      and "act_ship_license_det"."c_act_code" = "new_name"."c_code"
      and "act_ship_license_det"."c_license_code" = 'L00003'
  else
    select "c_license_code" into "s_lc_code" from "act_ship_license_det"
      where "act_ship_license_det"."c_ship_code" = "new_name"."c_ship_code"
      and "act_ship_license_det"."c_act_code" = "new_name"."c_coDe"
      and "act_ship_license_det"."c_license_code" = 'L00003';
    if sqlstate = '02000' then
      if "new_name"."c_narcotic_dl_no" is not null then
        insert into "act_ship_license_det"( "c_act_code","c_ship_code","c_license_code","c_license_no","d_valid_to","d_date","c_user","d_ldate","c_luser" ) values
          ( "new_name"."c_code","new_name"."c_ship_code",'L00003',"TRIM"("new_name"."c_narcotic_dl_no"),null,"uf_default_date"(),"new_name"."c_user",null,null ) 
      end if
    else update "act_ship_license_det" set "c_license_no" = "new_name"."c_narcotic_dl_no","c_luser" = "new_name"."c_user","d_ldate" = "uf_default_date"()
        where "act_ship_license_det"."c_ship_code" = "new_name"."c_ship_code"
        and "act_ship_license_det"."c_act_code" = "new_name"."c_code"
        and "act_ship_license_det"."c_license_code" = 'L00003'
    end if end if;
  if "New_name"."c_food_lic_no" is null and "OLD_name"."c_food_lic_no" is not null then
    delete from "act_ship_license_det"
      where "act_ship_license_det"."c_ship_code" = "new_name"."c_ship_code"
      and "act_ship_license_det"."c_act_code" = "new_name"."c_code"
      and "act_ship_license_det"."c_license_code" = 'L00004'
  else
    select "c_license_code" into "s_lc_code" from "act_ship_license_det"
      where "act_ship_license_det"."c_act_code" = "new_name"."c_coDe"
      and "act_ship_license_det"."c_ship_code" = "new_name"."c_ship_coDe"
      and "act_ship_license_det"."c_license_code" = 'L00004';
    if sqlstate = '02000' then
      if "new_name"."c_food_lic_no" is not null then
        insert into "act_ship_license_det"( "c_act_code","c_ship_code","c_license_code","c_license_no","d_valid_to","d_date","c_user","d_ldate","c_luser" ) values
          ( "new_name"."c_code","new_name"."c_ship_code",'L00004',"TRIM"("new_name"."c_food_lic_no"),null,"uf_default_date"(),"new_name"."c_user",null,null ) 
      end if
    else update "act_ship_license_det" set "c_license_no" = "new_name"."c_food_lic_no","c_luser" = "new_name"."c_user","d_ldate" = "uf_default_date"()
        where "act_ship_license_det"."c_ship_code" = "new_name"."c_ship_code"
        and "act_ship_license_det"."c_act_code" = "new_name"."c_code"
        and "act_ship_license_det"."c_license_code" = 'L00004'
    end if
  end if
end;
CREATE TRIGGER "post_purchase_from_item_receipt_entry"
--------------------------------------------------
 after insert order 1 on
"DBA"."item_receipt_entry"
referencing new as "new_name"
for each row
begin
  declare @tray_code char(6);
  declare @d_ldate date;
  declare @dt_ltime "datetime";
  declare @gre_prefix char(4);
  declare @gre_year char(2);
  declare @gre_br_code char(6);
  declare @gre_srno numeric(18);
  declare @gre_seq,@gresrno_gen numeric(4);
  declare @supp_code char(6);
  declare @qtb numeric(4);
  set @d_ldate = "DBA"."uf_default_date"();
  set @dt_ltime = cast(@d_ldate+"now"() as "datetime");
  select top 1 "c_supp_code" into @supp_code from "gate_pass_mst" where "n_srno" = "new_name"."n_gate_pass_no";
  select "n_qty_per_box" into @qtb from "item_mst" where "c_code" = "new_name"."c_item_code";
  set @gresrno_gen = 0;
  set @gre_prefix = 'GR';
  --  if new_name.n_type = 1 then
  --    update purchase_det set n_post = 1 where n_srno = new_name.n_pur_srno and n_seq = new_name.n_pur_seq;
  --    update purchase_mst set d_ldate = @d_ldate,t_ltime = @dt_ltime where c_br_code = new_name.c_pur_br_code and c_year = new_name.c_pur_year and c_prefix = new_name.c_pur_prefix and n_srno = new_name.n_pur_srno;
  select "max"("goods_rec_det"."n_srno")
    into @gre_srno from "goods_rec_det" join "goods_rec_mst"
      on "goods_rec_det"."n_srno" = "goods_rec_mst"."n_srno"
    where "goods_rec_mst"."n_gate_pass_no" = "new_name"."n_gate_pass_no"
    group by "goods_rec_mst"."n_gate_pass_no";
  if @gre_srno is null then
    set @gre_srno = 0
  end if;
  if @gre_srno = '' then
    set @gre_srno = 0
  end if;
  if @gre_srno = 0 then --//if gre is not generated with respective gatepass no
    set @gre_seq = 1;
    set @gre_srno = "uf_get_new_tran"('GREPU');
    if @gre_srno is null then
      set @gre_srno = 0
    end if;
    if "length"(@gre_srno) = 9 then
      set @gresrno_gen = 1
    end if;
    if "length"(@gre_srno) = 10 then
      if "right"("string"(@gre_srno),1) = 0 then
        set @gresrno_gen = 1
      end if end if;
    if @gresrno_gen = 0 then
      insert into "goods_rec_mst"
        ( "c_prefix","n_srno","d_date","c_supp_code","n_total","c_ref_no","c_ref_prefix","n_ref_no","c_remark","n_shift","n_min_wt","n_max_wt","n_min_inn_wt","n_max_inn_wt","n_min_out_wt","n_max_out_wt","n_cancel_flag","d_ldate","c_user","c_luser",
        "c_computer_name","c_sys_user","c_sys_ip","c_sman_code","n_post","n_gate_pass_no","c_user_2","n_entry_type" ) values
        ( @gre_prefix,@gre_srno,"uf_default_date"(),@supp_code,0,null,null,0,'CREATED FROM LINE ITEM ENTRY',
        0,0,0,0,0,0,0,0,@d_ldate,"new_name"."c_user","new_name"."c_user",null,null,null,null,1,"new_name"."n_gate_pass_no",null,0 ) ;
      insert into "goods_rec_det"
        ( "n_srno","n_seq","c_item_code","c_batch_no","d_exp_dt","n_qty","n_ret_qty","n_loose_qty","n_ret_loose_qty","n_mrp","n_case_type","n_min_wt","n_max_wt","c_note","c_ref_prefix","n_ref_no","n_ref_seq","n_cancel_flag","d_date","d_ldate",
        "n_shift","t_ltime","n_ref_pk","n_entry_type","n_post","c_supp_code","n_gate_pass_no" ) values
        ( @gre_srno,@gre_seq,"new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_expiry_date",
        "new_name"."n_qty",0,0,0,"new_name"."n_mrp",0,0,0,null,null,0,0,0,"uf_default_date"(),"uf_default_date"(),0,@dt_ltime,0,0,1,@supp_code,"new_name"."n_gate_pass_no" ) 
    --//if gre already there for respective gatepassno
    end if
  else select top 1 "n_seq"
      into @gre_seq from "goods_rec_det"
      where "goods_rec_det"."n_srno" = @gre_srno
      order by "n_seq" desc;
    update "goods_rec_mst" set "goods_rec_mst"."n_post" = 1,"goods_rec_mst"."d_ldate" = @d_ldate,"goods_rec_mst"."t_ltime" = "now"()
      where "goods_rec_mst"."n_srno" = @gre_srno and "n_post" = 0;
    insert into "goods_rec_det"
      ( "n_srno","n_seq","c_item_code","c_batch_no","d_exp_dt","n_qty","n_ret_qty","n_loose_qty","n_ret_loose_qty","n_mrp","n_case_type","n_min_wt","n_max_wt","c_note","c_ref_prefix","n_ref_no","n_ref_seq","n_cancel_flag","d_date",
      "d_ldate","n_shift","t_ltime","n_ref_pk","n_entry_type","n_post","c_supp_code","n_gate_pass_no" ) values
      ( @gre_srno,@gre_seq+1,"new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_expiry_date",
      "new_name"."n_qty",0,0,0,"new_name"."n_mrp",0,0,0,null,null,0,0,0,"uf_default_date"(),"uf_default_date"(),0,@dt_ltime,0,0,1,@supp_code,"new_name"."n_gate_pass_no" ) 
  -- end if
  end if
end;
CREATE TRIGGER "purchase_mst.update_deleted_mst_on_purchase_mst_delete" before delete order 2 on
"DBA"."purchase_mst"
referencing old as "old_name"
for each row
begin
  declare @jv_no,@voucher_no numeric(18);
  declare @voucher_prefix char(2);
  insert into "deleted_mst"( "c_prefix","n_srno","d_date","c_code","n_amount","c_remark" ) values
    ( "old_name"."c_prefix","old_name"."n_srno","old_name"."d_purchase_date","old_name"."c_supp_code","old_name"."n_total","old_name"."c_purchase_bill_no" ) ;
  delete from "settle_mst_header" where "n_srno" = "old_name"."n_srno" and "c_prefix" = "old_name"."c_prefix";
  if "old_name"."n_post" = 1 then
    delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
      and "ledger"."n_tran_no" = "old_name"."n_srno";
    delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix"
      and "remarks"."n_tran_id" = "old_name"."n_srno";
    delete from "settle_mst"
      where "settle_mst"."c_year" = "old_name"."c_year"
      and "settle_mst"."c_prefix" = "old_name"."c_prefix"
      and "settle_mst"."n_srno" = "old_name"."n_srno"
      and "settle_mst"."c_year1" = "old_name"."c_year"
      and "settle_mst"."c_prefix1" = "old_name"."c_prefix"
      and "settle_mst"."n_srno1" = "old_name"."n_srno";
    -------rtnsale 
    delete from "settle_mst"
      where "settle_mst"."c_year" = "old_name"."c_year"
      and "settle_mst"."c_prefix" = "old_name"."c_prefix"
      and "settle_mst"."n_srno" = "old_name"."n_srno"
      and "settle_mst"."c_prefix1" = "old_name"."c_rtn_sale_prefix"
      and "settle_mst"."n_srno1" = "old_name"."n_rtn_sale_no";
    -------
    delete from "gst_ledger_mst" where "gst_ledger_mst"."n_srno" = "old_name"."n_srno";
    delete from "gst_ledger_mst" where "gst_ledger_mst"."n_srno" = -"old_name"."n_srno";
    if "old_name"."n_tds_amt" <> 0 and "old_name"."n_skip_tds_jv" = 0 then
      select "n_srno" into @jv_no from "jv_mst" where "n_ref_no_tds" = "old_name"."n_srno";
      if @jv_no is null then
        set @jv_no = 0
      end if;
      if @jv_no > 0 then
        delete from "jv_mst" where "n_srno" = @jv_no;
        delete from "jv_det" where "n_srno" = @jv_no
      end if
    end if //if old_name.n_post = 1 then
  end if
end;
CREATE TRIGGER "receipt.delete_update_ledger" after delete order 2 on
---------------------receipt delete
"DBA"."receipt"
referencing old as "old_name"
for each row
begin
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno";
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix" and "remarks"."n_tran_id" = "old_name"."n_srno";
  delete from "settle_mst"
    where "settle_mst"."c_year" = "old_name"."c_year"
    and "settle_mst"."c_prefix" = "old_name"."c_prefix"
    and "settle_mst"."n_srno" = "old_name"."n_srno"
    and "settle_mst"."c_year1" = "old_name"."c_year"
    and "settle_mst"."c_prefix1" = "old_name"."c_prefix"
    and "settle_mst"."n_srno1" = "old_name"."n_srno";
  insert into "deleted_mst"( "c_prefix","n_srno","d_date","c_code","n_amount","c_remark" ) values
    ( "old_name"."c_prefix","old_name"."n_srno","old_name"."d_rec_date","old_name"."c_act_code","old_name"."n_total","old_name"."c_remark" ) ;
  call "usp_check_update_last_tran_info"(1,"old_name"."c_act_code",13,"old_name"."c_prefix","old_name"."n_srno","old_name"."d_rec_date")
end;
CREATE TRIGGER "receipt.insert_insert_into_ledger" after insert order 1 on
----------------------receipt insert
"DBA"."receipt"
referencing new as "new_name"
for each row
begin
  declare "debit_account_code" char(6);
  declare "n_supp" decimal(1);
  select "n_supplier" into "n_supp" from "act_mst" where "c_code" = "new_name"."c_act_code";
  if "left"("new_name"."c_debit_act_code",4) = 'CASH' then
    set "debit_account_code" = "new_name"."c_debit_act_code"
  else
    set "debit_account_code" = 'RCRECV'
  end if;
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_act_code","new_name"."d_rec_date",
    -"new_name"."n_total",if "new_name"."d_reconcile_date" is not null and "new_name"."n_return" = 0 then "new_name"."c_debit_act_code" else "debit_account_code" endif ) ;
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","debit_account_code","new_name"."d_rec_date",
    "new_name"."n_total","new_name"."c_act_code" ) ;
  if "new_name"."d_reconcile_date" is not null then
    if "new_name"."n_return" = 1 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_act_code","new_name"."d_reconcile_date",
        "new_name"."n_total","debit_account_code" ) ;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","debit_account_code","new_name"."d_reconcile_date",
        -"new_name"."n_total","new_name"."c_act_code" ) 
    else
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_debit_act_code","new_name"."d_reconcile_date",
        "new_name"."n_total","new_name"."c_act_code" ) ;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","debit_account_code","new_name"."d_reconcile_date",
        -"new_name"."n_total","new_name"."c_debit_act_code" ) 
    end if end if;
  if "n_supp" = 1 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","d_date","c_cust_code","d_due_date" ) values
      ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
      -1*"new_name"."n_total","new_name"."d_rec_date","new_name"."c_act_code",if "new_name"."d_chq_dt" is null then "new_name"."d_rec_date" else "new_name"."d_chq_dt" endif ) 
  end if;
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_chq_no","new_name"."d_chq_dt",if "new_name"."d_reconcile_date" is not null and "new_name"."n_return" = 1 then ': CHEQUE RETURNED : ' else '' endif+"isnull"("new_name"."c_remark",'') ) ;
  call "usp_check_update_last_tran_info"(0,"new_name"."c_act_code",13,"new_name"."c_prefix","new_name"."n_srno","new_name"."d_rec_date")
end;
CREATE TRIGGER "receipt.update_update_ledger" after update order 3 on
------------------receipt update
"DBA"."receipt"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "debit_account_code" char(6);
  declare "n_supp" decimal(1);
  select "n_supplier" into "n_supp" from "act_mst" where "c_code" = "new_name"."c_act_code";
  if "old_name"."n_slip_no" = 0 and("new_name"."n_slip_no" <> 0) then
    return
  end if;
  if "old_name"."n_slip_no" <> 0 and("new_name"."n_slip_no" = 0) then
    return
  end if;
  delete from "settle_mst"
    where "settle_mst"."c_year" = "old_name"."c_year"
    and "settle_mst"."c_prefix" = "old_name"."c_prefix"
    and "settle_mst"."n_srno" = "old_name"."n_srno"
    and "settle_mst"."c_year1" = "old_name"."c_year"
    and "settle_mst"."c_prefix1" = "old_name"."c_prefix"
    and "settle_mst"."n_srno1" = "old_name"."n_srno";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno";
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix" and "remarks"."n_tran_id" = "old_name"."n_srno";
  if "left"("new_name"."c_debit_act_code",4) = 'CASH' then
    set "debit_account_code" = "new_name"."c_debit_act_code"
  else
    set "debit_account_code" = 'RCRECV'
  end if;
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_act_code","new_name"."d_rec_date",
    -"new_name"."n_total",if "new_name"."d_reconcile_date" is not null and "new_name"."n_return" = 0 then "new_name"."c_debit_act_code" else "debit_account_code" endif ) ;
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","debit_account_code","new_name"."d_rec_date",
    "new_name"."n_total","new_name"."c_act_code" ) ;
  if "new_name"."d_reconcile_date" is not null then
    if "new_name"."n_return" = 1 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_act_code","new_name"."d_reconcile_date",
        "new_name"."n_total","debit_account_code" ) ;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","debit_account_code","new_name"."d_reconcile_date",
        -"new_name"."n_total","new_name"."c_act_code" ) 
    else
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_debit_act_code","new_name"."d_reconcile_date",
        "new_name"."n_total","new_name"."c_act_code" ) ;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","debit_account_code","new_name"."d_reconcile_date",
        -"new_name"."n_total","new_name"."c_debit_act_code" ) 
    end if end if;
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_chq_no","new_name"."d_chq_dt",if "new_name"."d_reconcile_date" is not null and "new_name"."n_return" = 1 then ': CHEQUE RETURNED : ' else '' endif+"isnull"("new_name"."c_remark",'') ) ;
  if "n_supp" = 1 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","d_date","c_cust_code","d_due_date" ) values
      ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
      -1*"new_name"."n_total","new_name"."d_rec_date","new_name"."c_act_code",if "new_name"."d_chq_dt" is null then "new_name"."d_rec_date" else "new_name"."d_chq_dt" endif ) 
  end if
end;
CREATE TRIGGER "remark_from_stk_adj_mst_delete" after delete order 3 on
"DBA"."stock_adj_mst"
referencing old as "old_name"
for each row
begin
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix" and "remarks"."n_tran_id" = "old_name"."n_srno"
end;
CREATE TRIGGER "remark_from_stk_adj_mst_insert" after insert order 1 on
-------------------------------------------------------------------
"DBA"."stock_adj_mst"
referencing new as "new_name"
for each row
begin
  if "new_name"."n_post" = 1 and "new_name"."n_cancel_flag" <> 1 then
    insert into "remarks"( "c_prefix","c_chq_no","d_chq_dt","n_tran_id","c_remark" ) values
      ( "new_name"."c_prefix",null,null,"new_name"."n_srno","new_name"."c_remark" ) 
  end if
end;
CREATE TRIGGER "remark_from_stk_adj_mst_update" after update order 2 on
"DBA"."stock_adj_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix" and "remarks"."n_tran_id" = "old_name"."n_srno";
  if "new_name"."n_post" = 1 and "new_name"."n_cancel_flag" <> 1 then
    insert into "remarks"( "c_prefix","c_chq_no","d_chq_dt","n_tran_id","c_remark" ) values
      ( "new_name"."c_prefix",null,null,"new_name"."n_srno","new_name"."c_remark" ) 
  end if
end;
CREATE TRIGGER "scheme_ledger_insert_from_scheme_ledger_det" after insert order 1
on DBA.scheme_ledger_det
referencing new as new_name
for each row
Begin
    if (select count(*) from scheme_ledger where scheme_ledger.c_item_code=new_name.c_item_code) > 0 then 
        update 
            scheme_ledger set n_value =n_value+ new_name.n_value 
        where 
            scheme_ledger.c_item_code=new_name.c_item_code;
    Else
        insert into scheme_ledger (c_item_code,n_value) values(new_name.c_item_code,new_name.n_value);
    End if;    
End;
CREATE TRIGGER "sms_send_count_update" after update order 2 on
"DBA"."sms_outbox"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "chk",@enable_trace numeric(18);
  declare "def_date" date;
  declare @c_app_info long varchar;
  select "CONNECTION_PROPERTY"('AppInfo') into @c_app_info;
  select "n_enable_dbactivity_trace" into @enable_trace from "System_Parameter";
  set "def_date" = "uf_default_date"();
  if "new_name"."n_status" = 1 then
    select "count"() into "chk" from "sms_outbox_day_count" where "d_date" = "def_date";
    if "chk" is null then
      set "chk" = 0
    end if;
    if "chk" = 0 then
      insert into "sms_outbox_day_count"( "d_date","n_count" ) values( "def_date",1 ) 
    else
      update "sms_outbox_day_count" set "n_count" = "n_count"+1 where "d_date" = "def_date"
    end if;
    if @enable_trace = 1 then
      insert into "backend_activity_trace"( "n_tran_no","c_prefix","c_code","n_type","c_activity_desc" ) values
        ( "new_name"."n_srno",'-','SMS',3,@c_app_info ) 
    end if
  end if
end;
CREATE TRIGGER "stock_adj.delete_update_stock" after delete order 3 on
"DBA"."stock_adj"
referencing old as "old_name"
for each row
begin
  declare "d_old_godown_qty" decimal(11,3);
  declare @pk numeric(16);
  declare @brcode char(6);
  declare @year char(2);
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  if "len"("string"("old_name"."n_srno")) < 8 then
    set @pk = "uf_pk"(@brcode,@year,'OO',"old_name"."n_srno",0,'')
  else
    set @pk = "old_name"."n_srno"
  end if;
  delete from "stock_ledger"
    where "stock_ledger"."n_srno" = @pk
    and "stock_ledger"."n_seq" = 0;
  if "old_name"."n_pur_godown_flag" = 1 then
    set "d_old_godown_qty" = "old_name"."n_qty"
  else
    set "d_old_godown_qty" = 0
  end if;
  update "stock" set "stock"."n_adjustment_qty" = "stock"."n_adjustment_qty"-"old_name"."n_qty",
    "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty",
    "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"old_name"."n_scheme_qty",
    "stock"."n_godown_qty" = "stock"."n_godown_qty"-"d_old_godown_qty",
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
  if "old_name"."n_enable_supp_stock_sale" = 1 then
    delete from "Stock_inward_outwad" where "n_tran_no" = "old_name"."n_srno"
  end if;
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix" and "remarks"."n_tran_id" = "old_name"."n_srno";
  if "old_name"."n_qty" < 0 and "old_name"."n_supp_return" = 1 then
    update "stock_eb"
      set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "old_name"."n_adj_type" = 2 then "old_name"."n_qty" else 0 endif,
      "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "old_name"."n_adj_type" = 1 then "old_name"."n_qty" else 0 endif,
      "stock_eb"."n_oqty" = "stock_eb"."n_oqty"+if "old_name"."n_adj_type" <> 1 and "old_name"."n_adj_type" <> 2 and "old_name"."n_adj_type" <> 5 then "old_name"."n_qty" else 0 endif,
      "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "old_name"."n_adj_type" = 5 then "old_name"."n_qty" else 0 endif
      where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
  end if
end;
CREATE TRIGGER "stock_adj.insert_update_stock" after insert order 1 on
"DBA"."stock_adj"
referencing new as "new_name"
for each row
begin
  declare "c_tmp_code" char(6);
  declare "d_new_godown_qty" decimal(8);
  declare @pk numeric(18);
  declare @brcode char(6);
  declare @year,"cprefix" char(2);
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  if "len"("string"("new_name"."n_srno")) < 8 then
    set @pk = "uf_pk"(@brcode,@year,'OO',"new_name"."n_srno",0,'')
  else
    set @pk = "new_name"."n_srno"
  end if;
  set "cprefix" = "uf_get_pk_component"(@pk,3);
  if "new_name"."n_pur_godown_flag" = 1 then
    set "d_new_godown_qty" = "new_name"."n_qty"
  else
    set "d_new_godown_qty" = 0
  end if;
  insert into "stock_ledger"
    ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
    "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_prefix" ) values
    ( @pk,0,"new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_date",
    "new_name"."n_qty","new_name"."n_scheme_qty",0,"new_name"."n_sale_rate",0,0,0,
    0,0,0,0,0,0,0,0,"new_name"."c_hsn_sac_code","cprefix" ) ;
  update "stock" set "stock"."n_adjustment_qty" = "stock"."n_adjustment_qty"+"new_name"."n_qty",
    "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty",
    "stock"."n_godown_qty" = "stock"."n_godown_qty"+"d_new_godown_qty",
    "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"new_name"."n_scheme_qty",
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
  if "new_name"."n_enable_supp_stock_sale" = 1 then
    insert into "Stock_inward_outwad"( "c_item_code","c_batch_no","n_tran_no","c_supp_code","n_qty","n_schm_qty","d_date","n_flag" ) values
      ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_srno","new_name"."c_code_supp","new_name"."n_qty","new_name"."n_scheme_qty","new_name"."d_date",5 ) 
  end if;
  insert into "remarks"( "c_prefix","c_chq_no","d_chq_dt","n_tran_id","c_remark" ) values
    ( "new_name"."c_prefix",null,null,"new_name"."n_srno","new_name"."c_remark" ) ;
  if "new_name"."n_qty" < 0 and "new_name"."n_supp_return" = 1 then
    select "c_item_code" into "c_tmp_code" from "stock_eb" where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
    if sqlcode = 100 then
      insert into "stock_eb"( "c_item_code","c_batch_no","n_eqty","n_bqty","n_oqty","n_rqty" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no",
        if "new_name"."n_adj_type" = 2 then(-"new_name"."n_qty") else 0 endif,
        if "new_name"."n_adj_type" = 1 then-"new_name"."n_qty" else 0 endif,
        if "new_name"."n_adj_type" <> 1 and "new_name"."n_adj_type" <> 2 and "new_name"."n_adj_type" <> 5 then-"new_name"."n_qty" else 0 endif,
        if "new_name"."n_adj_type" = 5 then-"new_name"."n_qty" else 0 endif ) 
    else
      update "stock_eb"
        set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "new_name"."n_adj_type" = 2 then-"new_name"."n_qty" else 0 endif,
        "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "new_name"."n_adj_type" = 1 then-"new_name"."n_qty" else 0 endif,
        "stock_eb"."n_oqty" = "stock_eb"."n_oqty"+if "new_name"."n_adj_type" <> 1 and "new_name"."n_adj_type" > 2 and "new_name"."n_adj_type" <> 5 then(-"new_name"."n_qty") else 0 endif,
        "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "new_name"."n_adj_type" = 5 then-"new_name"."n_qty" else 0 endif
        where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no"
    end if;
    if "new_name"."n_adj_type" = 3 then
      if(select "isnull"("n_update_item_status_from_stk_adj",1) from "System_Parameter") = 1 then
        update "item_mst" set "n_old_flag" = 2,"d_ldate" = "uf_default_date"() where "c_code" = "new_name"."c_item_code"
      end if
    end if
  end if
end;
CREATE TRIGGER "stock_adj.update_update_stock" after update order 2 on
"DBA"."stock_adj"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "c_tmp_code" char(6);
  declare "d_old_godown_qty" decimal(11,3);
  declare "d_new_godown_qty" decimal(11,3);
  declare @pk numeric(18);
  declare @brcode char(6);
  declare @year,"cprefix" char(2);
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  if "len"("string"("new_name"."n_srno")) < 8 then
    set @pk = "uf_pk"(@brcode,@year,'OO',"new_name"."n_srno",0,'')
  else
    set @pk = "new_name"."n_srno"
  end if;
  set "cprefix" = "uf_get_pk_component"("new_name"."n_srno",3);
  delete from "stock_ledger"
    where "stock_ledger"."n_srno" = @pk
    and "stock_ledger"."n_seq" = 0;
  insert into "stock_ledger"
    ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
    "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_prefix" ) values
    ( @pk,0,"new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_date",
    "new_name"."n_qty","new_name"."n_scheme_qty",0,"new_name"."n_sale_rate",0,0,0,
    0,0,0,0,0,0,0,0,"new_name"."c_hsn_sac_code","cprefix" ) ;
  if "old_name"."n_pur_godown_flag" = 1 then
    set "d_old_godown_qty" = "old_name"."n_qty"
  else
    set "d_old_godown_qty" = 0
  end if;
  if "new_name"."n_pur_godown_flag" = 1 then
    set "d_new_godown_qty" = "new_name"."n_qty"
  else
    set "d_new_godown_qty" = 0
  end if;
  if "old_name"."n_qty" < 0 then
    update "stock" set "stock"."n_adjustment_qty" = "stock"."n_adjustment_qty"-"old_name"."n_qty",
      "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty",
      "stock"."n_godown_qty" = "stock"."n_godown_qty"-"d_old_godown_qty",
      "stock"."t_ltime" = "now"()
      where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no"
  end if;
  ---jagamohan
  if "old_name"."n_scheme_qty" < 0 then
    update "stock"
      set "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"old_name"."n_scheme_qty",
      "stock"."t_ltime" = "now"()
      where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no"
  end if;
  update "stock" set "stock"."n_adjustment_qty" = "stock"."n_adjustment_qty"+"new_name"."n_qty",
    "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty",
    "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"new_name"."n_scheme_qty",
    "stock"."n_godown_qty" = "stock"."n_godown_qty"+"d_new_godown_qty",
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
  if "new_name"."n_enable_supp_stock_sale" = 1 or "old_name"."n_enable_supp_stock_sale" = 1 then
    if "old_name"."n_enable_supp_stock_sale" = 1 then
      delete from "Stock_inward_outwad" where "n_tran_no" = "new_name"."n_srno"
    end if;
    if "new_name"."n_enable_supp_stock_sale" = 1 then
      insert into "Stock_inward_outwad"( "c_item_code","c_batch_no","n_tran_no","c_supp_code","n_qty","n_schm_qty","d_date","n_flag" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_srno","new_name"."c_code_supp","new_name"."n_qty","new_name"."n_scheme_qty","new_name"."d_date",5 ) 
    end if end if;
  if "old_name"."n_qty" > 0 then
    update "stock" set "stock"."n_adjustment_qty" = "stock"."n_adjustment_qty"-"old_name"."n_qty",
      "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty",
      "stock"."n_godown_qty" = "stock"."n_godown_qty"-"d_old_godown_qty",
      "stock"."t_ltime" = "now"()
      where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no"
  end if;
  ---jagamohan
  if "old_name"."n_scheme_qty" > 0 then
    update "stock"
      set "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"old_name"."n_scheme_qty",
      "stock"."t_ltime" = "now"()
      where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no"
  end if;
  update "remarks" set "remarks"."c_remark" = "new_name"."c_remark"
    where "remarks"."c_prefix" = "old_name"."c_prefix" and "remarks"."n_tran_id" = "new_name"."n_srno";
  if "new_name"."n_qty" < 0 and "new_name"."n_supp_return" = 1 then
    select "c_item_code" into "c_tmp_code" from "stock_eb" where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
    if sqlcode = 100 then
      insert into "stock_eb"( "c_item_code","c_batch_no","n_eqty","n_bqty","n_oqty","n_rqty" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no",
        if "new_name"."n_adj_type" = 2 then-"new_name"."n_qty" else 0 endif,
        if "new_name"."n_adj_type" = 1 then-"new_name"."n_qty" else 0 endif,
        if "new_name"."n_adj_type" <> 1 and "new_name"."n_adj_type" <> 2 and "new_name"."n_adj_type" <> 5 then-"new_name"."n_qty" else 0 endif,
        if "new_name"."n_adj_type" = 5 then-"new_name"."n_qty" else 0 endif ) 
    else
      update "stock_eb"
        set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "new_name"."n_adj_type" = 2 then-"new_name"."n_qty" else 0 endif,
        "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "new_name"."n_adj_type" = 1 then-"new_name"."n_qty" else 0 endif,
        "stock_eb"."n_oqty" = "stock_eb"."n_oqty"+if "new_name"."n_adj_type" <> 1 and "new_name"."n_adj_type" <> 2 and "new_name"."n_adj_type" <> 5 then-"new_name"."n_qty" else 0 endif,
        "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "new_name"."n_adj_type" = 5 then-"new_name"."n_qty" else 0 endif
        where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no"
    end if;
    if "new_name"."n_adj_type" = 3 then
      if(select "isnull"("n_update_item_status_from_stk_adj",1) from "System_Parameter") = 1 then
        update "item_mst" set "n_old_flag" = 2,"d_ldate" = "uf_default_date"() where "c_code" = "new_name"."c_item_code"
      end if end if end if;
  if "old_name"."n_qty" < 0 and "old_name"."n_supp_return" = 1 then
    update "stock_eb"
      set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "old_name"."n_adj_type" = 2 then "old_name"."n_qty" else 0 endif,
      "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "old_name"."n_adj_type" = 1 then "old_name"."n_qty" else 0 endif,
      "stock_eb"."n_oqty" = "stock_eb"."n_oqty"+if "old_name"."n_adj_type" <> 1 and "old_name"."n_adj_type" <> 2 and "old_name"."n_adj_type" <> 5 then "old_name"."n_qty" else 0 endif,
      "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "old_name"."n_adj_type" = 5 then "old_name"."n_qty" else 0 endif
      where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
  end if
end;
CREATE TRIGGER "updat_stock_when_crnt_det_deleted" before delete order 2 on
----Triggers for Stock Ledger Changes
--Crnt Trigger
"DBA"."crnt_det"
referencing old as "old_name"
for each row
begin
  declare @d_sale_rate numeric(14,3);
  declare @year char(2);
  declare @pk numeric(18);
  declare @brcode char(6);
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  --if len(string(old_name.n_srno)) < 8 then
  --  set @pk = uf_pk(@brcode,@year,'CR',old_name.n_srno,0,'')
  --else
  set @pk = "old_name"."n_srno";
  --end if;
  if "old_name"."n_post" <> 1 then
    return
  end if;
  if("old_name"."n_type_of_ret" = 1 or "old_name"."n_type_of_ret" = 2 or "old_name"."n_type_of_ret" = 5) and "old_name"."n_supp_ret" = 1 then
    update "stock_eb"
      set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"-if "old_name"."n_type_of_ret" = 2 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_bqty" = "stock_eb"."n_bqty"-if "old_name"."n_type_of_ret" = 1 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"-if "old_name"."n_type_of_ret" = 2 then "old_name"."n_loose_qty" else 0 endif,
      "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"-if "old_name"."n_type_of_ret" = 1 then "old_name"."n_loose_qty" else 0 endif,
      "stock_eb"."n_rqty" = "stock_eb"."n_rqty"-if "old_name"."n_type_of_ret" = 5 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"-if "old_name"."n_type_of_ret" = 5 then "old_name"."n_loose_qty" else 0 endif
      where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
  end if;
  if "old_name"."n_type_of_ret" = 3 or "old_name"."n_type_of_ret" = 4 then
    update "stock" set "stock"."n_credit_note_qty" = "stock"."n_credit_note_qty"-"old_name"."n_qty",
      "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty"-"old_name"."n_scheme_qty",
      "stock"."n_credit_note_scheme_qty" = "stock"."n_credit_note_scheme_qty"-"old_name"."n_scheme_qty",
      "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"old_name"."n_scheme_qty",
      "stock"."t_ltime" = "now"(),
      "stock"."n_godown_qty" = if "old_name"."n_godown_flag" = 1 then "stock"."n_godown_qty"-"old_name"."n_qty"-"old_name"."n_scheme_qty" else "stock"."n_godown_qty" endif
      where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no"
  end if;
  if "old_name"."n_crnt_tmp_no" > 0 then
    update "crnt_tmp_det" set "crnt_tmp_det"."n_crnt_no" = 0
      where "crnt_tmp_det"."n_srno" = "old_name"."n_crnt_tmp_no"
      and "crnt_tmp_det"."c_item_code" = "old_name"."c_item_code"
      and "crnt_tmp_det"."c_batch_no" = "old_name"."c_batch_no"
  end if;
  delete from "stock_ledger"
    where "stock_ledger"."n_srno" = @pk
    and "stock_ledger"."n_seq" >= 0
    and "stock_ledger"."c_item_code" = "old_name"."c_item_code"
    and "stock_ledger"."c_batch_no" = "old_name"."c_batch_no";
  if "old_name"."n_enable_supp_stock_sale" = 1 then
    delete from "invoice_det_stk_sale"
      where "c_item_code" = "old_name"."c_item_code" and "c_batch_no" = "old_name"."c_batch_no" and "n_tran_no" = "old_name"."n_srno"
  end if
end;
CREATE TRIGGER "updat_stock_when_rtnpur_det_deleted" before delete order 2 on
----Triggers for Stock Ledger Changes
--Crnt Trigger
"DBA"."rtn_purchase_det"
referencing old as "old_name"
for each row
begin
  declare @d_sale_rate numeric(14,3);
  declare @year char(2);
  declare @pk numeric(16);
  declare @brcode char(6);
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  set @pk = "old_name"."n_srno";
  if "old_name"."n_post" <> 1 then
    return
  end if;
  if("old_name"."n_ret_type" = 1 or "old_name"."n_ret_type" = 2 or "old_name"."n_ret_type" = 5) and "old_name"."n_supp_ret" = 1 then
    update "stock_eb"
      set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"-if "old_name"."n_ret_type" = 2 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_bqty" = "stock_eb"."n_bqty"-if "old_name"."n_ret_type" = 1 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"-if "old_name"."n_ret_type" = 2 then "old_name"."n_loose_qty" else 0 endif,
      "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"-if "old_name"."n_ret_type" = 1 then "old_name"."n_loose_qty" else 0 endif,
      "stock_eb"."n_rqty" = "stock_eb"."n_rqty"-if "old_name"."n_ret_type" = 5 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"-if "old_name"."n_ret_type" = 5 then "old_name"."n_loose_qty" else 0 endif
      where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
  end if;
  if "old_name"."n_ret_type" = 3 or "old_name"."n_ret_type" = 4 then
    update "stock" set "stock"."n_credit_note_qty" = "stock"."n_credit_note_qty"-"old_name"."n_qty",
      "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty"-"old_name"."n_scheme_qty",
      "stock"."n_credit_note_scheme_qty" = "stock"."n_credit_note_scheme_qty"-"old_name"."n_scheme_qty",
      "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"old_name"."n_scheme_qty",
      "stock"."t_ltime" = "now"()
      where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
    if "old_name"."n_enable_supp_stock_sale" = 1 then
      delete from "invoice_det_stk_sale"
        where "c_item_code" = "old_name"."c_item_code" and "c_batch_no" = "old_name"."c_batch_no" and "n_tran_no" = "old_name"."n_srno" and "n_tran_seq" = "old_name"."n_seq"
    end if end if;
  delete from "stock_ledger"
    where "stock_ledger"."n_srno" = @pk
    and "stock_ledger"."n_seq" = "old_name"."n_seq"
    and "stock_ledger"."c_item_code" = "old_name"."c_item_code"
    and "stock_ledger"."c_batch_no" = "old_name"."c_batch_no"
end;
CREATE TRIGGER "update_act_balance_from_ledger" after update order 6 on
"DBA"."ledger"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "customer_old" numeric(1);
  declare "supplier_old" numeric(1);
  declare "customer_new" numeric(1);
  declare "supplier_new" numeric(1);
  select "isnull"("n_customer",0),"isnull"("n_supplier",0) into "customer_old","supplier_old" from "act_mst" where "c_code" = "old_name"."c_act_code";
  select "isnull"("n_customer",0),"isnull"("n_supplier",0) into "customer_new","supplier_new" from "act_mst" where "c_code" = "new_name"."c_act_code";
  if("customer_old"+"customer_new"+"supplier_old"+"supplier_new") > 0 then
    update "act_balance" set "act_balance"."n_cur_bal" = "act_balance"."n_cur_bal"-"old_name"."n_amount"
      where "act_balance"."c_act_code" = "old_name"."c_act_code";
    update "act_balance" set "act_balance"."n_cur_bal" = "act_balance"."n_cur_bal"+"new_name"."n_amount"
      where "act_balance"."c_act_code" = "new_name"."c_act_code"
  end if
end;
CREATE TRIGGER "update_act_mst_from_act_unlock_insert" AFTER INSERT
ORDER 1 ON "DBA"."act_unlock"
REFERENCING NEW AS new_name
FOR EACH ROW
BEGIN
    update act_mst set act_mst.n_auto_lock = new_name.n_auto_lock  ,d_ldate =uf_default_date() where act_mst.c_code = new_name.c_act_code;
END;
CREATE TRIGGER "update_bal_from_payment_det_delete" before delete order 2
on "DBA".payment_det
referencing old as old_name
for each row
begin
  delete from settle_mst
    where settle_mst.c_year=old_name.c_year
    and settle_mst.c_prefix=old_name.c_prefix
    and settle_mst.n_srno=old_name.n_srno
    and settle_mst.c_year1=old_name.c_year1
    and settle_mst.c_prefix1=old_name.c_prefix1
    and settle_mst.n_srno1=old_name.n_srno1
    and settle_mst.c_cust_code=old_name.c_cust_code
end;
CREATE TRIGGER "update_bal_from_payment_det_insert" after insert order 1
on "DBA".payment_det
referencing new as new_name
for each row
begin
  if new_name.n_amount<>0 then
    insert into settle_mst(c_year,c_prefix,n_srno,c_year1,c_prefix1,
      n_srno1,n_amount,d_date,c_cust_code,d_due_date) values(
      new_name.c_year,new_name.c_prefix,new_name.n_srno,
      new_name.c_year1,new_name.c_prefix1,new_name.n_srno1,
      new_name.n_amount,new_name.d_date,new_name.c_cust_code,new_name.d_due_date)
  end if
end;
CREATE TRIGGER "update_bal_from_payment_det_update" before update order 1
on "DBA".payment_det
referencing old as old_name new as new_name
for each row
begin
  delete from settle_mst
    where settle_mst.c_year=old_name.c_year
    and settle_mst.c_prefix=old_name.c_prefix
    and settle_mst.n_srno=old_name.n_srno
    and settle_mst.c_year1=old_name.c_year1
    and settle_mst.c_prefix1=old_name.c_prefix1
    and settle_mst.n_srno1=old_name.n_srno1
    and settle_mst.c_cust_code=old_name.c_cust_code;
  if new_name.n_amount<>0 then
    insert into settle_mst(c_year,c_prefix,n_srno,c_year1,c_prefix1,
      n_srno1,n_amount,d_date,c_cust_code,d_due_date) values(
      new_name.c_year,new_name.c_prefix,new_name.n_srno,
      new_name.c_year1,new_name.c_prefix1,new_name.n_srno1,
      new_name.n_amount,new_name.d_date,new_name.c_cust_code,new_name.d_due_date)
  end if
end;
CREATE TRIGGER "update_balance_from_ledger_delete" after delete order 7 on
"DBA"."ledger"
referencing old as "old_name"
for each row
begin
  declare "customer" numeric(1);
  declare "supplier" numeric(1);
  select "isnull"("n_customer",0),"isnull"("n_supplier",0) into "customer","supplier" from "act_mst" where "c_code" = "old_name"."c_act_code";
  if("customer"+"supplier") > 0 then
    update "act_balance" set "act_balance"."n_cur_bal" = "act_balance"."n_cur_bal"
      -"old_name"."n_amount"
      where "act_balance"."c_act_code" = "old_name"."c_act_code"
  end if
end;
CREATE TRIGGER "update_batch_no" before update of c_batch_no
order 2 on "DBA".stock
referencing old as old_name new as new_name
for each row
begin
  declare d_count decimal(8);
  select count(*) into d_count from purchase_det
    where c_item_code=old_name.c_item_code
    and c_batch_no=old_name.c_batch_no;
  if d_count is null then
    set d_count=0
  end if
  ;
  if d_count>0 then
    raiserror 18000 "This Item and Batch has entry in Purchase. So You cannot modify it."
  end if
  ;
  select count(*) into d_count from crnt_det
    where c_item_code=old_name.c_item_code
    and c_batch_no=old_name.c_batch_no;
  if d_count is null then
    set d_count=0
  end if
  ;
  if d_count>0 then
    raiserror 18000 "This Item and Batch has entry in Credit Note. So You cannot modify it."
  end if
end;
CREATE TRIGGER "update_cdadv_from_mdadj_advnt_det_insert" after insert order 1 on
"DBA"."mdadj_adv_det"
referencing new as "new_name"
for each row
begin
  declare @cust_code char(6);
  declare @doc_date date;
  declare @new_settled_amt numeric(18,2);
  declare @c_doc_prefix,@c_doc_year,@c_sett_year,@c_sett_prefix char(2);
  declare @n_doc_no,@n_sett_doc_no numeric(18);
  if "new_name"."n_doc_type" = 0 then
    if "new_name"."n_doc_no" <> 0 then
      update "cust_advance" set "cust_advance"."c_inv_prefix" = "new_name"."c_prefix",
        "cust_advance"."n_inv_no" = "new_name"."n_srno"
        where("cust_advance"."c_prefix" = "new_name"."c_doc_prefix"
        and "cust_advance"."n_srno" = "new_name"."n_doc_no")
        and "cust_advance"."c_inv_prefix" is null
        and "cust_advance"."n_inv_no" = 0;
      //if this credit not is already settled then will give error message 
      if sqlstate = '02000' then
        raiserror 18000 "Advance note is already settlled. You cannot Save this Multi Document Transaction. "
      end if end if end if;
  set @n_doc_no = "new_name"."n_srno";
  set @c_doc_prefix = "new_name"."c_prefix";
  set @c_doc_year = "new_name"."c_year";
  set @c_sett_prefix = "new_name"."c_doc_prefix";
  set @n_sett_doc_no = "new_name"."n_doc_no";
  set @c_sett_year = "new_name"."c_doc_year";
  set @cust_code = "new_name"."c_cust_code";
  set @doc_date = "new_name"."d_date";
  set @new_settled_amt = "new_name"."n_doc_amt";
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1","n_srno1",
    "n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values
    ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno","new_name"."c_doc_year","new_name"."c_doc_prefix","new_name"."n_doc_no",
    -1*(@new_settled_amt),"new_name"."c_cust_code","new_name"."d_date","new_name"."d_date",1 ) 
end;
CREATE TRIGGER "update_cdbnt_from_mdadj_dbnt_det_delete" before delete order 1 on
"DBA"."mdadj_dbnt_det"
referencing old as "old_name"
for each row
begin
  declare @cust_code char(6);
  declare @doc_date_old,@doc_date_new date;
  declare @new_settled_amt numeric(18,2);
  declare @c_sett_prefix_old,@c_sett_prefix_new,@c_doc_prefix_old,@c_doc_prefix_new char(2);
  declare @c_sett_year_old,@c_sett_year_new,@c_doc_year_old,@c_doc_year_new char(2);
  declare @sett_doc_old,@sett_doc_new,@n_doc_old,@n_doc_new numeric(18);
  if "old_name"."n_doc_type" = 0 then
    update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = null,
      "cust_dbnt"."n_inv_recp_no" = 0
      where("cust_dbnt"."c_prefix" = "old_name"."c_doc_prefix"
      and "cust_dbnt"."n_srno" = "old_name"."n_doc_no")
      and "cust_dbnt"."c_inv_recp_prefix" = "old_name"."c_prefix"
      and "cust_dbnt"."n_inv_recp_no" = "old_name"."n_srno";
    //if this credit is already settled with some other document then will give error message 
    if sqlstate = '02000' then
      raiserror 18000 "Debit note is already settlled. You cannot Save this Multi Document Transaction. "
    end if end if;
  set @c_sett_prefix_old = "old_name"."c_doc_prefix";
  set @sett_doc_old = "old_name"."n_doc_no";
  set @c_sett_year_old = null;
  set @c_doc_prefix_old = "old_name"."c_prefix";
  set @c_doc_year_old = "uf_get_pk_component"("old_name"."n_srno",1);
  set @n_doc_old = "old_name"."n_srno";
  set @c_sett_year_old = null;
  delete from "settle_mst"
    where "n_srno" = @n_doc_old
    and "c_prefix" = @c_doc_prefix_old
    and "n_srno1" = @sett_doc_old
    and "c_prefix1" = @c_sett_prefix_old
end;
CREATE TRIGGER "update_cdbnt_from_mdadj_dbnt_det_insert" after insert order 1 on
"DBA"."mdadj_dbnt_det"
referencing new as "new_name"
for each row
begin
  declare @cust_code char(6);
  declare @doc_date date;
  declare @new_settled_amt numeric(18,2);
  declare @c_doc_prefix,@c_doc_year,@c_sett_year,@c_sett_prefix char(2);
  declare @n_doc_no,@n_sett_doc_no numeric(18);
  if "new_name"."n_doc_type" = 0 then
    if "new_name"."n_doc_no" <> 0 then
      update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "cust_dbnt"."n_inv_recp_no" = "new_name"."n_srno"
        where("cust_dbnt"."c_prefix" = "new_name"."c_doc_prefix"
        and "cust_dbnt"."n_srno" = "new_name"."n_doc_no")
        and "cust_dbnt"."c_inv_recp_prefix" is null
        and "cust_dbnt"."n_inv_recp_no" = 0;
      //if this credit not is already settled then will give error message 
      if sqlstate = '02000' then
        raiserror 18000 "Debit note is already settlled. You cannot Save this Multi Document Transaction. "
      end if end if end if;
  set @new_settled_amt = "new_name"."n_doc_amt";
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1","n_srno1",
    "n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values
    ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno","new_name"."c_doc_year","new_name"."c_doc_prefix","new_name"."n_doc_no",
    -1*(@new_settled_amt),"new_name"."c_cust_code","new_name"."d_date","new_name"."d_date",1 ) 
end;
CREATE TRIGGER "update_cdbnt_from_mdadj_dbnt_det_update" after update order 2 on
"DBA"."mdadj_dbnt_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @cust_code char(6);
  declare @doc_date_old,@doc_date_new date;
  declare @new_settled_amt numeric(18,2);
  declare @c_sett_prefix_old,@c_sett_prefix_new,@c_doc_prefix_old,@c_doc_prefix_new char(2);
  declare @c_sett_year_old,@c_sett_year_new,@c_doc_year_old,@c_doc_year_new char(2);
  declare @sett_doc_old,@sett_doc_new,@n_doc_old,@n_doc_new numeric(18);
  if "old_name"."n_stop_trigger" <> "new_name"."n_stop_trigger" then
    return
  end if;
  if "old_name"."n_doc_type" <> "new_name"."n_doc_type" or "old_name"."c_doc_prefix" <> "new_name"."c_doc_prefix" or "old_name"."n_doc_no" <> "new_name"."n_doc_no" then
    if "new_name"."n_doc_type" = 0 then
      update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = null,
        "cust_dbnt"."n_inv_recp_no" = 0
        where("cust_dbnt"."c_prefix" = "old_name"."c_doc_prefix"
        and "cust_dbnt"."n_srno" = "old_name"."n_doc_no")
        and "cust_dbnt"."c_inv_recp_prefix" = "old_name"."c_prefix"
        and "cust_dbnt"."n_inv_recp_no" = "old_name"."n_srno";
      if "new_name"."n_doc_no" <> 0 then
        update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "cust_dbnt"."n_inv_recp_no" = "new_name"."n_srno"
          where("cust_dbnt"."c_prefix" = "new_name"."c_doc_prefix"
          and "cust_dbnt"."n_srno" = "new_name"."n_doc_no")
          and "cust_dbnt"."c_inv_recp_prefix" is null
          and "cust_dbnt"."n_inv_recp_no" = 0;
        //if this credit not is already settled then will give error message 
        if sqlstate = '02000' then
          raiserror 18000 "Debit note is already settlled. You cannot Save this Multi Document Transaction. "
        end if end if end if end if;
  delete from "settle_mst"
    where "n_srno" = "old_name"."n_srno"
    and "c_prefix" = "old_name"."c_prefix"
    and "c_year" = "old_name"."c_year"
    and "n_srno1" = "old_name"."n_doc_no"
    and "c_prefix1" = "old_name"."c_doc_prefix"
    and "c_year1" = "old_name"."c_doc_year";
  set @new_settled_amt = "new_name"."n_doc_amt";
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1","n_srno1",
    "n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values
    ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno","new_name"."c_doc_year","new_name"."c_doc_prefix","new_name"."n_doc_no",
    -1*(@new_settled_amt),"new_name"."c_cust_code","new_name"."d_date","new_name"."d_date",1 ) 
end;
CREATE TRIGGER "update_cheque_entry_from_delete_gate_pass_chq_issue" before delete order 2
on "DBA".gate_pass_chq_issue
referencing old as old_name
for each row
begin
update cheque_entry set 
       n_completed=0, 
       c_luser=old_name.c_luser,
       d_ldate=old_name.d_ldate,
       t_ltime=old_name.t_ltime,
       c_ref_prefix=null,
       n_ref_no=null,
       c_chq_received_by=null,
       c_recvr_mobile_no=null 
where n_srno=old_name.n_chq_srno and c_prefix=old_name.c_chq_prefix and n_completed=1;
update gate_pass_mst set 
       n_cheque_issued=0,
       c_check_received_by=null
where n_srno=old_name.n_srno and c_prefix=old_name.c_prefix and n_cheque_issued=1;
end;
CREATE TRIGGER "update_cheque_entry_from_insert_gate_pass_chq_issue" after insert order 1
on "DBA".gate_pass_chq_issue
referencing new as new_name
for each row
begin
update cheque_entry set 
       n_completed=1,
       c_luser=new_name.c_luser,
       d_ldate=new_name.d_ldate,
       t_ltime=new_name.t_ltime,
       c_ref_prefix=new_name.c_prefix,
       n_ref_no=new_name.n_srno,
       c_chq_received_by=new_name.c_chq_received_by,
       c_recvr_mobile_no=new_name.c_recvr_mobile_no 
where n_srno=new_name.n_chq_srno and c_prefix=new_name.c_chq_prefix and n_completed=0;
update gate_pass_mst set 
       n_cheque_issued=1,
       d_ldate=new_name.d_ldate,
       c_check_received_by=new_name.c_chq_received_by
where n_srno=new_name.n_srno and c_prefix=new_name.c_prefix and n_cheque_issued=0;
end;
CREATE TRIGGER "update_cheque_entry_from_update_gate_pass_chq_issue" before update order 1
on "DBA".gate_pass_chq_issue
referencing old as old_name new as new_name
for each row
begin
update cheque_entry set  
      c_luser=new_name.c_luser,
       d_ldate=new_name.d_ldate,
       t_ltime=new_name.t_ltime,
       c_ref_prefix=new_name.c_prefix,
       n_ref_no=new_name.n_srno,
       c_chq_received_by=new_name.c_chq_received_by,
       c_recvr_mobile_no=new_name.c_recvr_mobile_no 
where n_srno=old_name.n_chq_srno and c_prefix=old_name.c_chq_prefix and n_completed=0;
update gate_pass_mst set  
       d_ldate=new_name.d_ldate,
       c_check_received_by=new_name.c_chq_received_by
where n_srno=old_name.n_srno and c_prefix=old_name.c_prefix and n_cheque_issued=0;

end;
CREATE TRIGGER "update_crnt_from_mdadj_det_delete" before delete order 1 on
"DBA"."mdadj_det"
referencing old as "old_name"
for each row
begin
  declare @cust_code char(6);
  declare @doc_date_old,@doc_date_new date;
  declare @new_settled_amt numeric(18,2);
  declare @c_sett_prefix_old,@c_sett_prefix_new,@c_doc_prefix_old,@c_doc_prefix_new char(2);
  declare @c_sett_year_old,@c_sett_year_new,@c_doc_year_old,@c_doc_year_new char(2);
  declare @sett_doc_old,@sett_doc_new,@n_doc_old,@n_doc_new numeric(18);
  if "old_name"."n_doc_type" = 0 then
    update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = null,
      "crnt_mst"."n_inv_recp_no" = 0
      where("crnt_mst"."c_prefix" = "old_name"."c_doc_prefix"
      and "crnt_mst"."n_srno" = "old_name"."n_doc_no")
      and "crnt_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
      and "crnt_mst"."n_inv_recp_no" = "old_name"."n_srno";
    //if this credit is already settled with some other document then will give error message 
    if sqlstate = '02000' then
      raiserror 18000 "Credit note is already settlled. You cannot Save this Multi Document Transaction. "
    end if end if;
  if "old_name"."n_doc_type" = 1 then
    update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = null,
      "crnt_repl_mst"."n_inv_recp_no" = 0
      where("crnt_repl_mst"."c_prefix" = "old_name"."c_doc_prefix"
      and "crnt_repl_mst"."n_srno" = "old_name"."n_doc_no")
      and "crnt_repl_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
      and "crnt_repl_mst"."n_inv_recp_no" = "old_name"."n_srno";
    //if this credit is already settled with some other document then will give error message 
    if sqlstate = '02000' then
      raiserror 18000 "Replacement Credit note is already settlled. You cannot Save this Invoice. "
    end if end if;
  --------------------
  if "old_name"."n_doc_type" = 2 then
    update "rtn_Purchase_mst" set "rtn_Purchase_mst"."c_inv_recp_prefix" = null,
      "rtn_Purchase_mst"."n_inv_recp_no" = 0
      where("rtn_Purchase_mst"."c_prefix" = "old_name"."c_doc_prefix"
      and "rtn_Purchase_mst"."n_srno" = "old_name"."n_doc_no")
      and "rtn_Purchase_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
      and "rtn_Purchase_mst"."n_inv_recp_no" = "old_name"."n_srno";
    //if this credit is already settled with some other document then will give error message 
    if sqlstate = '02000' then
      raiserror 18000 "Return as Purchase is already settlled. You cannot Save this Invoice. "
    end if end if;
  ------------------
  if "old_name"."n_doc_type" = 3 then
    update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
      "mdadj_mst"."n_inv_recp_no" = 0
      where("mdadj_mst"."c_prefix" = "old_name"."c_doc_prefix"
      and "mdadj_mst"."n_srno" = "old_name"."n_doc_no")
      and "mdadj_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
      and "mdadj_mst"."n_inv_recp_no" = "old_name"."n_srno";
    //if this credit is already settled with some other document then will give error message 
    if sqlstate = '02000' then
      raiserror 18000 "Multi Credit Note is already settlled. You cannot Save this Invoice. "
    end if end if;
  set @c_sett_prefix_old = "old_name"."c_doc_prefix";
  set @sett_doc_old = "old_name"."n_doc_no";
  set @c_sett_year_old = null;
  set @c_doc_prefix_old = "old_name"."c_prefix";
  set @c_doc_year_old = "uf_get_pk_component"("old_name"."n_srno",1);
  set @n_doc_old = "old_name"."n_srno";
  set @c_sett_year_old = null;
  delete from "settle_mst"
    where "n_srno" = @n_doc_old
    and "c_prefix" = @c_doc_prefix_old
    and "n_srno1" = @sett_doc_old
    and "c_prefix1" = @c_sett_prefix_old
end;
CREATE TRIGGER "update_crnt_from_mdadj_det_insert" after insert order 1 on
"DBA"."mdadj_det"
referencing new as "new_name"
for each row
begin
  declare @cust_code char(6);
  declare @doc_date date;
  declare @new_settled_amt numeric(18,2);
  declare @c_doc_prefix,@c_doc_year,@c_sett_year,@c_sett_prefix char(2);
  declare @n_doc_no,@n_sett_doc_no numeric(18);
  if "new_name"."n_doc_type" = 0 then
    if "new_name"."n_doc_no" <> 0 then
      update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "crnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("crnt_mst"."c_prefix" = "new_name"."c_doc_prefix"
        and "crnt_mst"."n_srno" = "new_name"."n_doc_no")
        and "crnt_mst"."c_inv_recp_prefix" is null
        and "crnt_mst"."n_inv_recp_no" = 0;
      //if this credit not is already settled then will give error message 
      if sqlstate = '02000' then
        raiserror 18000 "Credit note is already settlled. You cannot Save this Multi Document Transaction. "
      end if end if end if;
  if "new_name"."n_doc_type" = 1 then
    if "new_name"."n_doc_no" <> 0 then
      update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "crnt_repl_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("crnt_repl_mst"."c_prefix" = "new_name"."c_doc_prefix"
        and "crnt_repl_mst"."n_srno" = "new_name"."n_doc_no")
        and "crnt_repl_mst"."c_inv_recp_prefix" is null
        and "crnt_repl_mst"."n_inv_recp_no" = 0;
      //if this credit not is already settled then will give error message 
      if sqlstate = '02000' then
        raiserror 18000 "Replacement Credit note is already settlled. You cannot Save this Invoice. "
      end if end if end if;
  if "new_name"."n_doc_type" = 2 then
    if "new_name"."n_doc_no" <> 0 then
      update "rtn_Purchase_mst" set "rtn_Purchase_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "rtn_Purchase_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("rtn_Purchase_mst"."c_prefix" = "new_name"."c_doc_prefix"
        and "rtn_Purchase_mst"."n_srno" = "new_name"."n_doc_no")
        and "rtn_Purchase_mst"."c_inv_recp_prefix" is null
        and "rtn_Purchase_mst"."n_inv_recp_no" = 0;
      //if this credit not is already settled then will give error message 
      if sqlstate = '02000' then
        raiserror 18000 "Return as Purchase is already settlled. You cannot Save this Document. "
      end if end if end if;
  if "new_name"."n_doc_type" = 3 then
    if "new_name"."n_doc_no" <> 0 then
      update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
        "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
        where("mdadj_mst"."c_prefix" = "new_name"."c_doc_prefix"
        and "mdadj_mst"."n_srno" = "new_name"."n_doc_no")
        and "mdadj_mst"."c_inv_recp_prefix" is null
        and "mdadj_mst"."n_inv_recp_no" = 0;
      //if this credit not is already settled then will give error message 
      if sqlstate = '02000' then
        raiserror 18000 "Multi Credit Note is already settlled. You cannot Save this Document. "
      end if end if end if;
  set @new_settled_amt = "new_name"."n_doc_amt";
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1","n_srno1",
    "n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values
    ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno","new_name"."c_doc_year","new_name"."c_doc_prefix","new_name"."n_doc_no",
    -1*(@new_settled_amt),"new_name"."c_cust_code","new_name"."d_date","new_name"."d_date",1 ) 
end;
CREATE TRIGGER "update_crnt_from_mdadj_det_update" after update order 2 on
"DBA"."mdadj_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @cust_code char(6);
  declare @doc_date_old,@doc_date_new date;
  declare @new_settled_amt numeric(18,2);
  declare @c_sett_prefix_old,@c_sett_prefix_new,@c_doc_prefix_old,@c_doc_prefix_new char(2);
  declare @c_sett_year_old,@c_sett_year_new,@c_doc_year_old,@c_doc_year_new char(2);
  declare @sett_doc_old,@sett_doc_new,@n_doc_old,@n_doc_new numeric(18);
  if "old_name"."n_stop_trigger" <> "new_name"."n_stop_trigger" then
    return
  end if;
  if "old_name"."n_doc_type" <> "new_name"."n_doc_type" or "old_name"."c_doc_prefix" <> "new_name"."c_doc_prefix" or "old_name"."n_doc_no" <> "new_name"."n_doc_no" then
    if "new_name"."n_doc_type" = 0 then
      update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = null,
        "crnt_mst"."n_inv_recp_no" = 0
        where("crnt_mst"."c_prefix" = "old_name"."c_doc_prefix"
        and "crnt_mst"."n_srno" = "old_name"."n_doc_no")
        and "crnt_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
        and "crnt_mst"."n_inv_recp_no" = "old_name"."n_srno";
      if "new_name"."n_doc_no" <> 0 then
        update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "crnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where("crnt_mst"."c_prefix" = "new_name"."c_doc_prefix"
          and "crnt_mst"."n_srno" = "new_name"."n_doc_no")
          and "crnt_mst"."c_inv_recp_prefix" is null
          and "crnt_mst"."n_inv_recp_no" = 0;
        //if this credit not is already settled then will give error message 
        if sqlstate = '02000' then
          raiserror 18000 "Credit note is already settlled. You cannot Save this Multi Document Transaction. "
        end if end if end if;
    if "new_name"."n_doc_type" = 1 then
      update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = null,
        "crnt_repl_mst"."n_inv_recp_no" = 0
        where("crnt_repl_mst"."c_prefix" = "old_name"."c_doc_prefix"
        and "crnt_repl_mst"."n_srno" = "old_name"."n_doc_no")
        and "crnt_repl_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
        and "crnt_repl_mst"."n_inv_recp_no" = "old_name"."n_srno";
      if "new_name"."n_doc_no" <> 0 then
        update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "crnt_repl_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where("crnt_repl_mst"."c_prefix" = "new_name"."c_doc_prefix"
          and "crnt_repl_mst"."n_srno" = "new_name"."n_doc_no")
          and "crnt_repl_mst"."c_inv_recp_prefix" is null
          and "crnt_repl_mst"."n_inv_recp_no" = 0;
        //if this credit not is already settled then will give error message 
        if sqlstate = '02000' then
          raiserror 18000 "Replacement Credit note is already settlled. You cannot Save this Invoice. "
        end if end if end if;
    ----------
    if "new_name"."n_doc_type" = 2 then
      update "rtn_Purchase_mst" set "rtn_Purchase_mst"."c_inv_recp_prefix" = null,
        "rtn_Purchase_mst"."n_inv_recp_no" = 0
        where("rtn_Purchase_mst"."c_prefix" = "old_name"."c_doc_prefix"
        and "rtn_Purchase_mst"."n_srno" = "old_name"."n_doc_no")
        and "rtn_Purchase_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
        and "rtn_Purchase_mst"."n_inv_recp_no" = "old_name"."n_srno";
      if "new_name"."n_doc_no" <> 0 then
        update "rtn_Purchase_mst" set "rtn_Purchase_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "rtn_Purchase_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where("rtn_Purchase_mst"."c_prefix" = "new_name"."c_doc_prefix"
          and "rtn_Purchase_mst"."n_srno" = "new_name"."n_doc_no")
          and "rtn_Purchase_mst"."c_inv_recp_prefix" is null
          and "rtn_Purchase_mst"."n_inv_recp_no" = 0;
        //if this credit not is already settled then will give error message 
        if sqlstate = '02000' then
          raiserror 18000 "Return as Purchase is already settlled. You cannot Save this Invoice. "
        end if end if end if;
    ----------
    if "new_name"."n_doc_type" = 3 then
      update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
        "mdadj_mst"."n_inv_recp_no" = 0
        where("mdadj_mst"."c_prefix" = "old_name"."c_doc_prefix"
        and "mdadj_mst"."n_srno" = "old_name"."n_doc_no")
        and "mdadj_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
        and "mdadj_mst"."n_inv_recp_no" = "old_name"."n_srno";
      if "new_name"."n_doc_no" <> 0 then
        update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where("mdadj_mst"."c_prefix" = "new_name"."c_doc_prefix"
          and "mdadj_mst"."n_srno" = "new_name"."n_doc_no")
          and "mdadj_mst"."c_inv_recp_prefix" is null
          and "mdadj_mst"."n_inv_recp_no" = 0;
        //if this credit not is already settled then will give error message 
        if sqlstate = '02000' then
          raiserror 18000 "Multi Credit Note is already settlled. You cannot Save this Invoice. "
        end if end if end if end if;
  delete from "settle_mst"
    where "n_srno" = "old_name"."n_srno"
    and "c_prefix" = "old_name"."c_prefix"
    and "c_year" = "old_name"."c_year"
    and "n_srno1" = "old_name"."n_doc_no"
    and "c_prefix1" = "old_name"."c_doc_prefix"
    and "c_year1" = "old_name"."c_doc_year";
  set @new_settled_amt = "new_name"."n_doc_amt";
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1","n_srno1",
    "n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values
    ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno","new_name"."c_doc_year","new_name"."c_doc_prefix","new_name"."n_doc_no",
    -1*(@new_settled_amt),"new_name"."c_cust_code","new_name"."d_date","new_name"."d_date",1 ) 
end;
CREATE TRIGGER "update_dbnt_ledger_delete"
-------------------------------------
 before delete order 2 on
------Dbnt Trigger
"DBA"."dbnt_item_settle_ledger"
referencing old as "old_name"
for each row
begin
  delete from "dbnt_ledger"
    where "dbnt_ledger"."n_srno" = "old_name"."n_srno"
    and "dbnt_ledger"."c_item_code" = "old_name"."c_item_code"
    and "dbnt_ledger"."c_batch_no" = "old_name"."c_batch_no"
    and "dbnt_ledger"."c_type" = "old_name"."c_type"
    and "dbnt_ledger"."c_prefix" = "old_name"."c_prefix"
end;
CREATE TRIGGER "update_dbnt_ledger_insert" after insert order 1 on
-------------------debit note insert trigger
"DBA"."dbnt_item_settle_ledger"
referencing new as "new_name"
for each row
begin
  insert into "dbnt_ledger"
    ( "n_srno","c_prefix","c_type","c_item_code","c_batch_no","n_srno1","c_prefix1","c_type1","n_qty","n_loose_qty","n_qty_actual","n_loose_qty_actual","n_rate",
    "n_pack_conv","n_debit_per","n_igst_per","n_cgst_per","n_sgst_per","n_cess_per","c_gst_code","n_schm_qty","n_scheme_disc" ) values
    ( "new_name"."n_srno","new_name"."c_prefix","new_name"."c_type","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_srno1","new_name"."c_prefix1","new_name"."c_type1",
    -1*"new_name"."n_qty",-1*"new_name"."n_loose_qty",0,0,0,0,0,0,0,0,0,null,-1*"new_name"."n_schm_qty",-1*"new_name"."n_scheme_disc" ) 
end;
CREATE TRIGGER "update_dbnt_ledger_update" before update order 1 on
-----------------dbnt_det update
"DBA"."dbnt_item_settle_ledger"
referencing old as "old_name" new as "new_name"
for each row
begin
  delete from "dbnt_ledger"
    where "dbnt_ledger"."n_srno" = "old_name"."n_srno"
    and "dbnt_ledger"."c_item_code" = "old_name"."c_item_code"
    and "dbnt_ledger"."c_batch_no" = "old_name"."c_batch_no"
    and "dbnt_ledger"."c_type" = "old_name"."c_type"
    and "dbnt_ledger"."c_prefix" = "old_name"."c_prefix";
  insert into "dbnt_ledger"
    ( "n_srno","c_prefix","c_type","c_item_code","c_batch_no","n_srno1","c_prefix1","c_type1","n_qty","n_loose_qty","n_qty_actual","n_loose_qty_actual","n_rate",
    "n_pack_conv","n_debit_per","n_igst_per","n_cgst_per","n_sgst_per","n_cess_per","c_gst_code","n_schm_qty","n_scheme_disc" ) values
    ( "new_name"."n_srno","new_name"."c_prefix","new_name"."c_type","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_srno1","new_name"."c_prefix1","new_name"."c_type1",
    -1*"new_name"."n_qty",-1*"new_name"."n_loose_qty",0,0,0,0,0,0,0,0,0,null,-1*"new_name"."n_schm_qty",-1*"new_name"."n_scheme_disc" ) 
end;
CREATE TRIGGER "update_dc_from_dc_ret_det" after insert order 1
on "DBA".dc_ret_det
referencing new as new_name
for each row
begin
  update dc_det set dc_det.n_ret_qty=dc_det.n_ret_qty+new_name.n_qty,
    dc_det.n_ret_scheme_qty=dc_det.n_ret_scheme_qty+new_name.n_scheme_qty
    where dc_det.n_srno=new_name.n_dc_no
    and dc_det.c_item_code=new_name.c_item_code
    and dc_det.c_batch_no=new_name.c_batch_no
end;
CREATE TRIGGER "update_dc_from_dc_ret_detail" before delete order 1
on "DBA".dc_ret_det
referencing old as old_name
for each row
begin
  update dc_det set dc_det.n_ret_qty=dc_det.n_ret_qty-old_name.n_qty,
    dc_det.n_ret_scheme_qty=dc_det.n_ret_scheme_qty-old_name.n_scheme_qty
    where dc_det.n_srno=old_name.n_dc_no
    and dc_det.c_item_code=old_name.c_item_code
    and dc_det.c_batch_no=old_name.c_batch_no
end;
CREATE TRIGGER "update_dc_from_update_dc_ret_det" after update order 2
on "DBA".dc_ret_det
referencing old as old_name new as new_name
for each row
begin
  update dc_det set dc_det.n_ret_qty=dc_det.n_ret_qty+new_name.n_qty,
    dc_det.n_ret_scheme_qty=dc_det.n_ret_scheme_qty+new_name.n_scheme_qty
    where dc_det.n_srno=new_name.n_dc_no
    and dc_det.c_item_code=new_name.c_item_code
    and dc_det.c_batch_no=new_name.c_batch_no;
  update dc_det set dc_det.n_ret_qty=dc_det.n_ret_qty-old_name.n_qty,
    dc_det.n_ret_scheme_qty=dc_det.n_ret_scheme_qty-old_name.n_scheme_qty
    where dc_det.n_srno=old_name.n_dc_no
    and dc_det.c_item_code=old_name.c_item_code
    and dc_det.c_batch_no=old_name.c_batch_no
end;
CREATE TRIGGER "update_doc_status_for_main_store" after insert order 1 on
"DBA"."st_check_temp_store"
referencing new as "new_name"
for each row
begin
  update "st_store_completion_chk"
    set "n_status" = 1,"d_ldate_time" = "now"(),"c_luser" = "new_name"."c_user"
    where "c_doc_no" = "new_name"."c_doc_no"
end;
CREATE TRIGGER "update_doc_track_slip_detail_on_ins" after insert order 1 on
"DBA"."slip_list_detail"
referencing new as "new_name"
for each row
begin
  declare "n_temp" decimal;
  declare "c_dman" char(6);
  declare "c_dispatch_code" char(6);
  declare "c_delivered_code" char(6);
  select "n_inv_no" into "n_temp" from "inv_slip_info" where "inv_slip_info"."c_inv_prefix" = "new_name"."c_inv_prefix" and "inv_slip_info"."n_inv_no" = "new_name"."n_inv_no";
  if sqlcode <> 0 then
    insert into "inv_slip_info"( "c_inv_prefix","n_inv_no","d_slip_date","n_slip_srno" ) values
      ( "new_name"."c_inv_prefix","new_name"."n_inv_no","new_name"."d_date","new_name"."n_srno" ) 
  else
    update "inv_slip_info" set "n_slip_srno" = if "d_slip_date" = "new_name"."d_date" and "n_slip_srno" > "new_name"."n_srno" then "n_slip_srno" else "new_name"."n_srno" endif,"d_slip_date" = "new_name"."d_date"
      where "inv_slip_info"."c_inv_prefix" = "new_name"."c_inv_prefix" and "inv_slip_info"."n_inv_no" = "new_name"."n_inv_no" and "inv_slip_info"."d_slip_date" <= "new_name"."d_date"
  end if;
  if "new_name"."c_dele_coll" <> 'D' or "left"("new_name"."c_inv_prefix",1) <> 'I' then
    return
  end if;
  if "new_name"."n_dispatched" = 0 then
    return
  end if;
  select "c_dman_code" into "c_dman" from "slip_list_mst" where "slip_list_mst"."n_srno" = "new_name"."n_srno";
  select "c_dispatch_stage_code","c_delivered_stage_code" into "c_dispatch_code","c_delivered_code" from "system_parameter";
  select "n_inv_no" into "n_temp" from "doc_track" where "doc_track"."c_stage_code" = "c_dispatch_code" and "doc_track"."c_inv_prefix" = "new_name"."c_inv_prefix" and "doc_track"."n_inv_no" = "new_name"."n_inv_no";
  if sqlcode <> 0 then
    insert into "doc_track"( "c_stage_code","c_inv_prefix","n_inv_no","c_dman_code","c_user" ) values
      ( "c_dispatch_code","new_name"."c_inv_prefix","new_name"."n_inv_no","c_dman","new_name"."c_dispatch_user" ) ;
    if sqlstate = '02000' then
      raiserror 18000 "Error, Cannot add item in Document Track table. Please restart the system."
    end if end if;
  if "new_name"."t_del_time" is not null then
    select "n_inv_no" into "n_temp" from "doc_track" where "doc_track"."c_stage_code" = "c_delivered_code" and "doc_track"."c_inv_prefix" = "new_name"."c_inv_prefix" and "doc_track"."n_inv_no" = "new_name"."n_inv_no";
    if sqlcode <> 0 then
      insert into "doc_track"( "c_stage_code","c_inv_prefix","n_inv_no","c_dman_code","c_user" ) values
        ( "c_delivered_code","new_name"."c_inv_prefix","new_name"."n_inv_no","c_dman","new_name"."c_dispatch_user" ) ;
      if sqlstate = '02000' then
        raiserror 18000 "Error, Cannot add item in Document Track table. Please restart the system."
      end if
    end if
  end if
end;
CREATE TRIGGER "update_doc_track_slip_detail_on_upd" before update order 2 on
"DBA"."slip_list_detail"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "n_temp" decimal;
  declare "c_dman" char(6);
  declare "c_dispatch_code" char(6);
  declare "c_delivered_code" char(6);
  select "n_inv_no" into "n_temp" from "inv_slip_info" where "inv_slip_info"."c_inv_prefix" = "new_name"."c_inv_prefix" and "inv_slip_info"."n_inv_no" = "new_name"."n_inv_no";
  if sqlcode <> 0 then
    insert into "inv_slip_info"( "c_inv_prefix","n_inv_no","d_slip_date","n_slip_srno" ) values
      ( "new_name"."c_inv_prefix","new_name"."n_inv_no","new_name"."d_date","new_name"."n_srno" ) 
  else
    update "inv_slip_info" set "n_slip_srno" = if "d_slip_date" = "new_name"."d_date" and "n_slip_srno" > "new_name"."n_srno" then "n_slip_srno" else "new_name"."n_srno" endif,"d_slip_date" = "new_name"."d_date"
      where "inv_slip_info"."c_inv_prefix" = "new_name"."c_inv_prefix" and "inv_slip_info"."n_inv_no" = "new_name"."n_inv_no" and "inv_slip_info"."d_slip_date" <= "new_name"."d_date"
  end if;
  select "c_dispatch_stage_code","c_delivered_stage_code" into "c_dispatch_code","c_delivered_code" from "system_parameter";
  if "new_name"."t_del_time" is not null then
    select "n_inv_no" into "n_temp" from "doc_track" where "doc_track"."c_stage_code" = "c_delivered_code" and "doc_track"."c_inv_prefix" = "new_name"."c_inv_prefix" and "doc_track"."n_inv_no" = "new_name"."n_inv_no";
    if sqlcode <> 0 then
      insert into "doc_track"( "c_stage_code","c_inv_prefix","n_inv_no","c_dman_code","d_date","t_time","c_user" ) values
        ( "c_delivered_code","new_name"."c_inv_prefix","new_name"."n_inv_no","c_dman",cast("new_name"."t_del_time" as date),cast("new_name"."t_del_time" as time),"new_name"."c_dispatch_user" ) ;
      if sqlstate = '02000' then
        raiserror 18000 "Error, Cannot add item in Document Track table. Please restart the system."
      end if end if end if;
  if "new_name"."c_dele_coll" <> 'D' or "left"("new_name"."c_inv_prefix",1) <> 'I' then
    return
  end if;
  if "new_name"."n_dispatched" = 0 or "old_name"."n_dispatched" = 1 then
    return
  end if;
  select "c_dman_code" into "c_dman" from "slip_list_mst" where "slip_list_mst"."n_srno" = "new_name"."n_srno";
  select "n_inv_no" into "n_temp" from "doc_track" where "doc_track"."c_stage_code" = "c_dispatch_code" and "doc_track"."c_inv_prefix" = "new_name"."c_inv_prefix" and "doc_track"."n_inv_no" = "new_name"."n_inv_no";
  if sqlcode <> 0 then
    insert into "doc_track"( "c_stage_code","c_inv_prefix","n_inv_no","c_dman_code","c_user" ) values
      ( "c_dispatch_code","new_name"."c_inv_prefix","new_name"."n_inv_no","c_dman","new_name"."c_dispatch_user" ) ;
    if sqlstate = '02000' then
      raiserror 18000 "Error, Cannot add item in Document Track table. Please restart the system."
    end if
  end if
end;
CREATE TRIGGER "update_from_store_mst" before update order 1 on
"DBA"."store_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  if "new_name"."c_code" = '-' then
    raiserror 18000 "You cannot update '-' in store master"
  end if
end;
CREATE TRIGGER "update_goods_rec_ledger_from_goods_rec_det_update" before update order 1 on
--Update trigger for goods_rec_det
"DBA"."goods_rec_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "s_supp" char(6);
  declare "d_post" numeric(1);
  declare "d_gate_pass_no" numeric(6);
  delete from "goods_rec_ledger"
    where "goods_rec_ledger"."n_srno" = "old_name"."n_srno"
    and "goods_rec_ledger"."n_seq" = "old_name"."n_seq";
  if "new_name"."n_post" = 1 then
    insert into "goods_rec_ledger"( "n_srno","n_seq","c_supp_code","c_item_code","c_batch_no","d_exp_dt","n_qty","n_mrp","n_cancel_flag","d_ldate","t_ltime","n_gate_pass_no" ) values
      ( "new_name"."n_srno","new_name"."n_seq","new_name"."c_supp_code","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_exp_dt","new_name"."n_qty","new_name"."n_mrp","new_name"."n_cancel_flag","new_name"."d_ldate","new_name"."t_ltime","new_name"."n_gate_pass_no" ) 
  end if
end;
CREATE TRIGGER "update_invoice_det_stk_sale_det" after update order 2 on
------------------------------
--------------------------------------------
----------------sales invoice_det update
"DBA"."invoice_det_stk_sale"
referencing old as "old_name" new as "new_name"
for each row
begin
  delete from "Stock_inward_outwad"
    where "c_item_code" = "old_name"."c_item_code" and "c_batch_no" = "old_name"."c_batch_no" and "c_supp_code" = "old_name"."c_supp_code" and "n_tran_no" = "old_name"."n_tran_no" and "n_tran_seq" = "old_name"."n_seq";
  insert into "Stock_inward_outwad"
    ( "c_item_code","c_batch_no","c_supp_code","n_tran_no","n_tran_seq","n_qty","n_schm_qty","n_schm_disc","n_sale_rate","n_pur_rate","n_eff_pur_rate","n_mrp","d_exp_date","d_date","d_ldate","n_flag","n_branch","n_product_value","n_ts_value","c_mfac_code","n_type_of_ret" ) values
    ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."c_supp_code","new_name"."n_tran_no","new_name"."n_seq","new_name"."n_tran_type"*"new_name"."n_qty","new_name"."n_tran_type"*"new_name"."n_schm_qty","new_name"."n_schm_disc","new_name"."n_sale_rate",
    "new_name"."n_pur_rate","new_name"."n_eff_pur_rate","new_name"."n_mrp","new_name"."d_exp_date","new_name"."d_date","now"(),"new_name"."n_flag","new_name"."n_branch","new_name"."n_product_value","new_name"."n_ts_value","new_name"."c_mfac_code","new_name"."n_type_of_ret" ) 
end;
CREATE TRIGGER "update_invoice_mst_dman_code_from_doc_track_delete" before delete order 1 on
"DBA"."doc_track"
referencing old as "old_name"
for each row
begin
  declare @store_out_stage char(6);
  declare @rowsep char(2);
  declare @ColPos integer;
  declare @RowPos integer;
  declare @sep char(1);
  declare @len_sep numeric(1);
  declare @RowMaxLen numeric(1);
  declare "tray_list" char(100);
  declare "traylist" char(500);
  declare @tray char(6);
  declare @stage char(6);
  declare @stgenable char(1);
  declare "s_dispatch_stage_code" char(6);
  declare @sttrackenable numeric(1);
  declare @brcode char(6);
  declare @year char(2);
  declare @prfix char(2);
  declare @sr numeric(30);
  declare @tray_code char(6);
  select "c_br_code" into @brcode from "System_Parameter";
  select "right"("db_name"(),2) into @year;
  select "c_dispatch_stage_code","isnull"("n_enable_store_track",0) into "s_dispatch_stage_code",@sttrackenable from "system_parameter";
  select "c_val","c_defa_val" into @stgenable,@stage from "sys_para_setup" where "c_para_val_code" = 'S00127';
  select ',' into @sep;
  if @sttrackenable > 0 then
    select "c_val","c_defa_val" into @stgenable,@store_out_stage from "sys_para_setup" where "c_para_val_code" = 'S00127';
    if @store_out_stage = "old_name"."c_stage_code" then
      if "isnull"(@stage,'') <> '' and @stgenable = '1' then
        select "uf_get_new_tran"('NTGRN')+"number"()-1 into @sr;
        select "list"("tray_ledger"."c_tray_code") as "tray_list"
          into "tray_list" from "doc_track" join "tray_ledger" on "tray_ledger"."n_srno" = "doc_track"."n_inv_no"
            join "sys_para_setup" on "sys_para_setup"."c_defa_val" = "doc_track"."c_stage_code"
          where "n_inv_no" = "old_name"."n_inv_no"
          and "sys_para_setup"."c_para_val_code" = 'S00127';
        --   set traylist = tray_list;
        if "right"("trim"("tray_list"),1) <> ',' then
          set "tray_list" = "tray_list"+','
        end if;
        while "tray_list" <> '' loop
          select "Locate"("tray_list",@sep) as "a" into @ColPos;
          set @tray = "Trim"("Left"("tray_list",@ColPos-1));
          set "tray_list" = "SubString"("tray_list",@ColPos+1);
          insert into "tray_ledger"( "c_br_code","c_year","c_prefix","n_srno","c_tray_code","n_qty","n_pk" ) values
            ( @brcode,@year,'NT',@sr,@tray,-1,0 ) 
        end loop
      end if
    end if
  end if
end;
CREATE TRIGGER "update_invoice_mst_dman_code_from_doc_track_insert" before insert order 1 on
"DBA"."doc_track"
referencing new as "new_name"
for each row
begin
  declare @urgent_flag integer;
  declare "s_dispatch_stage_code" char(6);
  declare @brcode char(6);
  declare @sttrackenable numeric(1);
  declare @store_in_stage char(6);
  declare @store_out_stage char(6);
  declare @stgenable char(1);
  declare @year char(2);
  declare @docno char(25);
  declare @note char(50);
  declare @pick_tray char(6);
  declare @pos char(6);
  declare @search_str char(20);
  declare @str_rtn char(20);
  declare @fast_tracking_picking_flag numeric(1);
  declare @n_urgent numeric(1);
  declare @tran_prefix char(4);
  declare @tran_item_lines numeric(5);
  declare @para_item_lines_less_cnt numeric(5);
  declare @para_item_lines_less_flag numeric(1);
  declare @para_item_lines_more_cnt numeric(5);
  declare @para_item_lines_more_flag numeric(1);
  declare @act_outstation numeric(1);
  declare @item_countwise_ftrack numeric(1);
  set @item_countwise_ftrack = 0;
  select "c_dispatch_stage_code","c_br_code","isnull"("n_enable_store_track",0) into "s_dispatch_stage_code",@brcode,@sttrackenable from "system_parameter";
  select "right"("db_name"(),2) into @year;
  if @sttrackenable > 0 then
    set @para_item_lines_less_flag = "uf_sys_para_setup"('S00212','-','0',1); // 1 Enable for all ,2 Enable for Local
    set @para_item_lines_less_cnt = "uf_sys_para_setup"('S00212','-','0',2);
    set @para_item_lines_more_flag = "uf_sys_para_setup"('S00213','-','0',1); // 1 Enable for all ,2 Enable for Local
    set @para_item_lines_more_cnt = "uf_sys_para_setup"('S00213','-','0',2);
    select "c_val","c_defa_val" into @stgenable,@store_in_stage from "sys_para_setup" where "c_para_val_code" = 'S00097';
    select "c_val","c_defa_val" into @stgenable,@store_out_stage from "sys_para_setup" where "c_para_val_code" = 'S00127';
    if "isnull"(@store_in_stage,'') <> '' and @stgenable = '1' then
      if @store_in_stage = "new_name"."c_stage_code" then
        select "isnull"("n_active",0) into @fast_tracking_picking_flag from "st_track_module_mst" where "c_code" = 'M00058';
        if @fast_tracking_picking_flag is null or @fast_tracking_picking_flag = '' then
          set @fast_tracking_picking_flag = 0
        end if;
        set @tran_prefix = "uf_get_pk_component"("new_name"."n_inv_no",3);
        if "left"(@tran_prefix,1) = 'I' then
          select "invoice_mst"."n_urgent","isnull"("n_outstation",0) into @n_urgent,@act_outstation from "invoice_mst","act_mst" where "c_code" = "c_cust_code" and "invoice_mst"."c_prefix" = @tran_prefix and "invoice_mst"."n_srno" = "new_name"."n_inv_no";
          if(@para_item_lines_less_flag = 2 and @act_outstation = 0) or(@para_item_lines_less_flag = 1) or(@para_item_lines_more_flag = 2 and @act_outstation = 0) or(@para_item_lines_more_flag = 1) then
            select "count"(distinct "c_item_code") into @tran_item_lines from "invoice_det" where "invoice_det"."n_srno" = "new_name"."n_inv_no";
            if(@tran_item_lines <= cast(@para_item_lines_less_cnt as numeric(5))) or(@tran_item_lines >= cast(@para_item_lines_more_cnt as numeric(5))) then
              set @item_countwise_ftrack = 1
            end if
          end if
        elseif "left"(@tran_prefix,1) = 'S' then
          select "n_urgent" into @n_urgent from "ord_mst" where "ord_mst"."c_prefix" = @tran_prefix and "ord_mst"."n_srno" = "new_name"."n_inv_no"
        elseif "left"(@tran_prefix,1) = 'M' then
          select "n_urgent" into @n_urgent from "dc_mst" where "dc_mst"."c_prefix" = @tran_prefix and "dc_mst"."n_srno" = "new_name"."n_inv_no"
        end if;
        set @note = "new_name"."c_note";
        if(@note is not null and @note <> '') or(@fast_tracking_picking_flag = 1) then
          if @fast_tracking_picking_flag = 0 then
            set @search_str = 'pick_tray=';
            set @pos = "charindex"(@search_str,@note);
            if @pos > 0 then
              set @note = "substring"(@note,@pos+"len"(@search_str));
              set @pos = "charindex"('#',@note);
              set @pick_tray = "left"(@note,@pos-1)
            end if end if end if;
        set @docno = @brcode+'/'+@year+'/'+"new_name"."c_inv_prefix"+'/'+"string"("new_name"."n_inv_no");
        if(@pick_tray is not null and @pick_tray <> '') or(@fast_tracking_picking_flag = 1 and(@n_urgent = 1 or @n_urgent = 5)) or(@fast_tracking_picking_flag = 1 and @item_countwise_ftrack = 1) then
          //Urgent inv Ctl + I
          select "n_urgent" into @urgent_flag from "st_track_mst" where "c_doc_no" = @docno and "n_inout" = 0;
          if @urgent_flag <> 5 then
            update "st_track_mst" set "n_confirm" = 2,"t_confirm_time" = "now"(),"c_confirm_user" = "new_name"."c_user","DBA"."st_track_mst"."c_auto_tray_code" = @pick_tray where "c_doc_no" = @docno and "n_inout" = 0
          else
            update "st_track_mst" set "n_confirm" = 2,"n_urgent" = 2,"t_confirm_time" = "now"(),"c_confirm_user" = "new_name"."c_user","DBA"."st_track_mst"."c_auto_tray_code" = @pick_tray where "c_doc_no" = @docno and "n_inout" = 0
          end if
        else
          //Normal Ctrl + I
          update "st_track_mst" set "n_confirm" = 1,"t_confirm_time" = "now"(),"c_confirm_user" = "new_name"."c_user" where "c_doc_no" = @docno and "n_inout" = 0
        end if
      else if @store_out_stage = "new_name"."c_stage_code" then
          set @str_rtn = "uf_st_insert_tray_ledger"("new_name"."n_inv_no",'','')
        end if end if end if end if;
  if "s_dispatch_stage_code" = "new_name"."c_stage_code" and "new_name"."c_dman_code" is not null then
    update "invoice_mst" set "invoice_mst"."c_dman_code" = "new_name"."c_dman_code" where "invoice_mst"."c_prefix" = "new_name"."c_inv_prefix" and "invoice_mst"."n_srno" = "new_name"."n_inv_no"
  end if;
  insert into "doc_track_move"( "c_stage_code","c_inv_prefix","n_inv_no","c_dman_code","n_errors","c_note","c_user","d_date","t_time" ) on existing update defaults off values
    ( "new_name"."c_stage_code","new_name"."c_inv_prefix","new_name"."n_inv_no","new_name"."c_dman_code","new_name"."n_errors","new_name"."c_note","new_name"."c_user","new_name"."d_date","new_name"."t_time" ) 
end;
CREATE TRIGGER "update_item_stk_block_from_ord_det" before delete order 1 on
"DBA"."ord_det"
referencing old as "old_name"
for each row
begin
  if "old_name"."n_block_stock" = 1 and "old_name"."n_stock_gone_zero" = 0 then
    if "old_name"."n_block_stock" = 1 then
      update "item_stock_block" set "item_stock_block"."n_qty" = "item_stock_block"."n_qty"-("old_name"."n_qty"+"old_name"."n_scheme_qty"),
        "item_stock_block"."d_ldate" = "today"(),
        "item_stock_block"."t_ltime" = "now"()
        where "item_stock_block"."c_item_code" = "old_name"."c_item_code" and "old_name"."n_issue_qty" = 0 and("old_name"."n_lock" = 0 or "old_name"."n_lock" = 2)
    end if;
    if "old_name"."n_complete" = 1 then
      delete from "lost_order_master" where "c_item_code" = "old_name"."c_item_code" and "n_ord_srno" = "old_name"."n_srno" and "c_ord_prefix" = "old_name"."c_prefix"
    end if end if;
  if "old_name"."n_complete" = 1 and "old_name"."n_block_stock" > 1 then
    delete from "lost_order_master" where "c_item_code" = "old_name"."c_item_code" and "n_ord_srno" = "old_name"."n_srno" and "c_ord_prefix" = "old_name"."c_prefix"
  end if
end;
CREATE TRIGGER "update_ledger_from_act_open_tran_insert" after insert order 1 on
"DBA"."act_open_tran"
referencing new as "new_name"
for each row
begin
  if "new_name"."n_amount" <> 0 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","d_date","c_cust_code","d_due_date","c_ref_no","n_act_type" ) values
      ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
      "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
      "new_name"."n_amount","new_name"."d_date","new_name"."c_cust_code","new_name"."d_due_date","new_name"."c_ref_no","new_name"."n_act_type" ) 
  end if
end;
CREATE TRIGGER "update_ledger_from_act_open_tran_update" before update order 1 on
"DBA"."act_open_tran"
referencing old as "old_name" new as "new_name"
for each row
begin
  delete from "settle_mst"
    where "settle_mst"."c_year" = "old_name"."c_year"
    and "settle_mst"."c_prefix" = "old_name"."c_prefix"
    and "settle_mst"."n_srno" = "old_name"."n_srno"
    and "settle_mst"."c_year1" = "old_name"."c_year"
    and "settle_mst"."c_prefix1" = "old_name"."c_prefix"
    and "settle_mst"."n_srno1" = "old_name"."n_srno"
    and "settle_mst"."c_cust_code" = "old_name"."c_cust_code";
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
    "n_srno1","n_amount","d_date","c_cust_code","d_due_date","c_ref_no","n_act_type" ) values
    ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
    "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
    "new_name"."n_amount","new_name"."d_date","new_name"."c_cust_code","new_name"."d_due_date","new_name"."c_ref_no","new_name"."n_act_type" ) 
end;
CREATE TRIGGER "update_ledger_from_bank_to_bank" after update order 1
on "DBA".bank_to_bank
referencing old as old_name new as new_name
for each row
begin
  if old_name.n_slip_no=0 and new_name.n_slip_no<>0 then
    return
  end if
  ;
  if old_name.n_slip_no<>0 and new_name.n_slip_no=0 then
    return
  end if
  ;
  delete from ledger where ledger.c_prefix=old_name.c_prefix
    and ledger.n_tran_no=old_name.n_srno;
  delete from remarks where remarks.c_prefix=old_name.c_prefix
    and remarks.n_tran_id=old_name.n_srno;
  insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
    new_name.c_prefix,new_name.n_srno,'RCPAYM',new_name.d_tran_date,
    -new_name.n_total,'RCRECV');
  if new_name.d_reconcile_date_f is not null then
    if new_name.n_return_f=1 then
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,'RCRECV',new_name.d_reconcile_date_f,
        -new_name.n_total,'RCPAYM');
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,'RCPAYM',new_name.d_reconcile_date_f,
        new_name.n_total,'RCRECV')
    else
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,new_name.c_from_bank_code,new_name.d_reconcile_date_f,
        -new_name.n_total,new_name.c_to_bank_code);
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,'RCPAYM',new_name.d_reconcile_date_f,
        new_name.n_total,new_name.c_from_bank_code)
    end if
  end if
  ;
  insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
    new_name.c_prefix,new_name.n_srno,'RCRECV',new_name.d_tran_date,
    new_name.n_total,'RCPAYM');
  if new_name.d_reconcile_date_t is not null then
    if new_name.n_return_t=1 then
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,'RCRECV',new_name.d_reconcile_date_f,
        -new_name.n_total,'RCPAYM');
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,'RCPAYM',new_name.d_reconcile_date_f,
        new_name.n_total,'RCRECV')
    else
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,'RCRECV',new_name.d_reconcile_date_t,
        -new_name.n_total,new_name.c_to_bank_code);
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,new_name.c_to_bank_code,new_name.d_reconcile_date_t,
        new_name.n_total,new_name.c_from_bank_code)
    end if
  end if
  ;
  insert into remarks(c_prefix,n_tran_id,c_chq_no,d_chq_dt,c_remark) values(
    new_name.c_prefix,new_name.n_srno,new_name.c_chq_no,new_name.d_chq_dt,if new_name.n_return_f=1 or new_name.n_return_t=1 then ': CHEQUE RETURNED :' else '' endif+new_name.c_remark)
end;
CREATE TRIGGER "update_ledger_from_crnt_debit_act" before update order 2
on "DBA".crnt_debit_act
referencing old as old_name new as new_name
for each row
when(new_name.n_ledg_effect=1)
begin
  update ledger set
    c_act_code=new_name.c_debit_act,
    d_date=new_name.d_crnt_date,
    n_amount=new_name.n_amount,
    c_opp_act_code=new_name.c_cust_code
    where ledger.c_prefix=new_name.c_prefix
    and ledger.n_tran_no=new_name.n_srno
    and ledger.c_act_code=old_name.c_debit_act
    and ledger.c_opp_act_code=old_name.c_cust_code
end;
CREATE TRIGGER "update_ledger_from_crnt_mst_update" before update order 1 on
-------------
-----------------------
-----------------------------------------
--------------------------------
---------------------
------------------------credit note update mst
--crnt insert end
--Crnt Update Start
--crnt insert end
--Crnt Update Start
"DBA"."crnt_mst"
referencing old as "old_name" new as "new_name"
for each row
when("new_name"."n_ledg_effect" = 1)
begin
  /*    
Name: update_ledger_from_crnt_mst
Date:4/3/99
Applies to: credit note master
Parameter description: n/a
Return Value: n/a
Overview:
this trigger is fire when credit note prepared for the customer or branch
is changed and saved. it updates the old remark,customer credit, discount
credit,taxable and non taxable return debit, ST and CST debit,rounded 
amount difference in kasar with new  value. if any one of above does not 
exist in old then it will be inserted for new. if does not for new then old 
will be deleted. if exist in both then will update old with new.
Boundary conditions: n/a
Remarks:
Revision History:
Developed by: hitesh
Tested by:
*/
  declare "old_cust_account_code" char(6);
  declare "new_cust_account_code" char(6);
  declare "d_old_amount" decimal(14,2);
  declare "d_new_amount" decimal(14,2);
  declare "s_old_crnt_act_code" char(6);
  declare "s_new_crnt_act_code" char(6);
  declare "s_old_vat_rst_act_code" char(6);
  declare "s_new_vat_rst_act_code" char(6);
  declare "n_old_rnd_amt" decimal(4,2);
  declare "n_new_rnd_amt" decimal(4,2);
  declare "s_crnt_act_code" char(6);
  declare "s_vat_rst_act_code" char(6);
  declare "n_rnd_amt" decimal(4,2);
  declare @c_year_new,@c_year_old char(2);
  declare @doc_date_new,@doc_date_old date;
  if "old_name"."n_stop_trigger" <> "new_name"."n_stop_trigger" then
    return
  end if;
  if "old_name"."n_counter_ret" = 1 then
    // if counter sale then customer account is sale in old
    set "old_cust_account_code" = 'CASH'
  else
    //otherwise customer acccount code in old
    set "old_cust_account_code" = "old_name"."c_cust_code"
  end if;
  if "new_name"."n_counter_ret" = 1 then
    // if counter sale then customer account is sale in new
    set "new_cust_account_code" = 'CASH'
  else
    set "new_cust_account_code" = "new_name"."c_cust_code"
  end if;
  set @c_year_new = "new_name"."c_year";
  set @doc_date_new = "new_name"."d_crnt_date";
  if @c_year_new is null then
    if "length"("new_name"."n_srno") > 9 then
      set @c_year_new = "uf_get_pk_component"("new_name"."n_srno",1)
    else
      if "month"(@doc_date_new) <= 3 then
        set @c_year_new = "right"("string"("year"(@doc_date_new)-1),2)
      else
        set @c_year_new = "right"("string"("year"(@doc_date_new)),2)
      end if end if end if;
  set @c_year_old = "old_name"."c_year";
  set @doc_date_old = "old_name"."d_crnt_date";
  if @c_year_old is null then
    if "length"("old_name"."n_srno") > 9 then
      set @c_year_old = "uf_get_pk_component"("old_name"."n_srno",1)
    else
      if "month"(@doc_date_old) <= 3 then
        set @c_year_old = "right"("string"("year"(@doc_date_old)-1),2)
      else
        set @c_year_old = "right"("string"("year"(@doc_date_old)),2)
      end if end if end if;
  //jagamohan on 11-01-2018
  if "old_name"."n_detail" = 0 and "old_name"."n_post" = 1 then
    delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
      and "ledger"."n_tran_no" = "old_name"."n_srno" and "c_act_code" = "old_cust_account_code";
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_cust_account_code","new_name"."d_crnt_date",-"new_name"."n_total","new_name"."c_debit_act" ) ;
    delete from "settle_mst_header"
      where "c_prefix" = "old_name"."c_prefix"
      and "n_srno" = "old_name"."n_srno"
      and "c_year" = @c_year_old;
    insert into "settle_mst_header"
      ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
      "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
      "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
      "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
      "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
      "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
      "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type","n_tcs_per","n_tcs_taxable_amt","n_tcs_amt","n_tcs_on_service" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."d_crnt_date","new_name"."c_cust_code","new_name"."c_sman_code","new_name"."c_dman_code",0,"new_name"."n_discount_per","new_name"."n_other_credit_amt","new_name"."n_other_charge","new_name"."n_total",
      0,"new_name"."n_tot_sch_disc",0,null,0,0,null,0,0,null,0,0,null,"new_name"."n_credit_per","new_name"."n_branch","new_name"."n_discount",0,0,"new_name"."n_taxable_ret","new_name"."n_non_taxable_ret",
      null,"new_name"."n_prod_val",0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,"new_name"."n_approved","new_name"."n_approve",null,null,
      0,"new_name"."c_post_user","new_name"."c_sys_ip","new_name"."c_computer_name","new_name"."n_store_track",0,"new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no","new_name"."n_cgst_amt","new_name"."n_sgst_amt",
      "new_name"."n_igst_amt","new_name"."n_gst_cess_amt","new_name"."c_state_code","new_name"."c_eway_bill_no","new_name"."d_eway_date","new_name"."n_to_gst_type","new_name"."n_service_chg","new_name"."n_taxable_amt","new_name"."c_ordered_user","new_name"."c_store_code","new_name"."n_add_cess_amt",
      "new_name"."c_remark","new_name"."n_settle_days","new_name"."c_debit_act","new_name"."n_Post","new_name"."n_adj_type","new_name"."n_counter_ret","new_name"."n_treat_vat","new_name"."c_post_user",
      "new_name"."c_act_code",2,"new_name"."n_tcs_per","new_name"."n_tcs_taxable_amt","new_name"."n_tcs_amt","new_name"."n_tcs_on_service" ) ;
    //deliting invoice entry   
    delete from "settle_mst"
      where "c_prefix" = "old_name"."c_prefix"
      and "n_srno" = "old_name"."n_srno"
      and "c_year" = @c_year_old
      and "c_prefix1" = "old_name"."c_prefix"
      and "n_srno1" = "old_name"."n_srno"
      and "c_year1" = @c_year_old;
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( @c_year_new,
      "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."c_prefix","new_name"."n_srno",
      -1*("new_name"."n_total"),"new_name"."c_cust_code","new_name"."d_crnt_date","new_name"."d_crnt_date",1 ) ;
    return
  end if;
  if "old_name"."n_post" = 1 then
    delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
      and "ledger"."n_tran_no" = "old_name"."n_srno";
    delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix"
      and "remarks"."n_tran_id" = "old_name"."n_srno";
    delete from "gst_ledger_mst" where "n_srno" = "old_name"."n_srno"
  end if;
  delete from "settle_mst_header"
    where "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_year" = @c_year_old;
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
    "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
    "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
    "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
    "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
    "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
    "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type","n_tcs_per","n_tcs_taxable_amt","n_tcs_amt","n_tcs_on_service" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."d_crnt_date","new_name"."c_cust_code","new_name"."c_sman_code","new_name"."c_dman_code",0,"new_name"."n_discount_per","new_name"."n_other_credit_amt","new_name"."n_other_charge","new_name"."n_total",
    0,"new_name"."n_tot_sch_disc",0,null,0,0,null,0,0,null,0,0,null,"new_name"."n_credit_per","new_name"."n_branch","new_name"."n_discount",0,0,"new_name"."n_taxable_ret","new_name"."n_non_taxable_ret",
    null,"new_name"."n_prod_val",0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,"new_name"."n_approved","new_name"."n_approve",null,null,
    0,"new_name"."c_post_user","new_name"."c_sys_ip","new_name"."c_computer_name","new_name"."n_store_track",0,"new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no","new_name"."n_cgst_amt","new_name"."n_sgst_amt",
    "new_name"."n_igst_amt","new_name"."n_gst_cess_amt","new_name"."c_state_code","new_name"."c_eway_bill_no","new_name"."d_eway_date","new_name"."n_to_gst_type","new_name"."n_service_chg","new_name"."n_taxable_amt","new_name"."c_ordered_user","new_name"."c_store_code","new_name"."n_add_cess_amt",
    "new_name"."c_remark","new_name"."n_settle_days","new_name"."c_debit_act","new_name"."n_Post","new_name"."n_adj_type","new_name"."n_counter_ret","new_name"."n_treat_vat","new_name"."c_post_user",
    "new_name"."c_act_code",2,"new_name"."n_tcs_per","new_name"."n_tcs_taxable_amt","new_name"."n_tcs_amt","new_name"."n_tcs_on_service" ) ;
  //deliting invoice entry   
  delete from "settle_mst"
    where "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_year" = @c_year_old
    and "c_prefix1" = "old_name"."c_prefix"
    and "n_srno1" = "old_name"."n_srno"
    and "c_year1" = @c_year_old;
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
    "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( @c_year_new,
    "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."c_prefix","new_name"."n_srno",
    -1*("new_name"."n_total"),"new_name"."c_cust_code","new_name"."d_crnt_date","new_name"."d_crnt_date",1 ) ;
  //Added by Sripal on 04-09-2005 
  if "new_name"."n_post" <> 1 then
    return
  end if;
  if("old_name"."n_approved" = 1 and "new_name"."n_approved" = 0) or("old_name"."n_approved" = 0 and "new_name"."n_approved" = 1) then
    return
  end if;
  --  if old_name.n_post = 0 and new_name.n_post = 1 then
  // if taxable return is there debits taxable ret account
  if "new_name"."n_vaton" = 0 then
    set "s_vat_rst_act_code" = 'R_ST'
  else
    set "s_vat_rst_act_code" = 'VAT'
  end if;
  if "new_name"."n_taxable_ret" <> 0 then
    //if return is from branch
    if "new_name"."n_branch" = 1 then
      set "s_crnt_act_code" = 'TRSRTX'
    else
      //otherwise sale return from customer
      set "s_crnt_act_code" = 'SRETTX'
    end if;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","s_crnt_act_code","new_name"."d_crnt_date",
      "new_name"."n_taxable_ret","new_cust_account_code" ) 
  end if;
  // if nontaxable return is there debits nontaxable ret account
  if "new_name"."n_non_taxable_ret" <> 0 then
    // if return from branch
    if "new_name"."n_branch" = 1 then
      set "s_crnt_act_code" = 'TRSRNT'
    else
      //otherwise return from customer
      set "s_crnt_act_code" = "new_name"."c_act_code"
    end if;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","s_crnt_act_code","new_name"."d_crnt_date",
      "new_name"."n_non_taxable_ret","new_cust_account_code" ) 
  end if;
  // credit the customer with total credit note amount
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount",
    "c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_cust_account_code","new_name"."d_crnt_date",
    -"new_name"."n_total","new_name"."c_debit_act" ) ;
  //crdit the discount given
  if "new_name"."n_discount" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'DISCG',"new_name"."d_crnt_date",
      -"new_name"."n_discount","new_name"."c_debit_act" ) 
  end if;
  //LBT    
  if "new_name"."n_lbt_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-LBTCH',"new_name"."d_crnt_date",
      -"new_name"."n_lbt_amt","new_name"."c_debit_act" ) 
  end if;
  //debits the st
  if "new_name"."n_st" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'ST',"new_name"."d_crnt_date",
      "new_name"."n_st","new_cust_account_code" ) 
  end if;
  //TCS
  if "new_name"."n_tcs_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tcs_act_code","new_name"."d_crnt_date",
      "new_name"."n_tcs_amt","new_cust_account_code" ) 
  end if;
  //gst
  if "new_name"."n_sgst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_act_code","new_name"."d_crnt_date",
      "new_name"."n_sgst_amt","new_cust_account_code" ) 
  end if;
  if "new_name"."n_cgst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_act_code","new_name"."d_crnt_date",
      "new_name"."n_cgst_amt","new_cust_account_code" ) 
  end if;
  if "new_name"."n_igst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_act_code","new_name"."d_crnt_date",
      "new_name"."n_igst_amt","new_cust_account_code" ) 
  end if;
  if "new_name"."n_gst_cess_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_gst_cess_act_code","new_name"."d_crnt_date",
      "new_name"."n_gst_cess_amt","new_cust_account_code" ) 
  end if;
  if "new_name"."n_add_cess_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_add_cess_act_code","new_name"."d_crnt_date",
      "new_name"."n_add_cess_amt","new_cust_account_code" ) 
  end if;
  -------------reverese
  if "new_name"."n_igst_amt" <> 0 and("new_name"."n_to_gst_type" = 7 or "new_name"."n_to_gst_type" = 3) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_rev_act_code","new_name"."d_crnt_date",
      -"new_name"."n_igst_amt","new_cust_account_code" ) 
  end if;
  -------------
  //debits the Other Charge //added by sripal
  if "new_name"."n_other_charge" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'OCHARG',"new_name"."d_crnt_date",
      "new_name"."n_other_charge","new_cust_account_code" ) 
  end if;
  //debits the rst //added by Sripal
  if "new_name"."n_rst" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","s_vat_rst_act_code","new_name"."d_crnt_date",
      "new_name"."n_rst","new_cust_account_code" ) 
  end if;
  //debits the Cess //added by Sripal
  if "new_name"."n_cess" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CESSPY',"new_name"."d_crnt_date",
      "new_name"."n_cess","new_cust_account_code" ) 
  end if;
  //debits the Freight//added by Sripal
  if "new_name"."n_freight" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'PCBCCH',"new_name"."d_crnt_date",
      "new_name"."n_freight","new_cust_account_code" ) 
  end if;
  //debit the cst
  if "new_name"."n_cst" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CST',"new_name"."d_crnt_date",
      "new_name"."n_cst","new_cust_account_code" ) 
  end if;
  //Service Charge //jagamohan    
  if "new_name"."n_service_chg" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_service_act","new_name"."d_crnt_date",
      "new_name"."n_service_chg","new_cust_account_code" ) 
  end if;
  //adjust the rounded figure in kasar account
  set "n_rnd_amt" = "new_name"."n_taxable_ret"+"new_name"."n_non_taxable_ret"+"new_name"."n_st"+"new_name"."n_cess"+"new_name"."n_rst"+"new_name"."n_cst"+"new_name"."n_other_credit_amt"+"new_name"."n_other_charge"+"new_name"."n_freight"
    +"isnull"("new_name"."n_tcs_amt",0)
    +(if("new_name"."n_to_gst_type" = 7 or "new_name"."n_to_gst_type" = 3) then 0 else("new_name"."n_sgst_amt"+"new_name"."n_cgst_amt"+"new_name"."n_igst_amt"+"isnull"("new_name"."n_gst_cess_amt",0)+"isnull"("new_name"."n_add_cess_amt",0)) endif)+"isnull"("new_name"."n_service_chg",0)-"new_name"."n_discount"-"new_name"."n_lbt_amt"-"new_name"."n_total";
  if "n_rnd_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
      "n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"new_name"."d_crnt_date",
      -"n_rnd_amt","new_cust_account_code" ) 
  end if;
  //set the remark for this credit note in remark 
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",null,null,"new_name"."c_remark" ) ;
  if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and "trim"("isnull"("new_name"."c_from_gst_no",'')) <> "trim"("isnull"("new_name"."c_to_gst_no",'')) and "isnull"("new_name"."n_treat_vat",0) < 5 then
    insert into "gst_ledger_mst"( "n_srno","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note","n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
      "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","c_eway_bill_no","c_port_code","n_cancel_flag","d_ref_date","n_add_cess_amt" ) values
      ( "new_name"."n_srno","new_name"."d_crnt_date","new_name"."c_cust_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
      cast("new_name"."n_return_inv_no" as char(30)),'',0,-"new_name"."n_cgst_amt",-"new_name"."n_sgst_amt",-"new_name"."n_igst_amt",-"new_name"."n_gst_cess_amt",
      0,"new_name"."n_discount",(-1*"new_name"."n_taxable_amt"),"new_name"."n_total"-"isnull"("new_name"."n_tcs_amt",0),"new_name"."d_ldate","new_name"."t_ltime","new_name"."c_user","new_name"."c_state_code",-1*("new_name"."n_service_chg"),"new_name"."n_flag",0,
      "new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."c_eway_bill_no","new_name"."c_port_code","new_name"."n_cancel_flag","new_name"."d_ret_date",-"new_name"."n_add_cess_amt" ) 
  end if;
  return
//if old_name.n_post=0 and new_name.n_post=1 
--  end if;
end;
CREATE TRIGGER "Update_Ledger_From_Cust_Dbnt" after update order 1 on
"DBA"."cust_dbnt"
referencing old as "old_name" new as "new_name"
for each row
when("new_name"."n_ledg_effect" = 1)
begin
  declare @c_year_old,@c_year_new char(2);
  if "old_name"."n_stop_trigger" <> "new_name"."n_stop_trigger" then
    return
  end if;
  update "Ledger" set "Ledger"."c_act_code" = "new_name"."c_cust_code",
    "Ledger"."d_date" = "new_name"."d_dbnt_date",
    "Ledger"."n_amount" = "new_name"."n_total",
    "Ledger"."c_opp_act_code" = "new_name"."c_opp_act_code"
    where("ledger"."c_prefix" = "new_name"."c_prefix")
    and("ledger"."n_tran_no" = "new_name"."n_srno")
    and("ledger"."c_act_code" = "old_name"."c_cust_code")
    and("ledger"."c_opp_act_code" = "old_name"."c_opp_act_code");
  update "remarks" set "remarks"."c_remark" = "new_name"."c_remark"
    where "remarks"."c_prefix" = "new_name"."c_prefix"
    and "remarks"."n_tran_id" = "new_name"."n_srno";
  if "old_name"."n_cgst_amt" <> 0 then
    delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
      and("ledger"."n_tran_no" = "old_name"."n_srno")
      and "c_act_code" = "old_name"."c_cgst_act_code"
  end if;
  if "new_name"."n_cgst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_act_code","new_name"."d_dbnt_date",
      -"new_name"."n_cgst_amt","new_name"."c_opp_act_code" ) 
  end if;
  if "old_name"."n_sgst_amt" <> 0 then
    delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
      and("ledger"."n_tran_no" = "old_name"."n_srno")
      and "c_act_code" = "old_name"."c_sgst_act_code"
  end if;
  if "new_name"."n_sgst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_act_code","new_name"."d_dbnt_date",
      -"new_name"."n_sgst_amt","new_name"."c_opp_act_code" ) 
  end if;
  if "old_name"."n_igst_amt" <> 0 then
    delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
      and("ledger"."n_tran_no" = "old_name"."n_srno")
      and "c_act_code" = "old_name"."c_igst_act_code"
  end if;
  if "new_name"."n_igst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_act_code","new_name"."d_dbnt_date",
      -"new_name"."n_igst_amt","new_name"."c_opp_act_code" ) 
  end if;
  if "old_name"."n_gst_cess_amt" <> 0 then
    delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
      and("ledger"."n_tran_no" = "old_name"."n_srno")
      and "c_act_code" = "old_name"."c_gst_cess_act_code"
  end if;
  if "new_name"."n_gst_cess_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_gst_cess_act_code","new_name"."d_dbnt_date",
      -"new_name"."n_gst_cess_amt","new_name"."c_opp_act_code" ) 
  end if;
  ------Reverse
  if "new_name"."n_igst_amt" <> 0 and "new_name"."n_to_gst_type" = 7 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_rev_act_code","new_name"."d_dbnt_date",
      "new_name"."n_igst_amt","new_name"."c_opp_act_code" ) 
  end if;
  if "old_name"."n_taxable_amt" > 0 and "new_name"."n_taxable_amt" = 0 then
    delete from "gst_ledger_det"
      where "gst_ledger_det"."n_srno" = "old_name"."n_srno"
  end if;
  delete from "gst_ledger_mst" where "gst_ledger_mst"."n_srno" = "old_name"."n_srno";
  if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_gst_cess_amt"+"new_name"."n_sgst_amt"+"new_name"."n_cgst_amt"+"new_name"."n_igst_amt" <> 0 then
    insert into "gst_ledger_mst"( "n_srno","n_pk","d_date","c_act_code","c_from_gst_no","n_from_gst_type",
      "c_to_gst_no","c_ref_no","c_note",
      "n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
      "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","d_ref_date" ) values
      ( "new_name"."n_srno",0,if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and "new_name"."n_to_gst_type" = 2 then
        "DATE"("STRING"("YEAR"("DATEADD"("month",1,"isnull"("new_name"."d_dbnt_date","new_name"."d_ref_date"))))+'-'+"RIGHT"('0'+"STRING"("MONTH"("DATEADD"("month",1,"isnull"("new_name"."d_dbnt_date","new_name"."d_ref_date")))),2)+'-'+'01')
      else
        "isnull"("new_name"."d_dbnt_date","new_name"."d_ref_date")
      endif,"new_name"."c_cust_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
      "new_name"."c_ref_id","new_name"."c_remark",if "new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 3 then 1 else 0 endif,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_gst_cess_amt",
      0,"new_name"."n_discount","new_name"."n_taxable_amt","new_name"."n_total","new_name"."d_dbnt_date","new_name"."t_ltime","new_name"."c_user","new_name"."c_state_code","new_name"."n_service_chg","new_name"."n_flag",0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."d_ref_date" ) 
  end if;
  set @c_year_new = "new_name"."c_year";
  if @c_year_new is null then
    if "length"("new_name"."n_srno") > 9 then
      set @c_year_new = "uf_get_pk_component"("new_name"."n_srno",1)
    else
      if "month"("new_name"."d_dbnt_date") <= 3 then
        set @c_year_new = "right"("string"("year"("new_name"."d_dbnt_date")-1),2)
      else
        set @c_year_new = "right"("string"("year"("new_name"."d_dbnt_date")),2)
      end if end if end if;
  set @c_year_old = "old_name"."c_year";
  if @c_year_old is null then
    if "length"("old_name"."n_srno") > 9 then
      set @c_year_old = "uf_get_pk_component"("old_name"."n_srno",1)
    else
      if "month"("old_name"."d_dbnt_date") <= 3 then
        set @c_year_old = "right"("string"("year"("old_name"."d_dbnt_date")-1),2)
      else
        set @c_year_old = "right"("string"("year"("old_name"."d_dbnt_date")),2)
      end if end if end if;
  delete from "settle_mst_header"
    where "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_year" = @c_year_old;
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
    "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
    "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
    "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
    "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
    "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
    "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."d_dbnt_date","new_name"."c_cust_code",null,null,0,0,0,0,"new_name"."n_total",
    0,0,0,null,0,0,null,0,0,null,0,0,null,0,"new_name"."n_branch","new_name"."n_discount",0,0,0,0,
    null,0,0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,0,0,null,null,
    0,null,null,null,0,0,"new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no","new_name"."n_cgst_amt","new_name"."n_sgst_amt",
    "new_name"."n_igst_amt","new_name"."n_gst_cess_amt","new_name"."c_state_code","new_name"."c_eway_bill_no","new_name"."d_eway_date","new_name"."n_to_gst_type","new_name"."n_service_chg","new_name"."n_taxable_amt",null,null,"new_name"."n_add_cess_amt",
    "new_name"."c_remark",0,"new_name"."c_opp_act_code",0,0,0,0,null,null,4 ) ;
  delete from "settle_mst"
    where "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_year" = @c_year_old
    and "c_prefix1" = "old_name"."c_prefix"
    and "n_srno1" = "old_name"."n_srno"
    and "c_year1" = @c_year_old;
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
    "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( @c_year_new,
    "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."c_prefix","new_name"."n_srno",
    ("new_name"."n_total"),"new_name"."c_cust_code","new_name"."d_dbnt_date","new_name"."d_dbnt_date"+0,1 ) 
end;
CREATE TRIGGER "Update_Ledger_From_Cust_Dbnt_Crnt_Act" before update order 3
on "DBA".cust_dbnt_credit_act
referencing old as old_name new as new_name
for each row
when(new_name.n_ledg_effect=1)
begin
  update ledger set
    c_act_code=new_name.c_credit_act,
    d_date=new_name.d_dbnt_date,
    n_amount=-new_name.n_amount,
    c_opp_act_code=new_name.c_cust_code
    where ledger.c_prefix=new_name.c_prefix
    and ledger.n_tran_no=new_name.n_srno
    and ledger.c_act_code=old_name.c_credit_act
    and ledger.c_opp_act_code=old_name.c_cust_code
end;
CREATE TRIGGER "update_ledger_from_dbnt_voucher_det" after update order 1 on
"DBA"."dbnt_voucher_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  delete from "gst_ledger_det" where "gst_ledger_det"."n_srno" = "old_name"."n_srno" and "gst_ledger_det"."n_seq" = "old_name"."n_seq";
  insert into "gst_ledger_det"
    ( "n_srno","c_hsn_sac_code","d_date","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_ref_no","c_note","d_ldate","t_ltime","c_luser","c_user","c_gst_code","n_taxable_amt","n_discount","n_seq","c_opp_act_code","d_ref_date" ) values
    ( "new_name"."n_srno","new_name"."c_hsn_sac_code","new_name"."d_date","new_name"."n_cgst_per",-1*"new_name"."n_cgst_amt","new_name"."n_sgst_per",-1*"new_name"."n_sgst_amt","new_name"."n_igst_per",-1*"new_name"."n_igst_amt","new_name"."n_gst_cess_per",-1*"new_name"."n_gst_cess_amt","new_name"."c_ref_no","new_name"."c_note","new_name"."d_ldate","new_name"."t_ltime","new_name"."c_luser","new_name"."c_user","new_name"."c_gst_code",-1*"new_name"."n_taxable_amt",-1*"new_name"."n_discount","new_name"."n_seq","new_name"."c_opp_act_code","new_name"."d_ref_date" ) 
end;
CREATE TRIGGER "update_ledger_from_dbnt_voucher_mst" after update order 2 on
-------------------------------
----------------------------------------------------------------------
---------------------------------------
----------------------------------------------------------
"DBA"."dbnt_voucher_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @trantype numeric(2);
  declare @drcr numeric(1);
  declare "remark" char(100);
  declare @round_off_value numeric(4,2);
  if "new_name"."n_tran_type" = 3 then
    set @drcr = -1
  else
    set @drcr = 1
  end if;
  if "new_name"."n_tran_type" = 1 or "new_name"."n_tran_type" = 2 or "new_name"."n_tran_type" = 0 then ---1=From supplier debit note,2 =from purchase credit note,3=from purchase debit note     
    set @trantype = -1
  else
    if "new_name"."n_tran_type" = 3 then
      set @trantype = 1
    end if end if;
  set "remark" = "left"("new_name"."c_note",100);
  set @round_off_value = 0;
  set @round_off_value = "isnull"("new_name"."n_round_off",0);
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno";
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix"
    and "remarks"."n_tran_id" = "old_name"."n_srno";
  delete from "settle_mst"
    where "settle_mst"."c_year" = "old_name"."c_year"
    and "settle_mst"."c_prefix" = "old_name"."c_prefix"
    and "settle_mst"."n_srno" = "old_name"."n_srno"
    and "settle_mst"."c_year1" = "old_name"."c_year"
    and "settle_mst"."c_prefix1" = "old_name"."c_prefix"
    and "settle_mst"."n_srno1" = "old_name"."n_srno"
    and "settle_mst"."c_cust_code" = "old_name"."c_supp_code";
  //Debit Supplier
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_supp_code","new_name"."d_date",
    @drcr*"new_name"."n_total","new_name"."c_act_code" ) ;
  //credit vat acct  
  if "new_name"."n_vat_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'VAT',"new_name"."d_date",
      -"new_name"."n_vat_amt","new_name"."c_supp_code" ) 
  end if;
  //credit opp act (total - vat )
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_act_code","new_name"."d_date",
    @drcr*(-("new_name"."n_total"-"isnull"("new_name"."n_vat_amt",0)-"isnull"("new_name"."n_igst_amt",0)-"isnull"("new_name"."n_sgst_amt",0)-"isnull"("new_name"."n_cgst_amt",0)-"isnull"("new_name"."n_cess_amt",0)-"isnull"("new_name"."n_tcs_amt",0)-@round_off_value)),"new_name"."c_supp_code" ) ;
  insert into "remarks"( "c_prefix","c_chq_no","d_chq_dt","n_tran_id","c_remark" ) values
    ( "new_name"."c_prefix",null,null,"new_name"."n_srno","remark" ) ;
  if "new_name"."n_total" <> 0 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","d_date","c_cust_code","d_due_date" ) values
      ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
      "new_name"."n_total","new_name"."d_date","new_name"."c_supp_code","new_name"."d_date" ) 
  end if;
  ----------------------jagamohan
  if @round_off_value <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"new_name"."d_date",-@round_off_value,"new_name"."c_supp_code" ) 
  end if;
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_igst_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_sgst_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_cgst_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_cess_act_code";
  delete from "gst_ledger_mst" where "gst_ledger_mst"."n_srno" = "old_name"."n_srno";
  if "new_name"."n_igst_amt" <> 0 and("new_name"."n_from_gst_type" = 0) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_act_code","new_name"."d_date",@trantype*"new_name"."n_igst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_sgst_amt" <> 0 and("new_name"."n_from_gst_type" = 0) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_act_code","new_name"."d_date",@trantype*"new_name"."n_sgst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_cgst_amt" <> 0 and("new_name"."n_from_gst_type" = 0) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_act_code","new_name"."d_date",@trantype*"new_name"."n_cgst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_cess_amt" <> 0 and("new_name"."n_from_gst_type" = 0) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cess_act_code","new_name"."d_date",@trantype*"new_name"."n_cess_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_tcs_amt" <> 0 and("new_name"."n_from_gst_type" = 0) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tcs_act_code","new_name"."d_date",@trantype*"new_name"."n_tcs_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and "trim"("isnull"("new_name"."c_from_gst_no",'')) <> "trim"("isnull"("new_name"."c_to_gst_no",'')) and "new_name"."n_gst_post" <> 0 then
    insert into "gst_ledger_mst"( "n_srno","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note","n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
      "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","d_ref_date","c_eway_bill_no","c_port_code","n_cancel_flag" ) values
      ( "new_name"."n_srno","new_name"."d_date","new_name"."c_supp_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
      "new_name"."c_ref_no",'',0,-1*"isnull"("new_name"."n_cgst_amt",0),-1*"isnull"("new_name"."n_sgst_amt",0),-1*"isnull"("new_name"."n_igst_amt",0),-1*"isnull"("new_name"."n_cess_amt",0),
      0,-1*"isnull"("new_name"."n_discount",0),-1*"isnull"("new_name"."n_taxable_amt",0),"new_name"."n_total"-"isnull"("new_name"."n_tcs_amt",0),"new_name"."d_ldate","new_name"."c_user","new_name"."c_state_code","new_name"."n_service_chg","new_name"."n_flag",0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."d_ref_date","new_name"."c_eway_bill_no","new_name"."c_port_code","new_name"."n_cancel_flag" ) 
  end if
end;
CREATE TRIGGER "update_ledger_from_gst_settlement" after update order 1 on
---------------------------------------
---------------------------------------------------------update
--------------------------------------------------------------------------------
------------update
------------------------payment update
----------payment update
----------payment update
----------payment update
-----------------------payment update
"DBA"."gst_settlement"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "s_credit_act_code" char(6);
  declare "n_supp" decimal(1);
  declare @IGSTP numeric(12,2);
  declare @IGSTR numeric(12,2);
  declare @CGSTP numeric(12,2);
  declare @CGSTR numeric(12,2);
  declare @SGSTP numeric(12,2);
  declare @SGSTR numeric(12,2);
  declare @CESSP numeric(12,2);
  declare @CESSR numeric(12,2);
  declare @inrst numeric(12,2);
  set "s_credit_act_code" = "new_name"."c_credit_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno";
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix"
    and "remarks"."n_tran_id" = "old_name"."n_srno";
  set @inrst = "isnull"("new_name"."n_int_igst_amt",0)+"isnull"("new_name"."n_int_cgst_amt",0)+"isnull"("new_name"."n_int_sgst_amt",0)+"isnull"("new_name"."n_int_cess_amt",0);
  if @inrst <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_int_act_code","new_name"."d_date",
      @inrst,'000000' ) 
  end if;
  if "new_name"."n_net_amount_paid" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","s_credit_act_code","new_name"."d_date",
      -"new_name"."n_net_amount_paid",'000000' ) 
  end if;
  --IF collected<totalITC then collected ELASE total ITC ENDIF + PaidAmt*****(Dr)
  set @IGSTP = (if "new_name"."n_out_taxable_coll_igst" < ("new_name"."n_itc_net_igst"+"new_name"."n_igst_op_bal") then "new_name"."n_out_taxable_coll_igst" else("new_name"."n_itc_net_igst"+"new_name"."n_igst_op_bal") endif)+"new_name"."n_igst_paid_amt"-"new_name"."n_int_igst_amt";
  set @IGSTP = (if "new_name"."n_igst_rem_bal" <= 0 then
      if "new_name"."n_igst_op_bal" < 0 then
        "abs"("new_name"."n_igst_op_bal")+"abs"("new_name"."n_out_taxable_coll_igst")+"new_name"."n_igst_rem_bal"
      else
        "new_name"."n_out_taxable_coll_igst"+"new_name"."n_igst_rem_bal"
      endif
    else
      if "new_name"."n_igst_op_bal" < 0 then
        "abs"("new_name"."n_igst_op_bal")+"abs"("new_name"."n_out_taxable_coll_igst")
      else
        "new_name"."n_out_taxable_coll_igst"
      endif
    endif);
  --'-1* IF collected<totalITC then collected ELASE total ITC ENDIF*****(Cr)
  set @IGSTR = (if "new_name"."n_out_taxable_coll_igst" < ("new_name"."n_itc_net_igst"+"new_name"."n_igst_op_bal") then("new_name"."n_itc_net_igst"+"new_name"."n_igst_op_bal")-"new_name"."n_igst_rem_bal" else("new_name"."n_itc_net_igst"+"new_name"."n_igst_op_bal") endif);
  set @IGSTR = (if "new_name"."n_igst_rem_bal" <= 0 then
      if "new_name"."n_igst_op_bal" > 0 then
        "abs"("new_name"."n_igst_op_bal")+"abs"("new_name"."n_itc_net_igst")
      else
        "new_name"."n_itc_net_igst"
      endif
    else
      if "new_name"."n_igst_op_bal" > 0 then
        ("abs"("new_name"."n_igst_op_bal")+"abs"("new_name"."n_itc_net_igst"))-"new_name"."n_igst_rem_bal"
      else
        ("new_name"."n_itc_net_igst"-"new_name"."n_igst_rem_bal")
      endif
    endif)*-1;
  ---                                                   (new_name.n_itc_net_igst+new_name.n_igst_op_bal) then new_name.n_out_taxable_coll_igst else (new_name.n_itc_net_igst+new_name.n_igst_op_bal) endif);
  --IF collected<totalITC then collected ELASE total ITC ENDIF + PaidAmt+igst_settled againt cgst*****(Dr)
  set @CGSTP = (if "new_name"."n_out_taxable_coll_cgst" < ("new_name"."n_itc_net_cgst"+"new_name"."n_cgst_op_bal") then "new_name"."n_out_taxable_coll_cgst" else("new_name"."n_itc_net_cgst"+"new_name"."n_cgst_op_bal") endif)+("new_name"."n_cgst_paid_amt"+"new_name"."n_adj_cgst"-"new_name"."n_int_cgst_amt");
  set @CGSTP = (if "new_name"."n_cgst_rem_bal" <= 0 then
      if "new_name"."n_cgst_op_bal" < 0 then
        "abs"("new_name"."n_cgst_op_bal")+"abs"("new_name"."n_out_taxable_coll_cgst")+"new_name"."n_cgst_rem_bal"
      else
        "new_name"."n_out_taxable_coll_cgst"+"new_name"."n_cgst_rem_bal"
      endif
    else
      if "new_name"."n_cgst_op_bal" < 0 then
        "abs"("new_name"."n_cgst_op_bal")+"abs"("new_name"."n_out_taxable_coll_cgst")
      else
        "new_name"."n_out_taxable_coll_cgst"
      endif
    endif);
  --lower amount (ollected vs total itc)*****(Cr)
  set @CGSTR = (if "new_name"."n_out_taxable_coll_cgst" < ("new_name"."n_itc_net_cgst"+"new_name"."n_cgst_op_bal") then "new_name"."n_out_taxable_coll_cgst" else("new_name"."n_itc_net_cgst"+"new_name"."n_cgst_op_bal") endif);
  set @CGSTR = (if "new_name"."n_cgst_rem_bal" <= 0 then
      if "new_name"."n_cgst_op_bal" > 0 then
        "abs"("new_name"."n_cgst_op_bal")+"abs"("new_name"."n_itc_net_cgst")
      else
        "new_name"."n_itc_net_cgst"
      endif
    else
      if "new_name"."n_cgst_op_bal" > 0 then
        ("abs"("new_name"."n_cgst_op_bal")+"abs"("new_name"."n_itc_net_cgst"))-"new_name"."n_cgst_rem_bal"
      else
        ("new_name"."n_itc_net_cgst"-"new_name"."n_cgst_rem_bal")
      endif
    endif)*-1;
  --LOWER amt + paid amount + igst adusted for sgst*****(Dr)
  set @SGSTP = (if "new_name"."n_out_taxable_coll_sgst" < ("new_name"."n_itc_net_sgst"+"new_name"."n_sgst_op_bal") then "new_name"."n_out_taxable_coll_sgst" else("new_name"."n_itc_net_sgst"+"new_name"."n_sgst_op_bal") endif)+"new_name"."n_sgst_paid_amt"+"new_name"."n_adj_sgst"-"new_name"."n_int_sgst_amt";
  set @SGSTP = (if "new_name"."n_sgst_rem_bal" <= 0 then
      if "new_name"."n_sgst_op_bal" < 0 then
        "abs"("new_name"."n_sgst_op_bal")+"abs"("new_name"."n_out_taxable_coll_sgst")+"new_name"."n_sgst_rem_bal"
      else
        "new_name"."n_out_taxable_coll_sgst"+"new_name"."n_sgst_rem_bal"
      endif
    else
      if "new_name"."n_sgst_op_bal" < 0 then
        "abs"("new_name"."n_sgst_op_bal")+"abs"("new_name"."n_out_taxable_coll_sgst")
      else
        "new_name"."n_out_taxable_coll_sgst"
      endif
    endif);
  --LOWER AMT*****(Cr)
  set @SGSTR = (if "new_name"."n_out_taxable_coll_sgst" < ("new_name"."n_itc_net_sgst"+"new_name"."n_sgst_op_bal") then "new_name"."n_out_taxable_coll_sgst" else("new_name"."n_itc_net_sgst"+"new_name"."n_sgst_op_bal") endif);
  set @SGSTR = (if "new_name"."n_sgst_rem_bal" <= 0 then
      if "new_name"."n_sgst_op_bal" > 0 then
        "abs"("new_name"."n_sgst_op_bal")+"abs"("new_name"."n_itc_net_sgst")
      else
        "new_name"."n_itc_net_sgst"
      endif
    else
      if "new_name"."n_sgst_op_bal" > 0 then
        ("abs"("new_name"."n_sgst_op_bal")+"abs"("new_name"."n_itc_net_sgst"))-"new_name"."n_sgst_rem_bal"
      else
        ("new_name"."n_itc_net_sgst"-"new_name"."n_sgst_rem_bal")
      endif
    endif)*-1;
  --(If ITC amount <payable then ITC amt ELSE Payable amt) + Paid amount*****(Dr)
  set @CESSP = (if "new_name"."n_out_taxable_coll_cess" < ("new_name"."n_itc_net_cess"+"new_name"."n_cess_op_bal") then "new_name"."n_out_taxable_coll_cess" else("new_name"."n_itc_net_cess"+"new_name"."n_cess_op_bal") endif)+"new_name"."n_cess_paid_amt"-"new_name"."n_int_cess_amt";
  --(If ITC amount <payable then ITC amt ELSE Payable amt)*****(Cr)
  set @CESSR = (if "new_name"."n_out_taxable_coll_cess" < ("new_name"."n_itc_net_cess"+"new_name"."n_cess_op_bal") then "new_name"."n_out_taxable_coll_cess" else("new_name"."n_itc_net_cess"+"new_name"."n_cess_op_bal") endif);
  -----------------------------IGST
  if @IGSTP <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-IGSTP',"new_name"."d_date",
      @IGSTP,'000000' ) 
  end if;
  ----------------------------IGST
  if @IGSTR <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-IGSTR',"new_name"."d_date",
      @IGSTR,'000000' ) 
  end if;
  -----------------------------CGST
  if @CGSTP <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-CGSTP',"new_name"."d_date",
      @CGSTP,'000000' ) 
  end if;
  --------------------------CGST
  if @CGSTR <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-CGSTR',"new_name"."d_date",
      @CGSTR,'000000' ) 
  end if;
  -----------------------------SGST
  if @SGSTP <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-SGSTP',"new_name"."d_date",
      @SGSTP,'000000' ) 
  end if;
  --------------------------SGST
  if @SGSTR <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-SGSTR',"new_name"."d_date",
      @SGSTR,'000000' ) 
  end if;
  -----------------------------CESS
  if @CESSP <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-CESSP',"new_name"."d_date",
      @CESSP,'000000' ) 
  end if;
  --------------------------CESS
  if @CESSR <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-CESSR',"new_name"."d_date",
      -1*@CESSR,'000000' ) 
  end if;
  ------------------------------
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cheque_no","new_name"."d_chq_dt","new_name"."c_remark" ) 
end;
CREATE TRIGGER "Update_ledger_from_invoice_mst" after update order 2 on
--------------------------
------------------------
------------------------------------
------------------------------------
-----------sales invoice mst update
--inv insert End
--inv update start
--------------------------
"DBA"."invoice_mst"
referencing old as "old_name" new as "new_name"
for each row
when("new_name"."n_ledg_effect" = 1)
begin
  /*    
Name: Update_ledger_from_invoice_mst
Date:1/3/99
Applies to: invoice 
Parameter description:n/a
Return Value: n/a
Overview:
when invoice is changed then its relative effect to the ledger is affected
through this trigger.
it updates the following thing 
debits the customer account with updated new invoice amount
it checks the following 
discount,rounded amount,nontaxable sale,taxable sale,ST,CST
*if in old invoice any of the above does not exist and  in new it is 
then it insert the ledger
*if old invoice has any of above and in new it does not exist then it 
deletes that old entry from ledger
*if both old and new has data for above then it updates the old with new
It checks the credit,debit and advance note settlement
*if in old invoice has not any note settled and and in new has then it 
settles the note and insert invoice id in that notes master
*if old has settled note and new has no any note then it deletes from 
ledger
*if both have settled notes and both are not same then unsettled the old 
note and settled the new note
Boundary conditions: n/a
Remarks:
Revision History:
Developed by: hitesh
Tested by:
*/
  declare "old_cust_account_code" char(6);
  declare "new_cust_account_code" char(6);
  declare "old_sales_account_code" char(6);
  declare "new_sales_account_code" char(6);
  declare "old_vat_rst_account_code" char(6);
  declare "new_vat_rst_account_code" char(6);
  declare "remark" char(50);
  declare "n_old_rnd_amt" decimal(4,2);
  declare "n_new_rnd_amt" decimal(4,2);
  declare "c_phase" char(6);
  declare @insert_settle_mst,@branch_sale numeric(1);
  declare @c_year_old,@c_year_new char(2);
  declare @doc_date_old,@doc_date_new date;
  declare @crnt_yr,@dbnt_yr,@repl_yr,@adv_year char(2);
  declare @crnt_date,@dbnt_date,@repl_date,@adv_date date;
  declare @invopen_bal_amnt numeric(12,2);
  --/n_stop_trigger added to stop execution when balance amount is getting updated from receipt then this flag will be incremented with one
  if "old_name"."n_stop_trigger" <> "new_name"."n_stop_trigger" then
    return
  end if;
  if "old_name"."n_counter_sale" = 1 then
    // if counter sale then customer account is sale in old
    set "old_cust_account_code" = 'CASH'
  else
    //otherwise customer acccount code in old
    set "old_cust_account_code" = "old_name"."c_cust_code"
  end if;
  if "new_name"."n_counter_sale" = 1 then
    // if counter sale then customer account is sale in new
    set "new_cust_account_code" = 'CASH';
    if "new_name"."n_sub_sale" = 1 then
      //if counter sale and subsale then set remark 
      set "remark" = 'Counter sale and Sub sale'
    else
      // if only counter sale then set remark
      set "remark" = 'Counter sale'
    end if
  else set "new_cust_account_code" = "new_name"."c_cust_code";
    if "new_name"."n_sub_sale" = 1 then
      // if only subsale then set remark
      set "remark" = 'Sub sale'
    else
      set "remark" = ''
    end if end if;
  if "old_name"."n_vaton" = 1 then
    // if counter sale then customer account is sale in old
    set "old_vat_rst_account_code" = 'VAT'
  else
    //otherwise customer acccount code in old
    set "old_vat_rst_account_code" = 'R_ST'
  end if;
  if "new_name"."n_vaton" = 1 then
    // if counter sale then customer account is sale in old
    set "new_vat_rst_account_code" = 'VAT'
  else
    //otherwise customer acccount code in old
    set "new_vat_rst_account_code" = 'R_ST'
  end if;
  //change in customer account debit 
  /*
update ledger set c_act_code=new_cust_account_code,d_date=new_name.d_inv_date,
n_amount=new_name.n_total+new_name.n_crnt_amt-new_name.n_dbnt_amt+new_name.n_adv_amt,
c_opp_act_code=new_name.c_credit_act
where ledger.c_prefix=old_name.c_prefix and ledger.n_tran_no=old_name.n_srno and ledger.c_act_code=old_cust_account_code;
*/
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'CASH';
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_cust_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_igst_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_sgst_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_cgst_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_service_act";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_gst_cess_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_add_cess_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_tcs_act_code";
  -----
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_igst_rev_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_sgst_rev_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_cgst_rev_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_gst_cess_rev_act_code";
  -----
  delete from "gst_ledger_mst" where "gst_ledger_mst"."n_srno" = "old_name"."n_srno";
  delete from "inv_track" where "n_inv_no" = "old_name"."n_srno";
  if "new_cust_account_code" = 'CASH' then
    if "new_name"."n_total" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_cust_account_code","new_name"."d_inv_date","new_name"."n_total","new_name"."c_credit_act" ) 
    end if;
    if "new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"+"new_name"."n_adv_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","new_name"."d_inv_date","new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"+"new_name"."n_adv_amt","new_name"."c_credit_act" ) 
    end if
  else insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_cust_account_code","new_name"."d_inv_date","new_name"."n_total"+"new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"+"new_name"."n_adv_amt","new_name"."c_credit_act" ) 
  end if;
  //if old has no discount and new has discount then insert new
  if "old_name"."n_disc_amt" = 0 and "new_name"."n_disc_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'DISCG',"new_name"."d_inv_date",
      "new_name"."n_disc_amt","new_name"."c_credit_act" ) 
  end if;
  //if old has discount and new has no discount then delete old
  if "old_name"."n_disc_amt" <> 0 then
    if "new_name"."n_disc_amt" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'DISCG'
    else
      //if old has discount and new has discount then update old with new 
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = "new_name"."n_disc_amt",
        "c_opp_act_code" = "new_name"."c_credit_act"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'DISCG'
    end if end if;
  //difference between actual total and rounded total
  //rounded amount 
  /*   
set n_old_rnd_amt = old_name.n_taxable_sale+old_name.n_non_taxable_sale+old_name.n_other_charge+old_name.n_freight+old_name.n_st+old_name.n_cess+old_name.n_rst+old_name.n_cst
+(if(old_name.n_to_gst_type = 7 or old_name.n_to_gst_type = 3) then 0 else(old_name.n_sgst_amt+old_name.n_cgst_amt+old_name.n_igst_amt+isnull(old_name.n_gst_cess_amt,0)+isnull(old_name.n_add_cess_amt,0)) endif)
+isnull(old_name.n_tcs_amt,0)
-old_name.n_disc_amt-old_name.n_lbt_amt-old_name.n_crnt_amt+old_name.n_dbnt_amt-old_name.n_adv_amt+isnull(old_name.n_service_chg,0)-old_name.n_total;
*/
  set "n_new_rnd_amt" = "new_name"."n_taxable_sale"+"new_name"."n_non_taxable_sale"+"new_name"."n_other_charge"+"new_name"."n_freight"+"new_name"."n_st"+"new_name"."n_cess"+"new_name"."n_rst"+"new_name"."n_cst"
    +"isnull"("new_name"."n_tcs_amt",0)
    +(if("new_name"."n_to_gst_type" = 7 or "new_name"."n_to_gst_type" = 3) then 0 else("new_name"."n_sgst_amt"+"new_name"."n_cgst_amt"+"new_name"."n_igst_amt"+"isnull"("new_name"."n_gst_cess_amt",0)+"isnull"("new_name"."n_add_cess_amt",0)) endif)
    -"new_name"."n_disc_amt"-"new_name"."n_lbt_amt"-"new_name"."n_crnt_amt"+"new_name"."n_dbnt_amt"-"new_name"."n_adv_amt"+"isnull"("new_name"."n_service_chg",0)-"new_name"."n_total";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'KASAR';
  --  if n_old_rnd_amt = 0 then
  if "n_new_rnd_amt" <> 0 then
    //if old has no round figure in total and new has round then insert 
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"new_name"."d_inv_date","n_new_rnd_amt","new_cust_account_code" ) 
  end if;
  --    end if;
  //-------commented by jagamohan on 20-10-2020 as kasar acount on recalcualtion not updating after speaking to Sajith sir 
  //if old is rounded and new has not rounded then delete 
  /*  
if n_old_rnd_amt <> 0 then
if n_new_rnd_amt = 0 then
delete from ledger where ledger.c_prefix = old_name.c_prefix and ledger.n_tran_no = old_name.n_srno and ledger.c_act_code = 'KASAR'
else
//if old and new total are rounded then set as a new n_rnd_amt
update ledger
set d_date = new_name.d_inv_date,
n_amount = n_new_rnd_amt,
c_opp_act_code = new_cust_account_code
where ledger.c_prefix = old_name.c_prefix and ledger.n_tran_no = old_name.n_srno and ledger.c_act_code = 'KASAR'
end if end if; //for non taxable amount 
*/
  if "new_name"."n_branch" = 1 then
    //if new sale is transfer to the branch
    set "new_sales_account_code" = 'TRANNT'
  else
    // otherwise new sale is to customer
    set "new_sales_account_code" = 'SALENT'
  end if;
  if "old_name"."n_branch" = 1 then
    //if old sale is transfer to the branch
    set "old_sales_account_code" = 'TRANNT'
  else
    //other wise old sale is to customer
    set "old_sales_account_code" = 'SALENT'
  end if;
  if "old_name"."n_non_taxable_sale" = 0 and "new_name"."n_non_taxable_sale" <> 0 then
    //if old has no nontaxable sale and new has then insert
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_sales_account_code","new_name"."d_inv_date",
      -"new_name"."n_non_taxable_sale","new_cust_account_code" ) 
  end if;
  if "old_name"."n_non_taxable_sale" <> 0 then
    if "new_name"."n_non_taxable_sale" = 0 then
      // if old has nontaxable sale and new has not then delete old
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno"
        and "ledger"."c_act_code" = "old_sales_account_code"
    else
      //if old and new have nontaxable sale then update old with new
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = -"new_name"."n_non_taxable_sale",
        "c_act_code" = "new_sales_account_code",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno"
        and "ledger"."c_act_code" = "old_sales_account_code"
    end if end if;
  //for taxable amount
  //set proper taxable sale account code
  if "new_name"."n_branch" = 1 then
    //if taxable sale is transfer to the branch
    set "new_sales_account_code" = 'TRANTX'
  else
    //otherwise to the customer
    set "new_sales_account_code" = 'SALETX'
  end if;
  if "old_name"."n_branch" = 1 then
    //if old sale is transfer to the branch
    set "old_sales_account_code" = 'TRANTX'
  else
    //otherwise sale is to the customer
    set "old_sales_account_code" = 'SALETX'
  end if;
  if "old_name"."n_taxable_sale" = 0 and "new_name"."n_taxable_sale" <> 0 then
    //if old has no taxable sale and new has taxable then insert new
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_sales_account_code","new_name"."d_inv_date",
      -"new_name"."n_taxable_sale","new_cust_account_code" ) 
  end if;
  if "old_name"."n_taxable_sale" <> 0 then
    if "new_name"."n_taxable_sale" = 0 then
      // if old has taxable sale and new has no taxable sale then delete old
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno"
        and "ledger"."c_act_code" = "old_sales_account_code"
    else
      //if new and old both have taxable sale then update old with new value
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = -"new_name"."n_taxable_sale",
        "c_act_code" = "new_sales_account_code",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno"
        and "ledger"."c_act_code" = "old_sales_account_code"
    end if end if;
  // if old has no Other Charge and new has then insert new
  if "old_name"."n_other_charge" = 0 and "new_name"."n_other_charge" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'OCHARG',"new_name"."d_inv_date",-"new_name"."n_other_charge","new_cust_account_code" ) 
  end if;
  //if old has Other Charge and new has not then delete old
  if "old_name"."n_other_charge" <> 0 then
    if "new_name"."n_other_charge" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'OCHARG'
    else
      // if old and new both have Other Charge then update old with new
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = -"new_name"."n_other_charge",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'OCHARG'
    end if end if;
  // if old has no ST and new has then insert new
  if "old_name"."n_st" = 0 and "new_name"."n_st" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'ST',"new_name"."d_inv_date",-"new_name"."n_st","new_cust_account_code" ) 
  end if;
  //if old has st and new has not then delete old
  if "old_name"."n_st" <> 0 then
    if "new_name"."n_st" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'ST'
    else
      // if old and new both have st then update old with new
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = -"new_name"."n_st",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'ST'
    end if end if;
  // if old has no Cess and new has then insert new
  if "old_name"."n_cess" = 0 and "new_name"."n_cess" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CESSPY',"new_name"."d_inv_date",-"new_name"."n_cess","new_cust_account_code" ) 
  end if;
  //if old has Cess and new has not then delete old
  if "old_name"."n_cess" <> 0 then
    if "new_name"."n_cess" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'CESSPY'
    else
      // if old and new both have cess then update old with new
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = -"new_name"."n_cess",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'CESSPY'
    end if end if;
  // if old has no RST and new has then insert new
  if "old_name"."n_rst" = 0 and "new_name"."n_rst" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_vat_rst_account_code","new_name"."d_inv_date",-"new_name"."n_rst","new_cust_account_code" ) 
  end if;
  //if old has rst and new has not then delete old
  if "old_name"."n_rst" <> 0 then
    if "new_name"."n_rst" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_vat_rst_account_code"
    else
      // if old and new both have st then update old with new
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = -"new_name"."n_rst",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_vat_rst_account_code"
    end if end if;
  // if old has no freight and new has then insert new
  if "old_name"."n_freight" = 0 and "new_name"."n_freight" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'PCBCCH',"new_name"."d_inv_date",-"new_name"."n_freight","new_cust_account_code" ) 
  end if;
  //if old has FREIGHT and new has not then delete old
  if "old_name"."n_freight" <> 0 then
    if "new_name"."n_freight" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'PCBCCH'
    else
      // if old and new both have st then update old with new
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = -"new_name"."n_freight",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'PCBCCH'
    end if end if;
  // if old has no lbt and new has then insert new
  if "old_name"."n_lbt_amt" = 0 and "new_name"."n_lbt_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-LBTCH',"new_name"."d_inv_date","new_name"."n_lbt_amt","new_cust_account_code" ) 
  end if;
  //if old has lbt and new has not then delete old
  if "old_name"."n_lbt_amt" <> 0 then
    if "new_name"."n_lbt_amt" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = '-LBTCH'
    else
      // if old and new both have st then update old with new
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = "new_name"."n_lbt_amt",
        "c_opp_act_code" = "new_name"."c_credit_act"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = '-LBTCH'
    end if end if;
  // if old has no CST and new has then insert new
  if "old_name"."n_cst" = 0 and "new_name"."n_cst" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CST',"new_name"."d_inv_date",
      -"new_name"."n_cst","new_cust_account_code" ) 
  end if;
  //if old has cst and new has not then delete old
  if "old_name"."n_cst" <> 0 then
    if "new_name"."n_cst" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'CST'
    else
      // if old and new both have cst then update old with new
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = -"new_name"."n_cst",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'CST'
    end if end if;
  if "new_name"."n_tcs_amt" <> 0 then --jagamohan on 25-09-2020 
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tcs_act_code","new_name"."d_inv_date",
      -"new_name"."n_tcs_amt","new_cust_account_code" ) 
  end if;
  if "new_name"."n_cgst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_act_code","new_name"."d_inv_date",
      -"new_name"."n_cgst_amt","new_cust_account_code" ) 
  end if;
  if "new_name"."n_sgst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_act_code","new_name"."d_inv_date",
      -"new_name"."n_sgst_amt","new_cust_account_code" ) 
  end if;
  if "new_name"."n_igst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_act_code","new_name"."d_inv_date",
      -"new_name"."n_igst_amt","new_cust_account_code" ) 
  end if;
  if "isnull"("new_name"."n_gst_cess_amt",0) <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_gst_cess_act_code","new_name"."d_inv_date",
      -"isnull"("new_name"."n_gst_cess_amt",0),"new_cust_account_code" ) 
  end if;
  if "new_name"."n_add_cess_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_add_cess_act_code","new_name"."d_inv_date",
      -"new_name"."n_add_cess_amt","new_cust_account_code" ) 
  end if;
  ------Reverse
  if "new_name"."n_igst_amt" <> 0 and("new_name"."n_to_gst_type" = 7 or "new_name"."n_to_gst_type" = 3) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_rev_act_code","new_name"."d_inv_date",
      "new_name"."n_igst_amt","new_cust_account_code" ) 
  end if;
  ------------
  if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and "trim"("isnull"("new_name"."c_from_gst_no",'')) <> "trim"("isnull"("new_name"."c_to_gst_no",'')) then
    insert into "gst_ledger_mst"( "n_srno","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note","n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
      "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","c_eway_bill_no","c_port_code","n_cancel_flag","n_add_cess_amt" ) values
      ( "new_name"."n_srno","new_name"."d_inv_date","new_name"."c_cust_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
      '','',0,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","isnull"("new_name"."n_gst_cess_amt",0),
      0,"new_name"."n_disc_amt"+"new_name"."n_fix_discount",("new_name"."n_taxable_amt"),"new_name"."n_total"-"isnull"("new_name"."n_tcs_amt",0)+(if "isnull"("new_name"."n_crnt_no",0) > 0 then "isnull"("new_name"."n_crnt_amt",0) else 0 endif)
      +(if "isnull"("new_name"."n_adv_no",0) > 0 then "isnull"("new_name"."n_adv_amt",0) else 0 endif)-(if "isnull"("new_name"."n_dbnt_no",0) > 0 then "isnull"("new_name"."n_dbnt_amt",0) else 0 endif),
      "new_name"."d_ldate","new_name"."t_ltime","new_name"."c_user","new_name"."c_state_code","new_name"."n_service_chg","new_name"."n_flag",0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."c_eway_bill_no","new_name"."c_port_code","new_name"."n_cancel_flag","new_name"."n_add_cess_amt" ) 
  end if;
  // update the old remark with new remark
  update "remarks" set "c_remark" = "remark" where "remarks"."c_prefix" = "old_name"."c_prefix" and "remarks"."n_tran_id" = "old_name"."n_srno";
  // old old has not any credit note settled and new has settled the 
  //credit note then update crnt_mst with invoice number and prefix
  if "old_name"."n_crnt_no" = 0 then
    if "new_name"."n_crnt_no" <> 0 then
      if "new_name"."c_crnt_prefix" = 'MD' then
        update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where "mdadj_mst"."c_prefix" = "new_name"."c_crnt_prefix"
          and "mdadj_mst"."n_srno" = "new_name"."n_crnt_no"
          and "mdadj_mst"."c_inv_recp_prefix" is null
          and "mdadj_mst"."n_inv_recp_no" = 0
      else
        update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "crnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where "crnt_mst"."c_prefix" = "new_name"."c_crnt_prefix"
          and "crnt_mst"."n_srno" = "new_name"."n_crnt_no"
          and "crnt_mst"."c_inv_recp_prefix" is null
          and "crnt_mst"."n_inv_recp_no" = 0
      end if;
      //if crdit note is already settled then gives message
      if sqlstate = '02000' then
        raiserror 18000 "Credit note is already settlled. You cannot Save this Invoice. "
      end if end if end if;
  if "old_name"."n_crnt_repl_no" = 0 then
    if "new_name"."n_crnt_repl_no" <> 0 then
      if "new_name"."c_crnt_repl_prefix" = 'MD' then
        update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where("mdadj_mst"."c_prefix" = "new_name"."c_crnt_repl_prefix"
          and "mdadj_mst"."n_srno" = "new_name"."n_crnt_repl_no")
          and "mdadj_mst"."c_inv_recp_prefix" is null
          and "mdadj_mst"."n_inv_recp_no" = 0
      else
        update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "crnt_repl_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where("crnt_repl_mst"."c_prefix" = "new_name"."c_crnt_repl_prefix"
          and "crnt_repl_mst"."n_srno" = "new_name"."n_crnt_repl_no")
          and "crnt_repl_mst"."c_inv_recp_prefix" is null
          and "crnt_repl_mst"."n_inv_recp_no" = 0
      end if;
      //if crdit note is already settled then gives message
      if sqlstate = '02000' then
        raiserror 18000 "Replacement Credit note is already settlled. You cannot Save this Invoice. "
      end if end if end if;
  //if old has settled credit note and new has not then update crnt_mst
  // and unset the settled credit note with prefix value null and
  //invoice number 0
  if "old_name"."n_crnt_no" <> 0 then
    if "new_name"."n_crnt_no" = 0 then
      if "old_name"."c_crnt_prefix" = 'MD' then
        update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
          "mdadj_mst"."n_inv_recp_no" = 0
          where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_prefix"
          and "mdadj_mst"."n_srno" = "old_name"."n_crnt_no"
          and "mdadj_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
          and "mdadj_mst"."n_inv_recp_no" = "old_name"."n_srno"
      else
        update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = null,
          "crnt_mst"."n_inv_recp_no" = 0
          where "crnt_mst"."c_prefix" = "old_name"."c_crnt_prefix"
          and "crnt_mst"."n_srno" = "old_name"."n_crnt_no"
          and "crnt_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
          and "crnt_mst"."n_inv_recp_no" = "old_name"."n_srno"
      end if;
      if sqlstate = '02000' then
        raiserror 18000 "Cannot update the credit note. You cannot Save this Invoice. "
      // if both old and new has credit note settled
      end if
    else if "old_name"."n_crnt_no" = "new_name"."n_crnt_no" then
        // if old and new credit note numbers are same
        if "old_name"."c_crnt_prefix" = 'MD' then
          update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_prefix"
            and "mdadj_mst"."n_srno" = "old_name"."n_crnt_no"
            and("mdadj_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("mdadj_mst"."n_inv_recp_no" = "old_name"."n_srno")
        else
          update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "crnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "crnt_mst"."c_prefix" = "old_name"."c_crnt_prefix"
            and "crnt_mst"."n_srno" = "old_name"."n_crnt_no"
            and("crnt_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("crnt_mst"."n_inv_recp_no" = "old_name"."n_srno")
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Credit note is already settlled. You cannot Save this Invoice. "
        // if old and new credit note are not same then unsettled old credit note
        end if
      else if "old_name"."c_crnt_prefix" = 'MD' then
          update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
            "mdadj_mst"."n_inv_recp_no" = 0
            where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_prefix"
            and "mdadj_mst"."n_srno" = "old_name"."n_crnt_no"
            and("mdadj_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("mdadj_mst"."n_inv_recp_no" = "old_name"."n_srno")
        else
          update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = null,
            "crnt_mst"."n_inv_recp_no" = 0
            where "crnt_mst"."c_prefix" = "old_name"."c_crnt_prefix"
            and "crnt_mst"."n_srno" = "old_name"."n_crnt_no"
            and("crnt_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("crnt_mst"."n_inv_recp_no" = "old_name"."n_srno")
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Credit note updation error. You cannot Save this Invoice. "
        end if;
        //if old and new credit note are not same then settled new credit note
        if "new_name"."c_crnt_prefix" = 'MD' then
          update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "mdadj_mst"."c_prefix" = "new_name"."c_crnt_prefix"
            and "mdadj_mst"."n_srno" = "new_name"."n_crnt_no"
            and "mdadj_mst"."c_inv_recp_prefix" is null
            and "mdadj_mst"."n_inv_recp_no" = 0
        else
          update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "crnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "crnt_mst"."c_prefix" = "new_name"."c_crnt_prefix"
            and "crnt_mst"."n_srno" = "new_name"."n_crnt_no"
            and "crnt_mst"."c_inv_recp_prefix" is null
            and "crnt_mst"."n_inv_recp_no" = 0
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Credit note updation error. You cannot Save this Invoice. "
        end if end if end if end if;
  if "old_name"."n_crnt_repl_no" <> 0 then
    if "new_name"."n_crnt_repl_no" = 0 then
      if "old_name"."c_crnt_repl_prefix" = 'MD' then
        update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
          "mdadj_mst"."n_inv_recp_no" = 0
          where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_repl_prefix"
          and "mdadj_mst"."n_srno" = "old_name"."n_crnt_repl_no"
          and "mdadj_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
          and "mdadj_mst"."n_inv_recp_no" = "old_name"."n_srno"
      else
        update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = null,
          "crnt_repl_mst"."n_inv_recp_no" = 0
          where "crnt_repl_mst"."c_prefix" = "old_name"."c_crnt_repl_prefix"
          and "crnt_repl_mst"."n_srno" = "old_name"."n_crnt_repl_no"
          and "crnt_repl_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
          and "crnt_repl_mst"."n_inv_recp_no" = "old_name"."n_srno"
      end if;
      if sqlstate = '02000' then
        raiserror 18000 "Cannot update the Replacement credit note. You cannot Save this Invoice. "
      // if both old and new has credit note settled
      end if
    else if "old_name"."n_crnt_repl_no" = "new_name"."n_crnt_repl_no" then
        // if old and new credit note numbers are same
        if "old_name"."c_crnt_repl_prefix" = 'MD' then
          update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_repl_prefix"
            and "mdadj_mst"."n_srno" = "old_name"."n_crnt_repl_no"
            and("mdadj_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("mdadj_mst"."n_inv_recp_no" = "old_name"."n_srno")
        else
          update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "crnt_repl_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "crnt_repl_mst"."c_prefix" = "old_name"."c_crnt_repl_prefix"
            and "crnt_repl_mst"."n_srno" = "old_name"."n_crnt_repl_no"
            and("crnt_repl_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("crnt_repl_mst"."n_inv_recp_no" = "old_name"."n_srno")
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Replacement Credit note is already settlled. You cannot Save this Invoice. "
        // if old and new credit note are not same then unsettled old credit note
        end if
      else if "old_name"."c_crnt_repl_prefix" = 'MD' then
          update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
            "mdadj_mst"."n_inv_recp_no" = 0
            where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_repl_prefix"
            and "mdadj_mst"."n_srno" = "old_name"."n_crnt_repl_no"
            and("mdadj_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("mdadj_mst"."n_inv_recp_no" = "old_name"."n_srno")
        else
          update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = null,
            "crnt_repl_mst"."n_inv_recp_no" = 0
            where "crnt_repl_mst"."c_prefix" = "old_name"."c_crnt_repl_prefix"
            and "crnt_repl_mst"."n_srno" = "old_name"."n_crnt_repl_no"
            and("crnt_repl_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("crnt_repl_mst"."n_inv_recp_no" = "old_name"."n_srno")
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Replacement Credit note updation error. You cannot Save this Invoice. "
        end if;
        //if old and new credit note are not same then settled new credit note
        if "new_name"."c_crnt_repl_prefix" = 'MD' then
          update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "mdadj_mst"."c_prefix" = "new_name"."c_crnt_repl_prefix"
            and "mdadj_mst"."n_srno" = "new_name"."n_crnt_repl_no"
            and "mdadj_mst"."c_inv_recp_prefix" is null
            and "mdadj_mst"."n_inv_recp_no" = 0
        else
          update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "crnt_repl_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "crnt_repl_mst"."c_prefix" = "new_name"."c_crnt_repl_prefix"
            and "crnt_repl_mst"."n_srno" = "new_name"."n_crnt_repl_no"
            and "crnt_repl_mst"."c_inv_recp_prefix" is null
            and "crnt_repl_mst"."n_inv_recp_no" = 0
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Credit note updation error. You cannot Save this Invoice. "
        end if end if end if end if;
  //if old has not debit note settled and new has debit note settled
  // then set th e new debit note
  if "old_name"."n_dbnt_no" = 0 then
    if "new_name"."n_dbnt_no" <> 0 then
      if "new_name"."c_dbnt_prefix" = 'MB' then
        update "mdadj_dbnt_mst" set "mdadj_dbnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "mdadj_dbnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where "mdadj_dbnt_mst"."c_prefix" = "new_name"."c_dbnt_prefix"
          and "mdadj_dbnt_mst"."n_srno" = "new_name"."n_dbnt_no"
          and "mdadj_dbnt_mst"."c_inv_recp_prefix" is null
          and "mdadj_dbnt_mst"."n_inv_recp_no" = 0
      else
        update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "cust_dbnt"."n_inv_recp_no" = "new_name"."n_srno"
          where "cust_dbnt"."c_prefix" = "new_name"."c_dbnt_prefix"
          and "cust_dbnt"."n_srno" = "new_name"."n_dbnt_no"
          and "cust_dbnt"."c_inv_recp_prefix" is null
          and "cust_dbnt"."n_inv_recp_no" = 0
      end if;
      if sqlstate = '02000' then
        raiserror 18000 "Debit note is already settlled. You cannot Save this Invoice. "
      end if end if end if;
  // if old has debit note settled and new has not any debit note settled
  // then unsettled the debit note
  if "old_name"."n_dbnt_no" <> 0 then
    if "new_name"."n_dbnt_no" = 0 then
      if "old_name"."c_dbnt_prefix" = 'MB' then
        update "mdadj_dbnt_mst"
          set "mdadj_dbnt_mst"."c_inv_recp_prefix" = null,
          "mdadj_dbnt_mst"."n_inv_recp_no" = 0
          where "mdadj_dbnt_mst"."c_prefix" = "old_name"."c_dbnt_prefix"
          and "mdadj_dbnt_mst"."n_srno" = "old_name"."n_dbnt_no"
          and "mdadj_dbnt_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
          and "mdadj_dbnt_mst"."n_inv_recp_no" = "old_name"."n_srno"
      else
        update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = null,
          "cust_dbnt"."n_inv_recp_no" = 0
          where "cust_dbnt"."c_prefix" = "old_name"."c_dbnt_prefix"
          and "cust_dbnt"."n_srno" = "old_name"."n_dbnt_no"
          and "cust_dbnt"."c_inv_recp_prefix" = "old_name"."c_prefix"
          and "cust_dbnt"."n_inv_recp_no" = "old_name"."n_srno"
      end if;
      if sqlstate = '02000' then
        raiserror 18000 "Cannot update the debit note. You cannot Save this Invoice. "
      // if both old and new have debit note settled
      end if
    else if "old_name"."n_dbnt_no" = "new_name"."n_dbnt_no" then
        // if old and new debit note are same then
        if "old_name"."c_dbnt_prefix" = 'MB' then
          update "mdadj_dbnt_mst" set "mdadj_dbnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "mdadj_dbnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "mdadj_dbnt_mst"."c_prefix" = "old_name"."c_dbnt_prefix"
            and "mdadj_dbnt_mst"."n_srno" = "old_name"."n_dbnt_no"
            and("mdadj_dbnt_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("mdadj_dbnt_mst"."n_inv_recp_no" = "old_name"."n_srno")
        else
          update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "cust_dbnt"."n_inv_recp_no" = "new_name"."n_srno"
            where "cust_dbnt"."c_prefix" = "old_name"."c_dbnt_prefix"
            and "cust_dbnt"."n_srno" = "old_name"."n_dbnt_no"
            and("cust_dbnt"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("cust_dbnt"."n_inv_recp_no" = "old_name"."n_srno")
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Debit note is already settlled. You cannot Save this Invoice. "
        // if old and new debit note are not same then unsettled old debit note
        end if
      else if "old_name"."c_dbnt_prefix" = 'MB' then
          update "mdadj_dbnt_mst" set "mdadj_dbnt_mst"."c_inv_recp_prefix" = null,
            "mdadj_dbnt_mst"."n_inv_recp_no" = 0
            where "mdadj_dbnt_mst"."c_prefix" = "old_name"."c_dbnt_prefix"
            and "mdadj_dbnt_mst"."n_srno" = "old_name"."n_dbnt_no"
            and("mdadj_dbnt_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("mdadj_dbnt_mst"."n_inv_recp_no" = "old_name"."n_srno")
        else
          update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = null,
            "cust_dbnt"."n_inv_recp_no" = 0
            where "cust_dbnt"."c_prefix" = "old_name"."c_dbnt_prefix"
            and "cust_dbnt"."n_srno" = "old_name"."n_dbnt_no"
            and("cust_dbnt"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("cust_dbnt"."n_inv_recp_no" = "old_name"."n_srno")
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Debit note updation error. You cannot Save this Invoice. "
        end if;
        //if old and new are different then settled new debit note
        if "new_name"."c_dbnt_prefix" = 'MB' then
          update "mdadj_dbnt_mst" set "mdadj_dbnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "mdadj_dbnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "mdadj_dbnt_mst"."c_prefix" = "new_name"."c_dbnt_prefix"
            and "mdadj_dbnt_mst"."n_srno" = "new_name"."n_dbnt_no"
            and "mdadj_dbnt_mst"."c_inv_recp_prefix" is null
            and "mdadj_dbnt_mst"."n_inv_recp_no" = 0
        else
          update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "cust_dbnt"."n_inv_recp_no" = "new_name"."n_srno"
            where "cust_dbnt"."c_prefix" = "new_name"."c_dbnt_prefix"
            and "cust_dbnt"."n_srno" = "new_name"."n_dbnt_no"
            and "cust_dbnt"."c_inv_recp_prefix" is null
            and "cust_dbnt"."n_inv_recp_no" = 0
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Debit note updation error. You cannot Save this Invoice. "
        end if end if end if end if;
  // if old has not advance note settled and new has advance note then 
  // settled the advance note
  if "old_name"."n_adv_no" = 0 then
    if "new_name"."n_adv_no" <> 0 then
      if "new_name"."c_adv_prefix" = 'MV' then
        update "mdadj_adv_mst"
          set "mdadj_adv_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "mdadj_adv_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where "mdadj_adv_mst"."c_prefix" = "new_name"."c_adv_prefix"
          and "mdadj_adv_mst"."n_srno" = "new_name"."n_adv_no"
          and "mdadj_adv_mst"."c_inv_recp_prefix" is null
          and "mdadj_adv_mst"."n_inv_recp_no" = 0
      else
        update "cust_advance" set "cust_advance"."c_inv_prefix" = "new_name"."c_prefix",
          "cust_advance"."n_inv_no" = "new_name"."n_srno"
          where "cust_advance"."c_prefix" = "new_name"."c_adv_prefix"
          and "cust_advance"."n_srno" = "new_name"."n_adv_no"
          and "cust_advance"."c_inv_prefix" is null
          and "cust_advance"."n_inv_no" = 0
      end if;
      if sqlstate = '02000' then
        raiserror 18000 "Advance note is already settlled. You cannot Save this Invoice. "
      end if end if end if;
  //if old has advance note settled and new has not then unsettled the 
  // old advance note
  if "old_name"."n_adv_no" <> 0 then
    if "new_name"."n_adv_no" = 0 then
      if "old_name"."c_adv_prefix" = 'MV' then
        update "mdadj_adv_mst"
          set "mdadj_adv_mst"."c_inv_recp_prefix" = null,
          "mdadj_adv_mst"."n_inv_recp_no" = 0
          where "mdadj_adv_mst"."c_prefix" = "old_name"."c_adv_prefix"
          and "mdadj_adv_mst"."n_srno" = "old_name"."n_adv_no"
          and "mdadj_adv_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
          and "mdadj_adv_mst"."n_inv_recp_no" = "old_name"."n_srno"
      else
        update "cust_advance" set "cust_advance"."c_inv_prefix" = null,
          "cust_advance"."n_inv_no" = 0
          where "cust_advance"."c_prefix" = "old_name"."c_adv_prefix"
          and "cust_advance"."n_srno" = "old_name"."n_adv_no"
          and "cust_advance"."c_inv_prefix" = "old_name"."c_prefix"
          and "cust_advance"."n_inv_no" = "old_name"."n_srno"
      end if;
      if sqlstate = '02000' then
        raiserror 18000 "Cannot update the advance note. You cannot Save this Invoice. "
      // if both new and old have advance note settled 
      // if both advance note are same
      end if
    else if "old_name"."n_adv_no" = "new_name"."n_adv_no" then
        if "old_name"."c_adv_prefix" = 'MV' then
          update "mdadj_adv_mst"
            set "mdadj_adv_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "mdadj_adv_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "mdadj_adv_mst"."c_prefix" = "old_name"."c_adv_prefix"
            and "mdadj_adv_mst"."n_srno" = "old_name"."n_adv_no"
            and "mdadj_adv_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
            and "mdadj_adv_mst"."n_inv_recp_no" = "old_name"."n_srno"
        else
          update "cust_advance" set "cust_advance"."c_inv_prefix" = "new_name"."c_prefix",
            "cust_advance"."n_inv_no" = "new_name"."n_srno"
            where "cust_advance"."c_prefix" = "old_name"."c_adv_prefix"
            and "cust_advance"."n_srno" = "old_name"."n_adv_no"
            and("cust_advance"."c_inv_prefix" = "old_name"."c_prefix")
            and("cust_advance"."n_inv_no" = "old_name"."n_srno")
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Advance note is already settlled. You cannot Save this Invoice. "
        //if both advance note are different then unsettled the old advance note
        end if
      else if "old_name"."c_adv_prefix" = 'MV' then
          update "mdadj_adv_mst"
            set "mdadj_adv_mst"."c_inv_recp_prefix" = null,
            "mdadj_adv_mst"."n_inv_recp_no" = 0
            where "mdadj_adv_mst"."c_prefix" = "old_name"."c_adv_prefix"
            and "mdadj_adv_mst"."n_srno" = "old_name"."n_adv_no"
            and "mdadj_adv_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
            and "mdadj_adv_mst"."n_inv_recp_no" = "old_name"."n_srno"
        else
          update "cust_advance" set "cust_advance"."c_inv_prefix" = null,
            "cust_advance"."n_inv_no" = 0
            where "cust_advance"."c_prefix" = "old_name"."c_adv_prefix"
            and "cust_advance"."n_srno" = "old_name"."n_adv_no"
            and("cust_advance"."c_inv_prefix" = "old_name"."c_prefix")
            and("cust_advance"."n_inv_no" = "old_name"."n_srno")
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Advance note updation error. You cannot Save this Invoice. "
        end if;
        //if both advance note are different then settled the new advance note
        if "new_name"."c_adv_prefix" = 'MV' then
          update "mdadj_adv_mst"
            set "mdadj_adv_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "mdadj_adv_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "mdadj_adv_mst"."c_prefix" = "new_name"."c_adv_prefix"
            and "mdadj_adv_mst"."n_srno" = "new_name"."n_adv_no"
            and "mdadj_adv_mst"."c_inv_recp_prefix" is null
            and "mdadj_adv_mst"."n_inv_recp_no" = 0
        else
          update "cust_advance" set "cust_advance"."c_inv_prefix" = "new_name"."c_prefix",
            "cust_advance"."n_inv_no" = "new_name"."n_srno"
            where "cust_advance"."c_prefix" = "new_name"."c_adv_prefix"
            and "cust_advance"."n_srno" = "new_name"."n_adv_no"
            and "cust_advance"."c_inv_prefix" is null
            and "cust_advance"."n_inv_no" = 0
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Advance note updation error. You cannot Save this Invoice. "
        end if end if end if end if;
  --//store track master updation
  if "old_name"."n_store_track" <> 2 and "new_name"."n_store_track" = 2 and "new_name"."n_approve" = 1 then
    select top 1 "c_code" into "c_phase" from "st_phase_mst" where "n_rack_flag" = 1;
    select top 1 "c_code" into "c_phase" from "st_phase_mst" where "n_rack_flag" = 1;
    insert into "st_track_mst"
      ( "c_br_code",
      "c_doc_no",
      "n_inout","c_phase_code","d_date",
      "c_user","c_system_name","c_system_ip","t_time_in","t_time_out",
      "n_complete","c_cust_code","c_order_id","n_urgent" ) values
      ( '000',
      '000/'+"string"("new_name"."c_year")+'/'+"string"("new_name"."c_prefix")+'/'+"string"("new_name"."n_srno"),
      0,"c_phase","new_name"."d_inv_date",
      "isNull"("new_name"."c_user",'3DS'),null,null,"new_name"."t_ltime",null,
      0,"new_name"."c_cust_code",null,"new_name"."n_urgent" ) 
  end if;
  if "new_name"."n_service_chg" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_service_act","new_name"."d_inv_date",
      -"new_name"."n_service_chg","new_cust_account_code" ) 
  end if;
  set @c_year_old = "old_name"."c_year";
  set @c_year_new = "new_name"."c_year";
  if @c_year_old is null then
    if "month"("old_name"."d_inv_date") <= 3 then
      set @c_year_old = "right"("string"("year"("old_name"."d_inv_date")-1),2)
    else
      set @c_year_old = "right"("string"("year"("old_name"."d_inv_date")),2)
    end if end if;
  if @c_year_new is null then
    if "month"("new_name"."d_inv_date") <= 3 then
      set @c_year_new = "right"("string"("year"("new_name"."d_inv_date")-1),2)
    else
      set @c_year_new = "right"("string"("year"("new_name"."d_inv_date")),2)
    end if end if;
  --if(old_name.n_total <> new_name.n_total) or(old_name.c_cust_code <> new_name.c_cust_code) or(new_name.n_counter_sale <> old_name.n_counter_sale) then
  delete from "settle_mst_header"
    where "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_year" = "old_name"."c_year";
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
    "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
    "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
    "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
    "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
    "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
    "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_inv_bal_amt","n_chq_return","n_doc_type",
    "n_charge_on","n_charge_per","n_gst_enabled","n_1st_sale","n_2nd_sale","n_st","n_cst","n_sub_sale","n_freight","n_tax_suffer","n_rst","n_cess","n_mrp_val","c_crnt_year","c_dbnt_year",
    "c_adv_year","c_repl_year","n_tcs_per","n_tcs_taxable_amt","n_tcs_amt","n_tcs_on_service","n_pob","n_tds_amt","n_cash_cr_cust" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."d_inv_date","new_name"."c_cust_code","new_name"."c_sman_code","new_name"."c_dman_code","new_name"."n_cr_days","new_name"."n_discount_per","new_name"."n_fix_discount","new_name"."n_other_charge","new_name"."n_total",
    "new_name"."n_counter_sale","new_name"."n_tot_sch_disc","new_name"."n_crnt_no","new_name"."c_crnt_prefix","new_name"."n_crnt_amt","new_name"."n_dbnt_no","new_name"."c_dbnt_prefix","new_name"."n_dbnt_amt","new_name"."n_adv_no","new_name"."c_adv_prefix","new_name"."n_adv_amt",
    "new_name"."n_crnt_repl_no","new_name"."c_crnt_repl_prefix","new_name"."n_crnt_repl_amt","new_name"."n_branch","new_name"."n_disc_amt","new_name"."n_rec_disc_on","new_name"."n_rec_disc_amt","new_name"."n_taxable_sale","new_name"."n_non_taxable_sale",
    "new_name"."c_credit_act","new_name"."n_prod_val","new_name"."n_ref_order_no","new_name"."n_order_no","new_name"."c_user","new_name"."c_ship_code","new_name"."c_ref_id","new_name"."c_ref_year","new_name"."n_ref_srno","new_name"."n_approve","new_name"."c_series_code","new_name"."c_mfac_code",
    "new_name"."n_excise_amnt","new_name"."c_conv_user","new_name"."c_sys_ip","new_name"."c_computer_name","new_name"."n_store_track","new_name"."n_vdc_srno","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no","new_name"."n_cgst_amt","new_name"."n_sgst_amt",
    "new_name"."n_igst_amt","new_name"."n_gst_cess_amt","new_name"."c_state_code","new_name"."c_eway_bill_no","new_name"."d_eway_date","new_name"."n_to_gst_type","new_name"."n_service_chg","new_name"."n_taxable_amt","new_name"."c_ordered_user","new_name"."c_store_code","new_name"."n_add_cess_amt",
    null,0,null,0,0,0,0,null,null,"new_name"."n_inv_bal_amt","new_name"."n_chq_return",1,"new_name"."n_charge_on","new_name"."n_charge_per","new_name"."n_gst_enabled",
    "new_name"."n_1st_sale","new_name"."n_2nd_sale","new_name"."n_st","new_name"."n_cst","new_name"."n_sub_sale","new_name"."n_freight",
    "new_name"."n_tax_suffer","new_name"."n_rst","new_name"."n_cess","new_name"."n_mrp_val","new_name"."c_crnt_year","new_name"."c_dbnt_year",
    "new_name"."c_adv_year","new_name"."c_repl_year","new_name"."n_tcs_per",
    "new_name"."n_tcs_taxable_amt","new_name"."n_tcs_amt","new_name"."n_tcs_on_service","new_name"."n_pob","new_name"."n_tds_amt","new_name"."n_cash_cr_cust" ) ;
  delete from "settle_mst"
    where "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_year" = "old_name"."c_year"
    and "c_prefix1" = "old_name"."c_prefix"
    and "n_srno1" = "old_name"."n_srno"
    and "c_year1" = "old_name"."c_year";
  select "isnull"("n_br_sale_bal",1) into @branch_sale from "system_Parameter";
  if @branch_sale is null then
    set @branch_sale = 1
  end if;
  set @insert_settle_mst = 1;
  if "isnull"("new_name"."n_counter_sale",0) = 0 then
    if "isnull"("new_name"."n_branch",0) = 1 and @branch_sale = 0 then
      set @insert_settle_mst = 0
    end if
  else set @insert_settle_mst = 0;
    if "new_name"."n_cash_cr_cust" = 1 then
      set @insert_settle_mst = 1
    end if end if;
  if @insert_settle_mst = 1 then
    set @invopen_bal_amnt = "isnull"("new_name"."n_inv_open_amnt",0);
    if @invopen_bal_amnt is null then
      set @invopen_bal_amnt = 0
    end if;
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( @c_year_new,
      "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."c_prefix","new_name"."n_srno",
      if @invopen_bal_amnt > 0 then @invopen_bal_amnt else "new_name"."n_total" endif,"new_name"."c_cust_code","new_name"."d_inv_date","new_name"."d_inv_date"+"new_name"."n_cr_days",1 ) 
  end if;
  ---end if;
  //deleting credit note and multi creditnote   
  if "old_name"."n_crnt_no" <> "new_name"."n_crnt_no" then
    if "old_name"."n_crnt_no" <> 0 then
      delete from
        "settle_mst"
        where "c_prefix" = "old_name"."c_prefix"
        and "n_srno" = "old_name"."n_srno"
        and "c_year" = "old_name"."c_year"
        and "c_prefix1" = "old_name"."c_crnt_prefix"
        and "n_srno1" = "old_name"."n_crnt_no"
        and "c_year1" = "old_name"."c_crnt_year"
    end if;
    if "new_name"."n_crnt_no" <> 0 then
      set @crnt_yr = "new_name"."c_crnt_year";
      insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
        "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
        "new_name"."c_prefix","new_name"."n_srno",@crnt_yr,"new_name"."c_crnt_prefix","new_name"."n_crnt_no",
        ("new_name"."n_crnt_amt"),"new_name"."c_cust_code","new_name"."d_inv_date","new_name"."d_inv_date"+"new_name"."n_cr_days",1 ) 
    end if end if;
  //credit note replacement  
  if "old_name"."n_crnt_repl_no" <> "new_name"."n_crnt_repl_no" then
    if "old_name"."n_crnt_repl_no" <> 0 then
      delete from
        "settle_mst"
        where "c_prefix" = "old_name"."c_prefix"
        and "n_srno" = "old_name"."n_srno"
        and "c_year" = "old_name"."c_year"
        and "c_prefix1" = "old_name"."c_crnt_repl_prefix"
        and "n_srno1" = "old_name"."n_crnt_repl_no"
        and "c_year1" = "old_name"."c_repl_year"
    end if;
    if "new_name"."n_crnt_repl_no" <> 0 then
      set @repl_yr = "new_name"."c_repl_year";
      insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
        "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
        "new_name"."c_prefix","new_name"."n_srno",@repl_yr,"new_name"."c_crnt_repl_prefix","new_name"."n_crnt_repl_no",
        ("new_name"."n_crnt_repl_amt"),"new_name"."c_cust_code","new_name"."d_inv_date","new_name"."d_inv_date"+"new_name"."n_cr_days",1 ) 
    end if end if;
  //debit note and multi debit note
  if "old_name"."n_dbnt_no" <> "new_name"."n_dbnt_no" then
    if "old_name"."n_dbnt_no" <> 0 then
      delete from
        "settle_mst"
        where "c_prefix" = "old_name"."c_prefix"
        and "n_srno" = "old_name"."n_srno"
        and "c_year" = "old_name"."c_year"
        and "c_prefix1" = "old_name"."c_dbnt_prefix"
        and "n_srno1" = "old_name"."n_dbnt_no"
        and "c_year1" = "old_name"."c_dbnt_year"
    end if;
    if "new_name"."n_dbnt_no" <> 0 then
      set @dbnt_yr = "new_name"."c_dbnt_year";
      insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
        "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
        "new_name"."c_prefix","new_name"."n_srno",@dbnt_yr,"new_name"."c_dbnt_prefix","new_name"."n_dbnt_no",
        -1*("new_name"."n_dbnt_amt"),"new_name"."c_cust_code","new_name"."d_inv_date","new_name"."d_inv_date"+"new_name"."n_cr_days",1 ) 
    end if end if;
  //advance note and multi advance note
  if "old_name"."n_adv_no" <> "new_name"."n_adv_no" then
    if "old_name"."n_adv_no" <> 0 then
      delete from
        "settle_mst"
        where "c_prefix" = "old_name"."c_prefix"
        and "n_srno" = "old_name"."n_srno"
        and "c_year" = "old_name"."c_year"
        and "c_prefix1" = "old_name"."c_adv_prefix"
        and "n_srno1" = "old_name"."n_adv_no"
        and "c_year1" = "old_name"."c_adv_year"
    end if;
    if "new_name"."n_adv_no" <> 0 then
      set @adv_year = "new_name"."c_adv_year";
      insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
        "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
        "new_name"."c_prefix","new_name"."n_srno",@adv_year,"new_name"."c_adv_prefix","new_name"."n_adv_no",
        ("new_name"."n_adv_amt"),"new_name"."c_cust_code","new_name"."d_inv_date","new_name"."d_inv_date"+"new_name"."n_cr_days",1 ) 
    end if end if;
  if "new_name"."n_total" <> "old_name"."n_total" then
    update "sale_till_date" set "n_value" = "n_value"-"old_name"."n_total" where "c_code" = "old_name"."c_cust_code";
    update "sale_till_date" set "n_value" = "n_value"+"new_name"."n_total" where "c_code" = "new_name"."c_cust_code";
    update "gstin_wise_sale_total" set "n_value" = "n_value"-"old_name"."n_total" where "c_code" = "old_name"."c_to_gst_no";
    update "gstin_wise_sale_total" set "n_value" = "n_value"+"new_name"."n_total" where "c_code" = "new_name"."c_to_gst_no";
    delete from "inv_track" where "n_inv_no" = "new_name"."n_srno"
  end if;
  if "new_name"."c_cust_code" <> "old_name"."c_cust_code" then
    delete from "inv_track" where "n_inv_no" = "new_name"."n_srno"
  end if
end;
CREATE TRIGGER "update_ledger_from_jv_detail" after update order 2 on
"DBA"."jv_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "ad_date" date;
  declare "ac_prefix" char(2);
  declare "s_yr" char(2);
  declare "n_supp" decimal(1);
  declare @act_type numeric(1);
  set @act_type = 0;
  select "isnull"("n_supplier",0)+"isnull"("n_customer",0),
    if "isnull"("n_customer",0) = 1 then 1 else 0 endif
    into "n_supp",@act_type
    from "act_mst" where "c_code" = "new_name"."c_act_code";
  select "right"("DB_NAME"(0),2) into "s_yr" from "DUMMY";
  if "s_yr" is null then
    set "s_yr" = '00'
  end if;
  select "prefix_sr_numbers"."c_prefix" into "ac_prefix" from "prefix_sr_numbers"
    where "prefix_sr_numbers"."c_trans" = 'JV';
  delete from "ledger" where "ledger"."c_prefix" = "ac_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_act_code";
  delete from "settle_mst"
    where "settle_mst"."c_year" = "s_yr"
    and "settle_mst"."c_prefix" = "ac_prefix"
    and "settle_mst"."n_srno" = "old_name"."n_srno"
    and "settle_mst"."c_year1" = "s_yr"
    and "settle_mst"."c_prefix1" = "ac_prefix"
    and "settle_mst"."n_srno1" = "old_name"."n_srno"
    and "settle_mst"."c_cust_code" = "old_name"."c_act_code";
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "ac_prefix","new_name"."n_srno","new_name"."c_act_code","new_name"."d_jv_date","new_name"."n_debit"-"new_name"."n_credit","new_name"."c_opp_act_code" ) ;
  if "n_supp" > 0 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","d_date","c_cust_code","d_due_date","n_act_type" ) values
      ( "s_yr","ac_prefix","new_name"."n_srno","s_yr","ac_prefix","new_name"."n_srno",
      "new_name"."n_debit"-"new_name"."n_credit","new_name"."d_jv_date","new_name"."c_act_code","new_name"."d_jv_date",@act_type ) 
  /*  update ledger set ledger.c_act_code=new_name.c_act_code,
ledger.d_date=new_name.d_jv_date,ledger.n_amount=new_name.n_debit-new_name.n_credit,ledger.c_opp_act_code=new_name.c_opp_act_code
where ledger.c_prefix=ac_prefix and ledger.n_tran_no=old_name.n_srno
and ledger.c_act_code=old_name.c_act_code 
*/
  end if
end;
CREATE TRIGGER "update_ledger_from_payment" after update order 1 on
-----------------------
--------------------------------------------------------------------------------
------------update
------------------------payment update
----------payment update
----------payment update
----------payment update
-----------------------payment update
"DBA"."payment"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "s_credit_act_code" char(6);
  declare "n_supp","n_cust" decimal(1);
  select "n_supplier"+"n_customer","isnull"("n_customer",0) into "n_supp","n_cust" from "act_mst" where "c_code" = "new_name"."c_act_code";
  if "left"("new_name"."c_credit_act_code",4) = 'CASH' then
    set "s_credit_act_code" = "new_name"."c_credit_act_code"
  else
    set "s_credit_act_code" = 'RCPAYM'
  end if;
  delete from "settle_mst_header"
    where "settle_mst_header"."c_year" = "old_name"."c_year"
    and "settle_mst_header"."c_prefix" = "old_name"."c_prefix"
    and "settle_mst_header"."n_srno" = "old_name"."n_srno";
  delete from "settle_mst"
    where "settle_mst"."c_year" = "old_name"."c_year"
    and "settle_mst"."c_prefix" = "old_name"."c_prefix"
    and "settle_mst"."n_srno" = "old_name"."n_srno"
    and "settle_mst"."c_year1" = "old_name"."c_year"
    and "settle_mst"."c_prefix1" = "old_name"."c_prefix"
    and "settle_mst"."n_srno1" = "old_name"."n_srno";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
    and "ledger"."n_tran_no" = "old_name"."n_srno";
  ------jagamohan GST
  delete from "gst_ledger_mst"
    where "gst_ledger_mst"."n_srno" = "old_name"."n_srno";
  delete from "gst_ledger_mst"
    where "gst_ledger_mst"."n_srno" = -1*"old_name"."n_srno";
  if "old_name"."n_taxable_amt" > 0 and "new_name"."n_taxable_amt" = 0 then
    delete from "gst_ledger_det"
      where "gst_ledger_det"."n_srno" = "old_name"."n_srno"
  end if;
  ----------------
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix"
    and "remarks"."n_tran_id" = "old_name"."n_srno";
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_act_code","new_name"."d_pay_date",
    "new_name"."n_total"
    -if "new_name"."n_to_gst_type" = 0 then "isnull"("new_name"."n_sgst_amt"+"new_name"."n_cgst_amt"+"new_name"."n_igst_amt"+"new_name"."n_cess_amt",0) else 0 endif
    +if "new_name"."n_to_gst_type" = 5 then "isnull"("new_name"."n_sgst_amt"+"new_name"."n_cgst_amt"+"new_name"."n_igst_amt"+"new_name"."n_cess_amt",0) else 0 endif,
    if "new_name"."d_reconcile_date" is not null and "new_name"."n_return" = 0 then "new_name"."c_credit_act_code" else "s_credit_act_code" endif ) ;
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","s_credit_act_code","new_name"."d_pay_date",
    -("new_name"."n_total"-"isnull"("new_name"."n_tds_amt",0)),"new_name"."c_act_code" ) ;
  if "new_name"."n_adavance" = 1 and "new_name"."n_tds_amt" > 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tds_act_code","new_name"."d_pay_date",
      -"new_name"."n_tds_amt","new_name"."c_act_code" ) 
  end if;
  if "new_name"."d_reconcile_date" is not null then
    if "new_name"."n_return" = 1 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_act_code","new_name"."d_reconcile_date",
        -"new_name"."n_total","s_credit_act_code" ) ;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","s_credit_act_code","new_name"."d_reconcile_date",
        ("new_name"."n_total"-"isnull"("new_name"."n_tds_amt",0)),"new_name"."c_act_code" ) ;
      if "new_name"."n_adavance" = 1 and "new_name"."n_tds_amt" > 0 then
        insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
          ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tds_act_code","new_name"."d_pay_date",
          "new_name"."n_tds_amt","s_credit_act_code" ) 
      end if
    else insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_credit_act_code","new_name"."d_reconcile_date",
        -("new_name"."n_total"-"isnull"("new_name"."n_tds_amt",0)),"new_name"."c_act_code" ) ;
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","s_credit_act_code","new_name"."d_reconcile_date",
        "new_name"."n_total"-"isnull"("new_name"."n_tds_amt",0),"new_name"."c_credit_act_code" ) 
    end if end if;
  //header
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_credit_act","c_user","n_doc_type","n_total","n_crnt_amt","c_ref_id","d_eway_date","d_ref_date" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."d_pay_date","new_name"."c_act_code","new_name"."c_credit_act_code","new_name"."c_user",12,"new_name"."n_total",
    "new_name"."n_bill_total","new_name"."c_chq_no","new_name"."d_chq_dt","new_name"."d_reconcile_date" ) ;
  //
  if "new_name"."n_bill_total"-("new_name"."n_total"*(if "new_name"."n_return" = 1 then 0 else 1 endif)) <> 0 and "n_supp" >= 1 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","d_date","c_cust_code","d_due_date","n_act_type" ) values
      ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
      (-1)*("new_name"."n_bill_total"-("new_name"."n_total"*(if "new_name"."n_return" = 1 then 0 else 1 endif))),"new_name"."d_pay_date","new_name"."c_act_code",
      if "new_name"."d_chq_dt" is null then "new_name"."d_pay_date" else "new_name"."d_chq_dt" endif,"n_cust" ) 
  end if;
  if "new_name"."n_total" <> 0 then
    ------------jagamohan GST
    if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_cess_amt"+"new_name"."n_sgst_amt"+"new_name"."n_cgst_amt"+"new_name"."n_igst_amt" <> 0 then
      insert into "gst_ledger_mst"( "n_srno","n_pk","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note",
        "n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
        "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","d_ref_date" ) values
        ( "new_name"."n_srno",0,if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 3) then
          "DATE"("STRING"("YEAR"("DATEADD"("month",1,"isnull"("new_name"."d_pay_date","new_name"."d_ref_date"))))+'-'+"RIGHT"('0'+"STRING"("MONTH"("DATEADD"("month",1,"isnull"("new_name"."d_pay_date","new_name"."d_ref_date")))),2)+'-'+'01')
        else
          "isnull"("new_name"."d_pay_date","new_name"."d_ref_date")
        endif,"new_name"."c_act_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
        "isnull"("new_name"."c_ref_no","new_name"."c_chq_no"),"new_name"."c_remark",if "new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 3 then 1 else 0 endif,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_cess_amt",
        0,"new_name"."n_discount","new_name"."n_taxable_amt","new_name"."n_total","new_name"."d_ldate","new_name"."t_ltime","new_name"."c_luser","new_name"."c_state_code","new_name"."n_service_chg","new_name"."n_flag",0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."d_ref_date" ) 
    end if;
    if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 3) then
      insert into "gst_ledger_mst"( "n_srno","n_pk","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note",
        "n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
        "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","d_ref_date" ) values
        ( -1*"new_name"."n_srno",0,"isnull"("new_name"."d_pay_date","new_name"."d_ref_date"),
        "new_name"."c_act_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
        "isnull"("new_name"."c_ref_no","new_name"."c_chq_no"),"new_name"."c_remark",1,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_cess_amt",
        0,"new_name"."n_discount","new_name"."n_taxable_amt","new_name"."n_total","new_name"."d_ldate","new_name"."t_ltime","new_name"."c_luser","new_name"."c_state_code","new_name"."n_service_chg",0,0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."d_ref_date" ) 
    end if;
    if "new_name"."n_from_gst_type" = 0 and "new_name"."n_sgst_amt" <> 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 5) then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
        "n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_act_code","new_name"."d_pay_date",
        -1*"new_name"."n_sgst_amt","new_name"."c_act_code" ) 
    end if;
    if "new_name"."n_from_gst_type" = 0 and "new_name"."n_cgst_amt" <> 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 5) then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
        "n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_act_code","new_name"."d_pay_date",
        -1*"new_name"."n_cgst_amt","new_name"."c_act_code" ) 
    end if;
    if "new_name"."n_from_gst_type" = 0 and "new_name"."n_igst_amt" <> 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 3 or "new_name"."n_to_gst_type" = 5) then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
        "n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_act_code","new_name"."d_pay_date",
        -1*"new_name"."n_igst_amt","new_name"."c_act_code" ) 
    end if;
    if "new_name"."n_from_gst_type" = 0 and "new_name"."n_cess_amt" <> 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 5) then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
        "n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cess_act_code","new_name"."d_pay_date",
        -1*"new_name"."n_cess_amt","new_name"."c_act_code" ) 
    end if;
    if "new_name"."n_from_gst_type" = 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 0) and "new_name"."n_sgst_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
        "n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_rev_act_code","new_name"."d_pay_date",
        "new_name"."n_sgst_amt","new_name"."c_act_code" ) 
    end if;
    if "new_name"."n_from_gst_type" = 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 0) and "new_name"."n_cgst_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
        "n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_rev_act_code","new_name"."d_pay_date",
        "new_name"."n_cgst_amt","new_name"."c_act_code" ) 
    end if;
    if "new_name"."n_from_gst_type" = 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 0 or "new_name"."n_to_gst_type" = 3) and "new_name"."n_igst_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
        "n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_rev_act_code","new_name"."d_pay_date",
        "new_name"."n_igst_amt","new_name"."c_act_code" ) 
    end if;
    if "new_name"."n_from_gst_type" = 0 and("new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 0) and "new_name"."n_cess_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date",
        "n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cess_rev_act_code","new_name"."d_pay_date",
        "new_name"."n_cess_amt","new_name"."c_act_code" ) 
    end if end if;
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_chq_no","new_name"."d_chq_dt",if "new_name"."d_reconcile_date" is not null and "new_name"."n_return" = 1 then ': CHEQUE RETURNED : ' endif
    +"isNUll"("new_name"."c_remark",'') ) 
end;
CREATE TRIGGER "update_ledger_from_purchase_detail" before update order 1 on
-------------------------------
-------------------------------
----------------------------------Purchase det
------Purchase Trigger
"DBA"."Purchase_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "d_def_date" date;
  declare "c_prefix_temp" char(2);
  declare "n_post_temp" decimal(1);
  declare "d_excise_per_qty" decimal(10,2);
  declare "d_margin_wholesaler" decimal(6,2);
  declare "d_margin_retailer" decimal(6,2);
  declare "d_st_rate" decimal(6,2);
  declare "d_cst_rate" decimal(6,2);
  declare "n_tmp_bal_qty","n_tmp_bal_qty_supp" decimal;
  declare "d_new_godown_qty","d_old_godown_qty" decimal(8);
  declare "n_tmp_sch_bal_qty","n_tmp_sch_bal_qty_old" decimal;
  declare "c_tran_year" char(2);
  declare "c_tran_prefix" char(2);
  declare "n_consider_excise_from",@tran_type decimal(1);
  declare "c_rak","s_supp" char(6);
  declare "rack_grp_code" char(10);
  declare @pk numeric(16);
  declare @brcode char(6);
  declare @year char(2);
  declare "cprefix" char(2);
  declare "d_gate_pass_no" numeric(18);
  set "cprefix" = "uf_get_pk_component"("new_name"."n_srno",3);
  set "c_tran_year" = "uf_get_pk_component"("new_name"."n_srno",1);
  set "c_tran_prefix" = "cprefix";
  set @tran_type = 1;
  if "cprefix" = 'PR' then
    set @tran_type = -1
  end if;
  select "right"("db_name"(),2) into @year;
  if "old_name"."n_post"+"new_name"."n_post" = 0 then
    return
  end if;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  --  if len(string(new_name.n_srno)) < 8 then
  --    set @pk = uf_pk(@brcode,@year,'P',new_name.n_srno,0,'')
  --  else
  set @pk = "new_name"."n_srno";
  --  end if;
  delete from "stock_ledger"
    where "n_srno" = "old_name"."n_srno"
    and "n_seq" = "old_name"."n_seq"
    and "c_item_code" = "old_name"."c_item_code"
    and "c_batch_no" = "old_name"."c_batch_no";
  insert into "stock_ledger"
    ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
    "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_gst_code","n_service_qty","n_scheme_disc","n_product_value",
    "n_taxable_amt","n_ref_no","d_ref_date","n_service_chg","c_prefix","d_manufacture_date" ) values
    ( @pk,"new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_purchase_date",
    "new_name"."n_qty","new_name"."n_scheme_qty",0,"isnull"("new_name"."n_effective_purchase_rate","isnull"("new_name"."n_purchase_rate",0)),"new_name"."n_disc_amt"+"new_name"."n_cash_discount",0,0,
    "new_name"."n_cgst_per","new_name"."n_cgst_amt","new_name"."n_sgst_per","new_name"."n_sgst_amt","new_name"."n_igst_per","new_name"."n_igst_amt","new_name"."n_gst_cess_per","new_name"."n_gst_cess_amt",
    "new_name"."c_hsn_sac_code","new_name"."c_gst_code","new_name"."n_service_qty","new_name"."n_scheme_disc","new_name"."n_product_value","new_name"."n_taxable_amt","new_name"."n_ref_no","new_name"."d_ref_date",
    "new_name"."n_service_chg","cprefix","new_name"."d_manufacture_date" ) ;
  insert into "item_rate"( "c_item_code","n_rate_type","n_rate","t_time","n_ref_srno" ) on existing update defaults off values
    ( "new_name"."c_item_code",0,"new_name"."n_sale_rate","now"(),"new_name"."n_srno" ) ;
  if "new_name"."n_pur_godown_flag" = 1 then
    set "d_new_godown_qty" = "new_name"."n_qty"+"new_name"."n_scheme_qty";
    set "d_old_godown_qty" = "old_name"."n_qty"+"old_name"."n_scheme_qty"
  else
    set "d_new_godown_qty" = 0;
    set "d_old_godown_qty" = 0
  end if;
  if "new_name"."n_effective_purchase_rate" = 0 or "new_name"."n_sale_rate" = 0 then
    set "d_margin_wholesaler" = 0
  else
    set "d_margin_wholesaler" = (("new_name"."n_sale_rate"-"new_name"."n_effective_purchase_rate")/"new_name"."n_sale_rate")*100
  end if;
  if "new_name"."n_repl" = 1 then
    set "n_tmp_sch_bal_qty" = 0;
    set "n_tmp_sch_bal_qty_old" = 0
  else
    set "n_tmp_sch_bal_qty" = "new_name"."n_scheme_qty";
    set "n_tmp_sch_bal_qty_old" = "old_name"."n_scheme_qty"
  end if;
  if "new_name"."n_vat_mrp" = 0 or "new_name"."n_sale_rate" = 0 then
    set "d_margin_retailer" = 0
  else
    set "d_margin_retailer" = (("new_name"."n_vat_mrp"-"new_name"."n_sale_rate")/"new_name"."n_vat_mrp")*100
  end if;
  if "new_name"."n_exice_amt" <> 0 and "new_name"."n_qty" <> 0 then
    set "d_excise_per_qty" = "new_name"."n_exice_amt"/"new_name"."n_qty"
  else
    set "d_excise_per_qty" = 0
  end if;
  if "new_name"."n_inter_state" = 1 then
    select "n_st_rate" into "d_st_rate" from "item_mst" where "item_mst"."c_code" = "new_name"."c_item_code"
  else
    if "new_name"."n_branch" = 1 then
      set "d_st_rate" = "new_name"."n_br_st_per"
    else
      set "d_st_rate" = "new_name"."n_st"
    end if end if;
  if "new_name"."n_inter_state" = 1 then
    set "d_cst_rate" = 0
  else
    if "new_name"."n_branch" = 1 then
      set "d_cst_rate" = "new_name"."n_br_cst_per"
    else
      set "d_cst_rate" = "new_name"."n_cst"
    end if end if;
  /*  select c_prefix into c_prefix_temp from prefix_sr_numbers where c_trans='PURCH';
select n_post into n_post_temp from purchase_mst
where purchase_mst.c_prefix=c_prefix_temp
and purchase_mst.n_srno=new_name.n_srno;
if n_post_temp<>1 then
return
end if
; */
  select "n_balance_qty" into "n_tmp_bal_qty" from "stock" where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
  if sqlcode = 0 then
    if "n_tmp_bal_qty" <> 0 then
      if "old_name"."n_post" = 1 and @tran_type = -1 then
        update "stock" set "stock"."n_purchase_qty" = "stock"."n_purchase_qty"-"old_name"."n_qty",
          "stock"."n_scheme_purchase_qty" = "stock"."n_scheme_purchase_qty"-"old_name"."n_scheme_qty",
          "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty"-"old_name"."n_scheme_qty",
          "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"n_tmp_sch_bal_qty_old",
          "stock"."n_godown_qty" = "stock"."n_godown_qty"-"d_old_godown_qty",
          "stock"."n_hold_qty" = "stock"."n_hold_qty"-"old_name"."n_hold_qty",
          "stock"."n_repl_qty" = "isnull"("stock"."n_repl_qty",0)-if "new_name"."n_repl" = 1 then "old_name"."n_scheme_qty" else 0 endif
          where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no"
      end if;
      update "stock" set "stock"."n_purchase_qty" = "stock"."n_purchase_qty"+"new_name"."n_qty",
        "stock"."n_scheme_purchase_qty" = "stock"."n_scheme_purchase_qty"+"new_name"."n_scheme_qty",
        "stock"."n_purchase_rate" = "new_name"."n_purchase_rate",
        "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty",
        "stock"."n_sale_rate" = "new_name"."n_sale_rate","stock"."n_mrp" = "new_name"."n_mrp",
        "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"n_tmp_sch_bal_qty",
        "stock"."n_effective_purchase_rate" = "new_name"."n_effective_purchase_rate",
        "stock"."n_ptr" = "new_name"."n_ptr",
        "stock"."n_ptr_1" = "new_name"."n_ptr_1",
        "stock"."c_mfac_sh_name" = "new_name"."c_mfac_sh_name",
        "stock"."n_lock" = "new_name"."n_lock",
        "stock"."n_incl" = "new_name"."n_incl",
        "stock"."n_godown_qty" = "stock"."n_godown_qty"+"d_new_godown_qty",
        "stock"."d_last_pur_date" = "new_name"."d_purchase_date",
        "stock"."n_st_rate" = "d_st_rate",
        "stock"."n_hold_qty" = "stock"."n_hold_qty"+"new_name"."n_hold_qty",
        "stock"."c_hold_remark" = "isnull"("new_name"."c_hold_remark","stock"."c_hold_remark"),
        "stock"."n_cst_rate" = "d_cst_rate",
        "stock"."t_ltime" = "now"(),
        "stock"."c_ref_year" = "c_tran_year",
        "stock"."c_ref_prefix" = "c_tran_prefix",
        "stock"."n_ref_srno" = "new_name"."n_srno",
        "stock"."n_repl_qty" = "isnull"("stock"."n_repl_qty",0)+if "new_name"."n_repl" = 1 then "new_name"."n_scheme_qty" else 0 endif,
        "stock"."n_retail_disc" = "new_name"."n_retail_disc"
        where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
      if "old_name"."n_post" = 1 and @tran_type = 1 then
        update "stock" set "stock"."n_purchase_qty" = "stock"."n_purchase_qty"-"old_name"."n_qty",
          "stock"."n_scheme_purchase_qty" = "stock"."n_scheme_purchase_qty"-"old_name"."n_scheme_qty",
          "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty"-"old_name"."n_scheme_qty",
          "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"n_tmp_sch_bal_qty_old",
          "stock"."n_godown_qty" = "stock"."n_godown_qty"-"d_old_godown_qty",
          "stock"."n_hold_qty" = "stock"."n_hold_qty"-"old_name"."n_hold_qty",
          "stock"."n_repl_qty" = "isnull"("stock"."n_repl_qty",0)-if "new_name"."n_repl" = 1 then "old_name"."n_scheme_qty" else 0 endif
          where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no"
      end if
    else set "d_def_date" = "uf_default_date"();
      if "old_name"."n_post" = 1 and @tran_type = -1 then
        update "stock" set "stock"."n_purchase_qty" = "stock"."n_purchase_qty"-"old_name"."n_qty",
          "stock"."n_scheme_purchase_qty" = "stock"."n_scheme_purchase_qty"-"old_name"."n_scheme_qty",
          "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty"-"old_name"."n_scheme_qty",
          "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"n_tmp_sch_bal_qty_old",
          "stock"."n_godown_qty" = "stock"."n_godown_qty"-"d_old_godown_qty",
          "stock"."n_hold_qty" = "stock"."n_hold_qty"-"old_name"."n_hold_qty",
          "stock"."n_repl_qty" = "isnull"("stock"."n_repl_qty",0)-if "new_name"."n_repl" = 1 then "old_name"."n_scheme_qty" else 0 endif
          where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no"
      end if;
      update "stock" set "stock"."n_purchase_qty" = "stock"."n_purchase_qty"+"new_name"."n_qty",
        "stock"."n_scheme_purchase_qty" = "stock"."n_scheme_purchase_qty"+"new_name"."n_scheme_qty",
        "stock"."n_purchase_rate" = "new_name"."n_purchase_rate",
        "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty",
        "stock"."n_sale_rate" = "new_name"."n_sale_rate",
        "stock"."n_mrp" = "new_name"."n_mrp",
        "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"n_tmp_sch_bal_qty",
        "stock"."n_effective_purchase_rate" = "new_name"."n_effective_purchase_rate",
        "stock"."n_ptr" = "new_name"."n_ptr",
        "stock"."n_ptr_1" = "new_name"."n_ptr_1",
        "stock"."c_mfac_sh_name" = "new_name"."c_mfac_sh_name",
        "stock"."n_lock" = "new_name"."n_lock",
        "stock"."d_date" = "d_def_date",
        "stock"."n_incl" = "new_name"."n_incl",
        "stock"."n_godown_qty" = "stock"."n_godown_qty"+"d_new_godown_qty",
        "stock"."d_last_pur_date" = "new_name"."d_purchase_date",
        "stock"."n_st_rate" = "d_st_rate",
        "stock"."n_hold_qty" = "stock"."n_hold_qty"+"new_name"."n_hold_qty",
        "stock"."c_hold_remark" = "isnull"("new_name"."c_hold_remark","stock"."c_hold_remark"),
        "stock"."n_cst_rate" = "d_cst_rate",
        "stock"."t_ltime" = "now"(),
        "stock"."c_ref_year" = "c_tran_year",
        "stock"."c_ref_prefix" = "c_tran_prefix",
        "stock"."n_ref_srno" = "new_name"."n_srno",
        "stock"."n_repl_qty" = "isnull"("stock"."n_repl_qty",0)+if "new_name"."n_repl" = 1 then "new_name"."n_scheme_qty" else 0 endif,
        "stock"."n_retail_disc" = "new_name"."n_retail_disc"
        where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
      if "old_name"."n_post" = 1 and @tran_type = 1 then
        update "stock" set "stock"."n_purchase_qty" = "stock"."n_purchase_qty"-"old_name"."n_qty",
          "stock"."n_scheme_purchase_qty" = "stock"."n_scheme_purchase_qty"-"old_name"."n_scheme_qty",
          "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty"-"old_name"."n_scheme_qty",
          "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"n_tmp_sch_bal_qty_old",
          "stock"."n_godown_qty" = "stock"."n_godown_qty"-"d_old_godown_qty",
          "stock"."n_hold_qty" = "stock"."n_hold_qty"-"old_name"."n_hold_qty",
          "stock"."n_repl_qty" = "isnull"("stock"."n_repl_qty",0)-if "new_name"."n_repl" = 1 then "old_name"."n_scheme_qty" else 0 endif
          where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no"
      end if end if;
    if sqlstate = '02000' then
      raiserror 18000 "Error, Cannot update item in stock table. Please restart the system."
    end if
  else set "d_def_date" = "uf_default_date"();
    insert into "stock"
      ( "c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty",
      "n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty","n_mrp","n_purchase_rate",
      "n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate",
      "d_date","n_ptr","c_mfac_sh_name","n_incl","c_prn_batch","n_godown_qty","d_last_pur_date","n_st_rate","n_hold_qty",
      "c_hold_remark","n_cst_rate","c_ref_year","c_ref_prefix","n_ref_srno","n_contolled_product","n_tax_on_sch_qty","n_excise","n_repl_qty","d_manufacture_date","n_ptr_1","n_retail_disc" ) values
      ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_expiry_date",0,"new_name"."n_qty","new_name"."n_scheme_qty",
      0,0,0,0,0,"new_name"."n_qty"+"new_name"."n_scheme_qty","new_name"."n_mrp","new_name"."n_purchase_rate","new_name"."n_sale_rate",0,
      "new_name"."n_lock",0,"n_tmp_sch_bal_qty","new_name"."n_effective_purchase_rate","d_def_date","new_name"."n_ptr","new_name"."c_mfac_sh_name",
      "new_name"."n_incl","new_name"."c_prn_batch","d_new_godown_qty","new_name"."d_purchase_date","d_st_rate","new_name"."n_hold_qty","new_name"."c_hold_remark",
      "d_cst_rate","c_tran_year","c_tran_prefix","new_name"."n_srno","new_name"."n_contolled_product","new_name"."n_tax_on_sch_qty","new_name"."n_excise",
      if "new_name"."n_repl" = 1 then "new_name"."n_scheme_qty" else 0 endif,"new_name"."d_manufacture_date","new_name"."n_ptr_1","new_name"."n_retail_disc" ) ;
    if sqlstate = '02000' then
      raiserror 18000 "Error, Cannot add item in stock table. Please restart the system."
    end if end if;
  select "n_excise_from"
    into "n_consider_excise_from" from "system_parameter";
  if "n_consider_excise_from" = 0 then
    update "item_mst" set "n_margin_wholesaler" = "d_margin_wholesaler",
      "n_margin_retailer" = "d_margin_retailer","n_excise" = "d_excise_per_qty",
      "d_launch_date" = "isnull"("d_launch_date","new_name"."d_purchase_date") where "item_mst"."c_code" = "new_name"."c_item_code"
  else
    update "item_mst" set "n_margin_wholesaler" = "d_margin_wholesaler",
      "n_margin_retailer" = "d_margin_retailer",
      "d_launch_date" = "isnull"("d_launch_date","new_name"."d_purchase_date") where "item_mst"."c_code" = "new_name"."c_item_code"
  end if;
  update "item_out_of_stock" set "d_recd_date" = "new_name"."d_purchase_date","d_ldate" = "now"() where "item_out_of_stock"."d_recd_date" is null;
  if "new_name"."n_pur_tmp_no" > 0 and "new_name"."n_pur_tmp_seq" > 0 then
    update "purchase_tmp_det"
      set "purchase_tmp_det"."n_pur_no" = "new_name"."n_srno","purchase_tmp_det"."n_pur_seq" = "new_name"."n_seq"
      where "purchase_tmp_det"."n_srno" = "new_name"."n_pur_tmp_no"
      and "purchase_tmp_det"."c_item_code" = "new_name"."c_item_code"
      and "purchase_tmp_det"."c_batch_no" = "new_name"."c_batch_no"
      and "purchase_tmp_det"."n_seq" = "new_name"."n_pur_tmp_seq"
  end if;
  if "new_name"."c_order_year" is not null and "new_name"."n_order_no" > 0 and "new_name"."n_seq" > 0 and "new_name"."n_order_slab_no" > 0 then
    if "new_name"."n_order_slab_no" = 1 then
      update "order_ledger"
        set "n_receipt_o1" = "n_receipt_o1"+"new_name"."n_qty"
        where "order_ledger"."c_year" = "new_name"."c_order_year"
        and "order_ledger"."n_srno" = "new_name"."n_order_no"
        and "order_ledger"."n_seq" = "new_name"."n_order_seq";
      if "old_name"."n_post" = 1 then
        update "order_ledger"
          set "n_receipt_o1" = "n_receipt_o1"-"old_name"."n_qty"
          where "order_ledger"."c_year" = "old_name"."c_order_year"
          and "order_ledger"."n_srno" = "old_name"."n_order_no"
          and "order_ledger"."n_seq" = "old_name"."n_order_seq"
      end if end if;
    if "new_name"."n_order_slab_no" = 2 then
      update "order_ledger"
        set "n_receipt_o2" = "n_receipt_o2"+"new_name"."n_qty"
        where "order_ledger"."c_year" = "new_name"."c_order_year"
        and "order_ledger"."n_srno" = "new_name"."n_order_no"
        and "order_ledger"."n_seq" = "new_name"."n_order_seq";
      if "old_name"."n_post" = 1 then
        update "order_ledger"
          set "n_receipt_o2" = "n_receipt_o2"-"old_name"."n_qty"
          where "order_ledger"."c_year" = "old_name"."c_order_year"
          and "order_ledger"."n_srno" = "old_name"."n_order_no"
          and "order_ledger"."n_seq" = "old_name"."n_order_seq"
      end if end if;
    if "new_name"."n_order_slab_no" = 3 then
      update "order_ledger"
        set "n_receipt_o3" = "n_receipt_o3"+"new_name"."n_qty"
        where "order_ledger"."c_year" = "new_name"."c_order_year"
        and "order_ledger"."n_srno" = "new_name"."n_order_no"
        and "order_ledger"."n_seq" = "new_name"."n_order_seq";
      if "old_name"."n_post" = 1 then
        update "order_ledger"
          set "n_receipt_o3" = "n_receipt_o3"-"old_name"."n_qty"
          where "order_ledger"."c_year" = "old_name"."c_order_year"
          and "order_ledger"."n_srno" = "old_name"."n_order_no"
          and "order_ledger"."n_seq" = "old_name"."n_order_seq"
      end if end if;
    if "new_name"."n_order_slab_no" = 4 then
      update "order_ledger"
        set "n_receipt_o4" = "n_receipt_o4"+"new_name"."n_qty"
        where "order_ledger"."c_year" = "new_name"."c_order_year"
        and "order_ledger"."n_srno" = "new_name"."n_order_no"
        and "order_ledger"."n_seq" = "new_name"."n_order_seq";
      if "old_name"."n_post" = 1 then
        update "order_ledger"
          set "n_receipt_o4" = "n_receipt_o4"-"old_name"."n_qty"
          where "order_ledger"."c_year" = "old_name"."c_order_year"
          and "order_ledger"."n_srno" = "old_name"."n_order_no"
          and "order_ledger"."n_seq" = "old_name"."n_order_seq"
      end if end if end if;
  if "new_name"."n_scheme_qty" <> 0 then
    delete from "scheme_ledger_det"
      where "c_prefix" = 'P'
      and "c_year" = "c_tran_year"
      and "n_srno" = "old_name"."n_srno"
      and "c_item_code" = "old_name"."c_item_code"
      and "c_batch_no" = "old_name"."c_batch_no"
      and "n_seq" = "old_name"."n_seq";
    insert into "scheme_ledger_det"
      ( "c_prefix","c_year","n_srno","c_item_code","c_batch_no","n_seq","d_date_time","c_remark","n_qty","n_rate","n_value","n_qty_disc_flag" ) values
      ( 'P',"c_tran_year","new_name"."n_srno","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_seq","GETDATE"(),'PURCHASE',"new_name"."n_scheme_qty","new_name"."n_sale_rate",("new_name"."n_sale_rate"*"new_name"."n_scheme_qty"),1 ) 
  end if;
  if "new_name"."n_scheme_disc" <> 0 then
    delete from "scheme_ledger_det"
      where "c_prefix" = 'P'
      and "c_year" = "c_tran_year"
      and "n_srno" = "old_name"."n_srno"
      and "c_item_code" = "old_name"."c_item_code"
      and "c_batch_no" = "old_name"."c_batch_no"
      and "n_seq" = "old_name"."n_seq";
    insert into "scheme_ledger_det"
      ( "c_prefix","c_year","n_srno","c_item_code","c_batch_no","n_seq","d_date_time","c_remark","n_qty","n_rate","n_value","n_qty_disc_flag" ) values
      ( 'P',"c_tran_year","new_name"."n_srno","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_seq","GETDATE"(),'PURCHASE',1,"new_name"."n_scheme_disc","new_name"."n_scheme_disc",2 ) 
  end if;
  update "item_mst" set "item_mst"."c_hsn_sac_code" = "new_name"."c_hsn_sac_code","d_ldate" = "uf_default_date"() where "item_mst"."c_code" = "new_name"."c_item_code" and "isnull"("item_mst"."c_hsn_sac_code",'') = '' and "isnull"("new_name"."c_hsn_sac_code",'') <> '';
  if "new_name"."n_store_track" = 2 and "old_name"."n_post" = 0 and "new_name"."n_post" = 1 then --insert 
    if "new_name"."n_pur_godown_flag" = 1 then --godown
      select "c_godown_rack_code" into "c_rak" from "item_mst" where "item_mst"."c_code" = "new_name"."c_item_code"
    else --Nornmal; 
      select "c_rack_code" into "c_rak" from "item_mst" where "item_mst"."c_code" = "new_name"."c_item_code"
    end if;
    select "c_group" into "rack_grp_code" from "rack_mst" where "rack_mst"."c_code" = "c_rak";
    insert into "st_track_in"
      ( "c_doc_no",
      "n_seq","c_item_code","c_batch_no","n_qty",
      "c_tray_code","n_complete","t_time","c_godown_code","c_rack_code",
      "c_rack_grp_code",
      "c_user" ) 
      select "string"('000/'+"string"("Purchase_mst"."c_year")+'/'+"string"("Purchase_mst"."c_prefix")+'/'+"string"("new_name"."n_srno")),
        "new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_qty"+"isnull"("new_name"."n_scheme_qty",0),
        "new_name"."c_tray_code",0 as "n_complete","now"() as "t_time",'-' as "c_godown_code",
        "c_rak","rack_grp_code",null
        from "Purchase_mst"
        where "Purchase_mst"."n_srno" = "new_name"."n_srno"
  end if;
  if "new_name"."n_post" = 1 then
    if "new_name"."n_gr_check" = 1 then
      select "max"("purchase_mst"."c_supp_code"),"max"("n_ref_gatepass_no")
        into "s_supp","d_gate_pass_no" from "purchase_mst"
        where "purchase_mst"."n_srno" = "new_name"."n_srno";
      delete from "goods_rec_ledger"
        where "n_srno" = "old_name"."n_srno"
        and "n_seq" = "old_name"."n_seq";
      insert into "goods_rec_ledger"( "n_srno","n_seq","c_supp_code","c_item_code","c_batch_no","d_exp_dt","n_qty","n_mrp","n_cancel_flag","d_ldate","t_ltime","n_gate_pass_no" ) values
        ( "new_name"."n_srno","new_name"."n_seq","s_supp","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_expiry_date",-1*("new_name"."n_qty"+"new_name"."n_scheme_qty"),"new_name"."n_mrp",0,"uf_default_date"(),"now"(),"d_gate_pass_no" ) 
    end if end if;
  --------------------------------*SUpplier wise Stock_inward_outwad
  if "new_name"."n_enable_supp_stock_sale" = 1 then
    select "n_qty" into "n_tmp_bal_qty_supp" from "Stock_inward_outwad" where "Stock_inward_outwad"."c_item_code" = "new_name"."c_item_code" and "Stock_inward_outwad"."c_batch_no" = "new_name"."c_batch_no"
      and "Stock_inward_outwad"."c_supp_code" = "new_name"."c_code_supp" and "Stock_inward_outwad"."n_tran_no" = "new_name"."n_srno";
    if sqlcode = 0 then
      if "n_tmp_bal_qty_supp" <> 0 then
        if "old_name"."n_post" = 1 and @tran_type = -1 then
          update "Stock_inward_outwad" set "Stock_inward_outwad"."n_qty" = "Stock_inward_outwad"."n_qty"-"old_name"."n_qty",
            "Stock_inward_outwad"."n_schm_qty" = "Stock_inward_outwad"."n_schm_qty"-"old_name"."n_scheme_qty",
            "Stock_inward_outwad"."n_schm_disc" = "Stock_inward_outwad"."n_schm_disc"-"old_name"."n_scheme_disc"
            where "Stock_inward_outwad"."c_item_code" = "new_name"."c_item_code" and "Stock_inward_outwad"."c_batch_no" = "new_name"."c_batch_no" and "Stock_inward_outwad"."c_supp_code" = "new_name"."c_code_supp"
        end if;
        update "Stock_inward_outwad" set "Stock_inward_outwad"."n_qty" = "Stock_inward_outwad"."n_qty"+"old_name"."n_qty",
          "Stock_inward_outwad"."n_schm_qty" = "Stock_inward_outwad"."n_schm_qty"+"old_name"."n_scheme_qty",
          "Stock_inward_outwad"."n_schm_disc" = "Stock_inward_outwad"."n_schm_disc"-"old_name"."n_scheme_disc",
          "Stock_inward_outwad"."n_sale_rate" = "new_name"."n_sale_rate","Stock_inward_outwad"."n_mrp" = "new_name"."n_mrp",
          "Stock_inward_outwad"."n_pur_rate" = "new_name"."n_purchase_rate",
          "Stock_inward_outwad"."n_eff_pur_rate" = "new_name"."n_effective_purchase_rate",
          "Stock_inward_outwad"."n_ptr_1" = "new_name"."n_ptr_1",
          "Stock_inward_outwad"."d_ldate" = "now"(),
          "Stock_inward_outwad"."n_retail_disc" = "new_name"."n_retail_disc"
          where "Stock_inward_outwad"."c_item_code" = "new_name"."c_item_code" and "Stock_inward_outwad"."c_batch_no" = "new_name"."c_batch_no" and "Stock_inward_outwad"."c_supp_code" = "new_name"."c_code_supp";
        if "old_name"."n_post" = 1 and @tran_type = 1 then
          update "Stock_inward_outwad" set "Stock_inward_outwad"."n_qty" = "Stock_inward_outwad"."n_qty"-"old_name"."n_qty",
            "Stock_inward_outwad"."n_schm_qty" = "Stock_inward_outwad"."n_schm_qty"-"old_name"."n_scheme_qty",
            "Stock_inward_outwad"."n_schm_disc" = "Stock_inward_outwad"."n_schm_disc"-"old_name"."n_scheme_disc"
            where "Stock_inward_outwad"."c_item_code" = "new_name"."c_item_code" and "Stock_inward_outwad"."c_batch_no" = "new_name"."c_batch_no" and "Stock_inward_outwad"."c_supp_code" = "new_name"."c_code_supp"
        end if
      else
        set "d_def_date" = "uf_default_date"();
        if "old_name"."n_post" = 1 and @tran_type = -1 then
          update "Stock_inward_outwad" set "Stock_inward_outwad"."n_qty" = "Stock_inward_outwad"."n_qty"-"old_name"."n_qty",
            "Stock_inward_outwad"."n_schm_qty" = "Stock_inward_outwad"."n_schm_qty"-"old_name"."n_scheme_qty",
            "Stock_inward_outwad"."n_schm_disc" = "Stock_inward_outwad"."n_schm_disc"-"old_name"."n_scheme_disc"
            where "Stock_inward_outwad"."c_item_code" = "new_name"."c_item_code" and "Stock_inward_outwad"."c_batch_no" = "new_name"."c_batch_no" and "Stock_inward_outwad"."c_supp_code" = "new_name"."c_code_supp"
        end if;
        update "Stock_inward_outwad" set "Stock_inward_outwad"."n_qty" = "Stock_inward_outwad"."n_qty"+"old_name"."n_qty",
          "Stock_inward_outwad"."n_schm_qty" = "Stock_inward_outwad"."n_schm_qty"+"old_name"."n_scheme_qty",
          "Stock_inward_outwad"."n_schm_disc" = "Stock_inward_outwad"."n_schm_disc"-"old_name"."n_scheme_disc",
          "Stock_inward_outwad"."n_sale_rate" = "new_name"."n_sale_rate","Stock_inward_outwad"."n_mrp" = "new_name"."n_mrp",
          "Stock_inward_outwad"."n_pur_rate" = "new_name"."n_purchase_rate",
          "Stock_inward_outwad"."n_eff_pur_rate" = "new_name"."n_effective_purchase_rate",
          "Stock_inward_outwad"."n_ptr_1" = "new_name"."n_ptr_1",
          "Stock_inward_outwad"."d_ldate" = "now"(),
          "Stock_inward_outwad"."n_retail_disc" = "new_name"."n_retail_disc"
          where "Stock_inward_outwad"."c_item_code" = "new_name"."c_item_code" and "Stock_inward_outwad"."c_batch_no" = "new_name"."c_batch_no" and "Stock_inward_outwad"."c_supp_code" = "new_name"."c_code_supp";
        if "old_name"."n_post" = 1 and @tran_type = 1 then
          update "Stock_inward_outwad" set "Stock_inward_outwad"."n_qty" = "Stock_inward_outwad"."n_qty"-"old_name"."n_qty",
            "Stock_inward_outwad"."n_schm_qty" = "Stock_inward_outwad"."n_schm_qty"-"old_name"."n_scheme_qty",
            "Stock_inward_outwad"."n_schm_disc" = "Stock_inward_outwad"."n_schm_disc"-"old_name"."n_scheme_disc"
            where "Stock_inward_outwad"."c_item_code" = "new_name"."c_item_code" and "Stock_inward_outwad"."c_batch_no" = "new_name"."c_batch_no" and "Stock_inward_outwad"."c_supp_code" = "new_name"."c_code_supp"
        end if
      end if; //eof n_tmp_bal_qty_sup <> 0
      if sqlstate = '02000' then
        raiserror 18000 "Error, Cannot update item in Stock_inward_outwad supplier table. Please restart the system."
      end if
    else //if not there  
      set "d_def_date" = "uf_default_date"();
      insert into "Stock_inward_outwad"
        ( "c_item_code","c_batch_no","c_supp_code","n_tran_no","n_qty","n_schm_qty","n_schm_disc","n_sale_rate","n_pur_rate","n_eff_pur_rate","n_mrp","d_exp_date","d_date","d_ldate","n_flag","n_branch","n_ptr_1","n_retail_disc" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."c_code_supp","new_name"."n_srno","new_name"."n_qty","new_name"."n_scheme_qty","new_name"."n_scheme_disc","new_name"."n_sale_rate",
        "new_name"."n_purchase_rate","new_name"."n_effective_purchase_rate","new_name"."n_mrp","new_name"."d_expiry_date","new_name"."d_purchase_date","now"(),1,"new_name"."n_branch","new_name"."n_ptr_1","new_name"."n_retail_disc" ) ;
      if sqlstate = '02000' then
        raiserror 18000 "Error, Cannot add item in Stock_inward_outwad supplier table. Please restart the system."
      end if
    end if //EOF sqlcode <> 0   
  end if //if n_enable_supp_stock_sale
--------------------------------       
end;
CREATE TRIGGER "update_ledger_from_purchase_mst" after update order 1 on
------------------
------------------
-----------------------------------------NEW LINE
-------------
--------------
---------------
-------------------
------------------------------
----------------------------------
----------------------------------------
-------------------------------Purchase mst
--inv delete end
--Purchase trigger Start
--inv delete end
--Purchase trigger Start
"DBA"."Purchase_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "s_purchase_account_code" char(6);
  declare "d_pur_total" decimal(10,2);
  declare "d_vat_total" decimal(10,2);
  declare "br_sale_purchae_bal" decimal(1);
  declare "d_post_date",@d_defa_date,@tds_valid_from date;
  declare @jv_no,@chk_pur numeric(18);
  -----
  declare @yr char(2);
  declare @brcode char(6);
  declare @traninitial numeric(18);
  declare @trantype numeric(1);
  declare @multval numeric(1);
  declare @reconflag numeric(1);
  declare @crntamt decimal(10,2);
  declare @crntyr char(2);
  declare @crntprfx char(2);
  declare @rtnsaleamt numeric(14,2);
  select "c_br_code","right"("string"("year"("d_ac_year_st_date")),2),"d_tds_valid_from" into @brcode,@yr,@tds_valid_from from "System_Parameter";
  set @traninitial = cast((@yr+@brcode+'8000900000') as numeric(18));
  if "uf_get_financial_year"() <= 2018 then
    if "new_name"."n_srno" > @traninitial or "old_name"."n_srno" > @traninitial then
      set @trantype = 1; //purchase return
      set @multval = -1
    else
      set @trantype = 0;
      set @multval = 1
    end if
  else if "new_name"."c_prefix" = 'PR' or "old_name"."c_prefix" = 'PR' then
      set @trantype = 1; //purchase return
      set @multval = -1
    else
      set @trantype = 0;
      set @multval = 1
    end if end if;
  set @d_defa_date = "uf_default_date"();
  --commented as per the instruction of Gajanan Sir only reverse should be 1
  --  if new_name.n_gst_enabled <> 0 and new_name.n_gst_cess_amt+new_name.n_sgst_amt+new_name.n_cgst_amt+new_name.n_igst_amt <> 0 and new_name.n_to_gst_type <> 0 and new_name.n_from_gst_type = 0 and @trantype = 0 then
  --    set @reconflag = 1
  --  else
  set @reconflag = 0;
  --  end if;
  ------
  set @crntamt = 0;
  set @rtnsaleamt = 0;
  if "isnull"("new_name"."n_ref_crnt_voucher",0) > 0 then
    set @crntamt = "isnull"("new_name"."n_crnt_amt",0);
    set @crntyr = "uf_get_pk_component"("new_name"."n_ref_crnt_voucher",1);
    set @crntprfx = "uf_get_pk_component"("new_name"."n_ref_crnt_voucher",3);
    if "new_name"."c_supp_code" <> "old_name"."c_supp_code" then
      update "dbnt_voucher_mst" set "c_supp_code" = "new_name"."c_supp_code" where "n_srno" = "new_name"."n_ref_crnt_voucher"
    end if
  else
    set @crntamt = 0
  end if;
  if "isnull"("new_name"."n_rtn_sale_no",0) > 0 and "isnull"("new_name"."n_rtn_sale_amt",0) > 0 then
    set @rtnsaleamt = "new_name"."n_rtn_sale_amt"
  end if;
  ------
  if(select "isnull"("n_ledger_date_billdate",0) from "System_Parameter") = 1 then
    set "d_post_date" = "new_name"."d_purchase_bill_date"
  else
    set "d_post_date" = "new_name"."d_purchase_date"
  end if;
  select "isnull"("n_br_sale_bal",1) into "br_sale_purchae_bal" from "System_Parameter";
  if "old_name"."n_post" = 1 then
    delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
      and "ledger"."n_tran_no" = "old_name"."n_srno";
    delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix"
      and "remarks"."n_tran_id" = "old_name"."n_srno";
    delete from "settle_mst"
      where "settle_mst"."c_year" = "new_name"."c_year"
      and "settle_mst"."c_prefix" = "old_name"."c_prefix"
      and "settle_mst"."n_srno" = "old_name"."n_srno"
      and "settle_mst"."c_year1" = "new_name"."c_year"
      and "settle_mst"."c_prefix1" = "old_name"."c_prefix"
      and "settle_mst"."n_srno1" = "old_name"."n_srno";
    -------
    delete from "settle_mst"
      where "settle_mst"."c_year" = "new_name"."c_year"
      and "settle_mst"."c_prefix" = "old_name"."c_prefix"
      and "settle_mst"."n_srno" = "old_name"."n_srno"
      and "settle_mst"."c_year1" = "uf_get_pk_component"("old_name"."n_ref_crnt_voucher",1)
      and "settle_mst"."c_prefix1" = "uf_get_pk_component"("old_name"."n_ref_crnt_voucher",3)
      and "settle_mst"."n_srno1" = "old_name"."n_ref_crnt_voucher";
    -------rtnsale 
    delete from "settle_mst"
      where "settle_mst"."c_year" = "new_name"."c_year"
      and "settle_mst"."c_prefix" = "old_name"."c_prefix"
      and "settle_mst"."n_srno" = "old_name"."n_srno"
      and "settle_mst"."c_prefix1" = "old_name"."c_rtn_sale_prefix"
      and "settle_mst"."n_srno1" = "old_name"."n_rtn_sale_no";
    -------
    delete from "gst_ledger_mst" where "gst_ledger_mst"."n_srno" = "old_name"."n_srno";
    delete from "gst_ledger_mst" where "gst_ledger_mst"."n_srno" = -"old_name"."n_srno"
  end if;
  if "new_name"."n_post" <> 1 then
    return
  end if;
  if "new_name"."n_vaton" = 0 then
    set "d_vat_total" = 0
  else
    set "d_vat_total" = "new_name"."n_st_total"+"new_name"."n_dif_vat"-"new_name"."n_crnt_vat_amt"+"new_name"."n_dbnt_vat_amt"
  end if;
  if "new_name"."n_vaton" = 0 then
    set "d_pur_total" = "new_name"."n_total"-"isnull"("new_name"."n_service_chg",0)-"isnull"("new_name"."n_tcs_amt",0)
  else
    set "d_pur_total" = "new_name"."n_total"-("d_vat_total"+"new_name"."n_cess")-"new_name"."n_othercharge"-"isnull"("new_name"."n_service_chg",0)-"isnull"("new_name"."n_tcs_amt",0)
  end if;
  if "new_name"."n_head_office" = 0 then
    set "s_purchase_account_code" = 'PURCH'
  else
    set "s_purchase_account_code" = 'STKHO'
  end if;
  if "new_name"."n_head_office" = 1 then
    if("br_sale_purchae_bal" = 1 or "br_sale_purchae_bal" = 3) then
      insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
        "n_srno1","n_amount","c_cust_code","d_date","d_due_date" ) values( "new_name"."c_year",
        "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
        -("new_name"."n_total"),"new_name"."c_supp_code","new_name"."d_purchase_date","new_name"."d_purchase_date"+"new_name"."n_credit_days" ) 
    end if
  else insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date" ) values( "new_name"."c_year",
      "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
      -("new_name"."n_total"),"new_name"."c_supp_code","new_name"."d_purchase_date","new_name"."d_purchase_date"+"new_name"."n_credit_days" ) 
  end if;
  -------
  if @crntamt > 0 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date" ) values( "new_name"."c_year",
      "new_name"."c_prefix","new_name"."n_srno",@crntyr,@crntprfx,"new_name"."n_ref_crnt_voucher",
      -@crntamt,"new_name"."c_supp_code","new_name"."d_purchase_date","new_name"."d_purchase_date"+"new_name"."n_credit_days" ) 
  end if;
  ------rtn sale
  if @rtnsaleamt > 0 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date" ) values( "new_name"."c_year",
      "new_name"."c_prefix","new_name"."n_srno","left"("new_name"."n_rtn_sale_no",2),"new_name"."c_rtn_sale_prefix","new_name"."n_rtn_sale_no",
      -"new_name"."n_rtn_sale_amt","new_name"."c_supp_code","new_name"."d_purchase_date","new_name"."d_purchase_date" ) 
  end if;
  //Supplier posting 
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_supp_code","d_post_date",-("new_name"."n_total"+@crntamt+@rtnsaleamt),
    "s_purchase_account_code" ) ;
  if "new_name"."n_scheme_discount" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'SCHMR',"d_post_date",if @trantype = 1 then "new_name"."n_scheme_discount" else-"new_name"."n_scheme_discount" endif,"s_purchase_account_code" ) 
  end if;
  if "new_name"."n_cash_discount" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cash_discount_code","d_post_date",-"isnull"("new_name"."n_cash_discount",0),"s_purchase_account_code" ) 
  end if;
  if "new_name"."n_discount_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'DISCR',"d_post_date",-"new_name"."n_discount_amt","s_purchase_account_code" ) 
  end if;
  if "new_name"."n_crnt_amt" <> 0 and @crntamt = 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'DBNTR',"d_post_date",-"new_name"."n_crnt_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_dbnt_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CRNTR',"d_post_date","new_name"."n_dbnt_amt","new_name"."c_supp_code" ) 
  end if;
  if "d_vat_total" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'VAT',"d_post_date","d_vat_total","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_cess" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CESSPY',"d_post_date","new_name"."n_cess","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_othercharge" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-PURCH',"d_post_date","new_name"."n_othercharge","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_act_repl_value" = 1 and "new_name"."n_repl_value" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-RPLPR',"d_post_date","new_name"."n_repl_value",'-CLAIM' ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-CLAIM',"d_post_date",-"new_name"."n_repl_value",'-RPLPR' ) 
  end if;
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","s_purchase_account_code","d_post_date",
    (if("new_name"."n_to_gst_type" = 0 or "new_name"."n_to_gst_type" = 8) and "new_name"."n_from_gst_type" <> 0 then "d_pur_total"+"new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"+@rtnsaleamt
      +(if @trantype = 1 then-1 else 1 endif)*"new_name"."n_scheme_discount"+"new_name"."n_discount_amt"
    else "d_pur_total"+"new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"+@rtnsaleamt
      +(if @trantype = 1 then-1 else 1 endif)*"new_name"."n_scheme_discount"+"new_name"."n_discount_amt"+(if("new_name"."n_to_gst_type" <> 0 and "new_name"."n_to_gst_type" <> 8) and "new_name"."n_from_gst_type" = 0 then 0
      else if("new_name"."n_to_gst_type" = 0 or "new_name"."n_to_gst_type" = 8) and "new_name"."n_from_gst_type" = 0 then-("new_name"."n_cgst_amt"+"new_name"."n_sgst_amt"+"new_name"."n_igst_amt"+"new_name"."n_gst_cess_amt")
        else "new_name"."n_cgst_amt"+"new_name"."n_sgst_amt"+"new_name"."n_igst_amt"+"new_name"."n_gst_cess_amt"
        endif
      endif)
    endif)+"isnull"("new_name"."n_cash_discount",0),"new_name"."c_supp_code" ) ;
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",null,null,'Bill No.: '+"new_name"."c_purchase_bill_no"+' Dated: '+convert(char(10),"new_name"."d_purchase_bill_date",103) ) ;
  delete from "purchase_bill_info" where "c_year" = "old_name"."c_year"
    and "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno";
  insert into "purchase_bill_info"( "c_year","c_prefix","n_srno","c_bill_no","d_bill_date","c_supp_code" ) values
    ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno","new_name"."c_purchase_bill_no","new_name"."d_purchase_bill_date","new_name"."c_supp_code" ) ;
  if "new_name"."n_igst_amt" <> 0 and("new_name"."n_from_gst_type" = 0) and "new_name"."n_to_gst_type" <> 3 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_act_code","d_post_date","new_name"."n_igst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_sgst_amt" <> 0 and("new_name"."n_from_gst_type" = 0) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_act_code","d_post_date","new_name"."n_sgst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_cgst_amt" <> 0 and("new_name"."n_from_gst_type" = 0) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_act_code","d_post_date","new_name"."n_cgst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_gst_cess_amt" <> 0 and("new_name"."n_from_gst_type" = 0) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_gst_cess_act_code","d_post_date","new_name"."n_gst_cess_amt","new_name"."c_supp_code" ) 
  end if;
  //Reverse ledger 
  if "new_name"."n_cgst_amt" <> 0 and("new_name"."n_from_gst_type" = 0 and "new_name"."n_to_gst_type" <> 0 and "new_name"."n_to_gst_type" < 3) then
    //Supplier is un Registered/composite and Firm is registered
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_rev_act_code","d_post_date",-"new_name"."n_cgst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_sgst_amt" <> 0 and("new_name"."n_from_gst_type" = 0 and "new_name"."n_to_gst_type" <> 0 and "new_name"."n_to_gst_type" < 3) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_rev_act_code","d_post_date",-"new_name"."n_sgst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_igst_amt" <> 0 and("new_name"."n_from_gst_type" = 0 and "new_name"."n_to_gst_type" <> 0 and "new_name"."n_to_gst_type" < 3) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_rev_act_code","d_post_date",-"new_name"."n_igst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_gst_cess_amt" <> 0 and("new_name"."n_from_gst_type" = 0 and "new_name"."n_to_gst_type" <> 0 and "new_name"."n_to_gst_type" < 3) then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_gst_cess_rev_act_code","d_post_date",-"new_name"."n_gst_cess_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and "trim"("isnull"("new_name"."c_from_gst_no",'')) <> "trim"("isnull"("new_name"."c_to_gst_no",'')) and "new_name"."n_to_gst_type" <> 3 then
    insert into "gst_ledger_mst"( "n_srno","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note","n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
      "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","d_ref_date","c_eway_bill_no","c_port_code","n_cancel_flag" ) values
      ( "new_name"."n_srno",
      if "new_name"."n_gst_enabled" <> 0 and("new_name"."n_to_gst_type" <> 0 and "new_name"."n_to_gst_type" <> 8) and "new_name"."n_from_gst_type" = 0 and @trantype = 0 then
        "DATE"("STRING"("YEAR"("DATEADD"("month",1,"isnull"("new_name"."d_purchase_date","d_post_date"))))+'-'+"RIGHT"('0'+"STRING"("MONTH"("DATEADD"("month",1,"isnull"("new_name"."d_purchase_date","d_post_date")))),2)+'-'+'01')
      else
        "d_post_date"
      endif,"new_name"."c_supp_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
      "new_name"."c_purchase_bill_no",'',@reconflag,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_gst_cess_amt",
      0,"new_name"."n_discount_amt"+"new_name"."n_scheme_discount",("new_name"."n_taxable_amt"),
      "new_name"."n_total"+"new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"+@rtnsaleamt,"new_name"."d_ldate","new_name"."t_ltime","new_name"."c_user","new_name"."c_state_code","new_name"."n_service_chg","new_name"."n_flag","isnull"("new_name"."n_discount_amt",0)+"isnull"("new_name"."n_cash_discount",0),"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."d_purchase_bill_date","new_name"."c_eway_bill_no","new_name"."c_port_code","new_name"."n_cancel_flag" ) ;
    if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_to_gst_type" <> 0 and "new_name"."n_to_gst_type" < 3 and "new_name"."n_from_gst_type" = 0 and @trantype = 0 then
      insert into "gst_ledger_mst"( "n_srno","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note","n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
        "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","d_ref_date","c_eway_bill_no","c_port_code","n_cancel_flag" ) values
        ( -1*"new_name"."n_srno","new_name"."d_purchase_date","new_name"."c_supp_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
        "new_name"."c_purchase_bill_no",'',1,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_gst_cess_amt",
        0,
        "new_name"."n_discount_amt"+"new_name"."n_scheme_discount",("new_name"."n_taxable_amt"),
        "new_name"."n_total"+"new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"+@rtnsaleamt,
        "new_name"."d_ldate","new_name"."t_ltime","new_name"."c_user","new_name"."c_state_code",
        "new_name"."n_service_chg",0,"isnull"("new_name"."n_discount_amt",0)+"isnull"("new_name"."n_cash_discount",0),"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."d_purchase_bill_date",
        "new_name"."c_eway_bill_no","new_name"."c_port_code","new_name"."n_cancel_flag" ) 
    end if end if;
  --jagamohan on 03-08-2017
  if "new_name"."n_service_chg" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_service_act","d_post_date","new_name"."n_service_chg","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_tcs_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tcs_act_code","d_post_date","new_name"."n_tcs_amt","new_name"."c_supp_code" ) 
  end if;
  delete from "settle_mst_header" where "n_srno" = "new_name"."n_srno" and "c_prefix" = "new_name"."c_prefix";
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","n_discount_per","n_freight","n_other_charge","n_total","n_tot_sch_disc","n_crnt_amt","n_dbnt_amt","c_user","c_ref_id","d_ref_date","n_adv_amt",
    "c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt","c_state_code","n_doc_type","n_gst_enabled","n_tcs_amt","n_disc_amt" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."d_purchase_date","new_name"."c_supp_code","new_name"."n_fix_discount","new_name"."n_freight","new_name"."n_othercharge",
    "new_name"."n_total","new_name"."n_scheme_discount","new_name"."n_crnt_amt","new_name"."n_dbnt_amt","new_name"."c_user","new_name"."c_purchase_bill_no","new_name"."d_purchase_bill_date","new_name"."n_dis_per",
    "new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no","new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_gst_cess_amt","new_name"."c_state_code",11,
    "new_name"."n_gst_enabled","new_name"."n_tcs_amt","new_name"."n_discount_amt" ) ;
  //JV creation for TDS
  set @d_defa_date = "new_name"."d_purchase_date";
  if "new_name"."n_tds_amt" <> 0 then
    select "n_srno" into @jv_no from "jv_mst" where "n_ref_no_tds" = "new_name"."n_srno";
    if @jv_no is null then
      set @jv_no = 0
    end if;
    if @jv_no = 0 then
      if "new_name"."n_skip_tds_jv" = 0 then
        set @jv_no = "uf_get_new_tran"('JV');
        insert into "jv_mst"( "c_prefix","n_srno","d_jv_date","c_remark","d_ldate","c_year","c_user","c_luser","n_gst_enabled","n_reverse_flag",
          "n_ref_no_tds","c_tds_act_code","c_tds_act_gstin","n_to_gst_type","n_total","c_ref_no","d_ref_date" ) values
          ( 'JV',@jv_no,@d_defa_date,'TDS AUTO JV BILL PUR.NO:'+"string"("new_name"."n_srno")+' BILL NO/DATE'+"new_name"."c_purchase_bill_no"+'/'+"string"("new_name"."d_purchase_bill_date"),@d_defa_date,"new_name"."c_year",'AUTO','AUTO',"new_name"."n_gst_enabled",0,
          "new_name"."n_srno","new_name"."c_supp_code","new_name"."c_to_gst_no",4,"new_name"."n_total","new_name"."c_purchase_bill_no","new_name"."d_purchase_bill_date" ) ;
        insert into "jv_det"( "n_srno","c_act_code","n_credit","n_debit","d_jv_date","c_opp_act_code","n_protect_flag" ) values
          ( @jv_no,"new_name"."c_tds_act_code","new_name"."n_tds_amt",0.0,@d_defa_date,"new_name"."c_supp_code",1 ) ;
        insert into "jv_det"( "n_srno","c_act_code","n_credit","n_debit","d_jv_date","c_opp_act_code","n_protect_flag" ) values
          ( @jv_no,"new_name"."c_supp_code",0.0,"new_name"."n_tds_amt",@d_defa_date,"new_name"."c_tds_act_code",1 ) 
      end if
    else delete from "jv_mst" where "n_srno" = @jv_no;
      delete from "jv_det" where "n_srno" = @jv_no;
      if "new_name"."n_skip_tds_jv" = 0 then
        insert into "jv_mst"( "c_prefix","n_srno","d_jv_date","c_remark","d_ldate","c_year","c_user","c_luser","n_gst_enabled","n_reverse_flag",
          "n_ref_no_tds","c_tds_act_code","c_tds_act_gstin","n_to_gst_type","n_total","c_ref_no","d_ref_date" ) values
          ( 'JV',@jv_no,@d_defa_date,'TDS AUTO JV BILL PUR.NO:'+"string"("new_name"."n_srno")+' BILL NO/DATE'+"new_name"."c_purchase_bill_no"+'/'+"string"("new_name"."d_purchase_bill_date"),@d_defa_date,"new_name"."c_year",'AUTO','AUTO',"new_name"."n_gst_enabled",0,
          "new_name"."n_srno","new_name"."c_supp_code","new_name"."c_to_gst_no",4,"new_name"."n_total","new_name"."c_purchase_bill_no","new_name"."d_purchase_bill_date" ) ;
        insert into "jv_det"( "n_srno","c_act_code","n_credit","n_debit","d_jv_date","c_opp_act_code","n_protect_flag" ) values
          ( @jv_no,"new_name"."c_tds_act_code","new_name"."n_tds_amt",0.0,@d_defa_date,"new_name"."c_supp_code",1 ) ;
        insert into "jv_det"( "n_srno","c_act_code","n_credit","n_debit","d_jv_date","c_opp_act_code","n_protect_flag" ) values
          ( @jv_no,"new_name"."c_supp_code",0.0,"new_name"."n_tds_amt",@d_defa_date,"new_name"."c_tds_act_code",1 ) 
      end if //EOF if jv = 0
    end if
  else select "n_srno" into @jv_no from "jv_mst" where "n_ref_no_tds" = "new_name"."n_srno";
    if @jv_no is null then
      set @jv_no = 0
    end if;
    if @jv_no > 0 then
      delete from "jv_mst" where "n_srno" = @jv_no;
      delete from "jv_det" where "n_srno" = @jv_no
    end if end if; //EOF if new_name.n_tds_amt <> 0 then
  //Auto ENABE TDS 
  if "new_name"."c_prefix" = 'P' then
    select "count"() into @chk_pur from "sale_till_date" where "c_code" = "new_name"."c_supp_code";
    if @chk_pur is null then
      set @chk_pur = 0
    end if;
    if @chk_pur = 0 then
      insert into "sale_till_date"( "c_code","n_pur_value" ) values( "new_name"."c_supp_code","new_name"."n_total" ) 
    else
      update "sale_till_date" set "n_pur_value" = "n_pur_value"+"new_name"."n_total" where "c_code" = "new_name"."c_supp_code"
    end if;
    if "old_name"."c_supp_code" <> "new_name"."c_supp_code" then
      update "sale_till_date" set "n_pur_value" = "n_pur_value"-"old_name"."n_total" where "c_code" = "old_name"."c_supp_code"
    end if;
    set @chk_pur = 0;
    if "isnull"("old_name"."c_to_gst_no",'-') <> "isnull"("new_name"."c_to_gst_no",'--') then
      update "gstin_wise_sale_total" set "n_pur_value" = "n_pur_value"-"old_name"."n_total" where "c_code" = "old_name"."c_to_gst_no"
    end if;
    if "new_name"."c_to_gst_no" is not null then
      select "count"() into @chk_pur from "gstin_wise_sale_total" where "c_code" = "new_name"."c_to_gst_no";
      if @chk_pur is null then
        set @chk_pur = 0
      end if;
      if @chk_pur = 0 then
        insert into "gstin_wise_sale_total"( "c_code","n_pur_value" ) values( "new_name"."c_to_gst_no","new_name"."n_total" ) 
      else
        update "gstin_wise_sale_total" set "n_pur_value" = "n_pur_value"+"new_name"."n_total" where "c_code" = "new_name"."c_to_gst_no"
      end if
    end if //EOF GSTIN
  end if; //EOF c_prefix = 'P'  
  //    
  call "usp_check_update_last_tran_info"(0,"new_name"."c_supp_code",(if "new_name"."c_prefix" = 'P' or "new_name"."c_prefix" = 'PA' then 3 else 4 endif),"new_name"."c_prefix","new_name"."n_srno","new_name"."d_purchase_date")
end;
CREATE TRIGGER "Update_ledger_from_rtn_invoice_mst" after update order 2 on
--------------------------
--------------------
--------------------------------------------
-----------sales invoice mst update
--inv insert End
--inv update start
--------------------------
"DBA"."rtn_invoice_mst"
referencing old as "old_name" new as "new_name"
for each row
when("new_name"."n_ledg_effect" = 1)
begin
  /*    
Name: Update_ledger_from_invoice_mst
Date:1/3/99
Applies to: invoice 
Parameter description:n/a
Return Value: n/a
Overview:
when invoice is changed then its relative effect to the ledger is affected
through this trigger.
it updates the following thing 
debits the customer account with updated new invoice amount
it checks the following 
discount,rounded amount,nontaxable sale,taxable sale,ST,CST
*if in old invoice any of the above does not exist and  in new it is 
then it insert the ledger
*if old invoice has any of above and in new it does not exist then it 
deletes that old entry from ledger
*if both old and new has data for above then it updates the old with new
It checks the credit,debit and advance note settlement
*if in old invoice has not any note settled and and in new has then it 
settles the note and insert invoice id in that notes master
*if old has settled note and new has no any note then it deletes from 
ledger
*if both have settled notes and both are not same then unsettled the old 
note and settled the new note
Boundary conditions: n/a
Remarks:
Revision History:
Developed by: hitesh
Tested by:
*/
  declare "old_cust_account_code" char(6);
  declare "new_cust_account_code" char(6);
  declare "old_sales_account_code" char(6);
  declare "new_sales_account_code" char(6);
  declare "old_vat_rst_account_code" char(6);
  declare "new_vat_rst_account_code" char(6);
  declare "remark" char(50);
  declare "n_old_rnd_amt" decimal(4,2);
  declare "n_new_rnd_amt" decimal(4,2);
  if "old_name"."n_stop_trigger" <> "new_name"."n_stop_trigger" then
    return
  end if;
  if "old_name"."n_counter_sale" = 1 then
    // if counter sale then customer account is sale in old
    set "old_cust_account_code" = 'CASH'
  else
    //otherwise customer acccount code in old
    set "old_cust_account_code" = "old_name"."c_cust_code"
  end if;
  if "new_name"."n_counter_sale" = 1 then
    // if counter sale then customer account is sale in new
    set "new_cust_account_code" = 'CASH';
    if "new_name"."n_sub_sale" = 1 then
      //if counter sale and subsale then set remark 
      set "remark" = 'Counter sale and Sub sale'
    else
      // if only counter sale then set remark
      set "remark" = 'Counter sale'
    end if
  else set "new_cust_account_code" = "new_name"."c_cust_code";
    if "new_name"."n_sub_sale" = 1 then
      // if only subsale then set remark
      set "remark" = 'Sub sale'
    else
      set "remark" = ''
    end if end if;
  if "old_name"."n_vaton" = 1 then
    // if counter sale then customer account is sale in old
    set "old_vat_rst_account_code" = 'VAT'
  else
    //otherwise customer acccount code in old
    set "old_vat_rst_account_code" = 'R_ST'
  end if;
  if "new_name"."n_vaton" = 1 then
    // if counter sale then customer account is sale in old
    set "new_vat_rst_account_code" = 'VAT'
  else
    //otherwise customer acccount code in old
    set "new_vat_rst_account_code" = 'R_ST'
  end if;
  //change in customer account debit 
  /*
update ledger set c_act_code=new_cust_account_code,d_date=new_name.d_inv_date,
n_amount=new_name.n_total+new_name.n_crnt_amt-new_name.n_dbnt_amt+new_name.n_adv_amt,
c_opp_act_code=new_name.c_credit_act
where ledger.c_prefix=old_name.c_prefix and ledger.n_tran_no=old_name.n_srno and ledger.c_act_code=old_cust_account_code;
*/
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'CASH';
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_cust_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_igst_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_sgst_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_cgst_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_service_act";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_gst_cess_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_tcs_act_code";
  ----------
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_igst_rev_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_sgst_rev_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_cgst_rev_act_code";
  delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_name"."c_gst_cess_rev_act_code";
  ----------
  delete from "gst_ledger_mst" where "gst_ledger_mst"."n_srno" = "old_name"."n_srno";
  delete from "settle_mst"
    where "settle_mst"."c_year" = "new_name"."c_year"
    and "settle_mst"."c_prefix" = "old_name"."c_prefix"
    and "settle_mst"."n_srno" = "old_name"."n_srno"
    and "settle_mst"."c_year1" = "new_name"."c_year"
    and "settle_mst"."c_prefix1" = "old_name"."c_prefix"
    and "settle_mst"."n_srno1" = "old_name"."n_srno";
  if "new_cust_account_code" = 'CASH' then
    if "new_name"."n_total" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_cust_account_code","new_name"."d_inv_date","new_name"."n_total","new_name"."c_credit_act" ) 
    end if;
    if "new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"+"new_name"."n_adv_amt" <> 0 then
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cust_code","new_name"."d_inv_date","new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"+"new_name"."n_adv_amt","new_name"."c_credit_act" ) 
    end if
  else insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_cust_account_code","new_name"."d_inv_date","new_name"."n_total"+"new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"+"new_name"."n_adv_amt","new_name"."c_credit_act" ) 
  end if;
  //if old has no discount and new has discount then insert new
  if "old_name"."n_disc_amt" = 0 and "new_name"."n_disc_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'DISCG',"new_name"."d_inv_date",
      "new_name"."n_disc_amt","new_name"."c_credit_act" ) 
  end if;
  //if old has discount and new has no discount then delete old
  if "old_name"."n_disc_amt" <> 0 then
    if "new_name"."n_disc_amt" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'DISCG'
    else
      //if old has discount and new has discount then update old with new 
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = "new_name"."n_disc_amt",
        "c_opp_act_code" = "new_name"."c_credit_act"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'DISCG'
    end if end if;
  //difference between actual total and rounded total
  //rounded amount  
  set "n_old_rnd_amt" = "old_name"."n_taxable_sale"+"old_name"."n_non_taxable_sale"+"old_name"."n_other_charge"+"old_name"."n_freight"+"old_name"."n_st"+"old_name"."n_cess"+"old_name"."n_rst"+"old_name"."n_cst"+(if "old_name"."n_to_gst_type" = 7 then 0 else("old_name"."n_sgst_amt"+"old_name"."n_cgst_amt"+"old_name"."n_igst_amt"+"isnull"("old_name"."n_gst_cess_amt",0)) endif)-"old_name"."n_disc_amt"-"old_name"."n_lbt_amt"-"old_name"."n_crnt_amt"+"old_name"."n_dbnt_amt"-"old_name"."n_adv_amt"+"isnull"("old_name"."n_service_chg",0)+"isnull"("old_name"."n_tcs_amt",0)-"old_name"."n_total";
  set "n_new_rnd_amt" = "new_name"."n_taxable_sale"+"new_name"."n_non_taxable_sale"+"new_name"."n_other_charge"+"new_name"."n_freight"+"new_name"."n_st"+"new_name"."n_cess"+"new_name"."n_rst"+"new_name"."n_cst"+(if "new_name"."n_to_gst_type" = 7 then 0 else("new_name"."n_sgst_amt"+"new_name"."n_cgst_amt"+"new_name"."n_igst_amt"+"isnull"("new_name"."n_gst_cess_amt",0)) endif)-"new_name"."n_disc_amt"-"new_name"."n_lbt_amt"-"new_name"."n_crnt_amt"+"new_name"."n_dbnt_amt"-"new_name"."n_adv_amt"+"isnull"("new_name"."n_service_chg",0)+"isnull"("new_name"."n_tcs_amt",0)-"new_name"."n_total";
  if "n_old_rnd_amt" = 0 then
    if "n_new_rnd_amt" <> 0 then
      //if old has no round figure in total and new has round then insert 
      insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
        ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"new_name"."d_inv_date","n_new_rnd_amt","new_cust_account_code" ) 
    end if end if;
  //if old is rounded and new has not rounded then delete 
  if "n_old_rnd_amt" <> 0 then
    if "n_new_rnd_amt" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'KASAR'
    else
      //if old and new total are rounded then set as a new n_rnd_amt
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = "n_new_rnd_amt",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'KASAR'
    end if end if; //for non taxable amount 
  if "new_name"."n_branch" = 1 then
    //if new sale is transfer to the branch
    set "new_sales_account_code" = "new_name"."c_opp_act_code"
  else
    // otherwise new sale is to customer
    set "new_sales_account_code" = "new_name"."c_opp_act_code"
  end if;
  if "old_name"."n_branch" = 1 then
    //if old sale is transfer to the branch
    set "old_sales_account_code" = "old_name"."c_opp_act_code"
  else
    //other wise old sale is to customer
    set "old_sales_account_code" = "old_name"."c_opp_act_code"
  end if;
  if "old_name"."n_non_taxable_sale" = 0 and "new_name"."n_non_taxable_sale" <> 0 then
    //if old has no nontaxable sale and new has then insert
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_sales_account_code","new_name"."d_inv_date",
      -"new_name"."n_non_taxable_sale","new_cust_account_code" ) 
  end if;
  if "old_name"."n_non_taxable_sale" <> 0 then
    if "new_name"."n_non_taxable_sale" = 0 then
      // if old has nontaxable sale and new has not then delete old
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno"
        and "ledger"."c_act_code" = "old_sales_account_code"
    else
      //if old and new have nontaxable sale then update old with new
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = -"new_name"."n_non_taxable_sale",
        "c_act_code" = "new_sales_account_code",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno"
        and "ledger"."c_act_code" = "old_sales_account_code"
    end if end if;
  //for taxable amount
  //set proper taxable sale account code
  if "new_name"."n_branch" = 1 then
    //if taxable sale is transfer to the branch
    set "new_sales_account_code" = "new_name"."c_opp_act_code"
  else
    //otherwise to the customer
    set "new_sales_account_code" = "new_name"."c_opp_act_code"
  end if;
  if "old_name"."n_branch" = 1 then
    //if old sale is transfer to the branch
    set "old_sales_account_code" = "old_name"."c_opp_act_code"
  else
    //otherwise sale is to the customer
    set "old_sales_account_code" = "old_name"."c_opp_act_code"
  end if;
  if "old_name"."n_taxable_sale" = 0 and "new_name"."n_taxable_sale" <> 0 then
    //if old has no taxable sale and new has taxable then insert new
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_sales_account_code","new_name"."d_inv_date",
      -"new_name"."n_taxable_sale","new_cust_account_code" ) 
  end if;
  if "old_name"."n_taxable_sale" <> 0 then
    if "new_name"."n_taxable_sale" = 0 then
      // if old has taxable sale and new has no taxable sale then delete old
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno"
        and "ledger"."c_act_code" = "old_sales_account_code"
    else
      //if new and old both have taxable sale then update old with new value
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = -"new_name"."n_taxable_sale",
        "c_act_code" = "new_sales_account_code",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno"
        and "ledger"."c_act_code" = "old_sales_account_code"
    end if end if;
  // if old has no Other Charge and new has then insert new
  if "old_name"."n_other_charge" = 0 and "new_name"."n_other_charge" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'OCHARG',"new_name"."d_inv_date",-"new_name"."n_other_charge","new_cust_account_code" ) 
  end if;
  //if old has Other Charge and new has not then delete old
  if "old_name"."n_other_charge" <> 0 then
    if "new_name"."n_other_charge" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'OCHARG'
    else
      // if old and new both have Other Charge then update old with new
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = -"new_name"."n_other_charge",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'OCHARG'
    end if end if;
  // if old has no ST and new has then insert new
  if "old_name"."n_st" = 0 and "new_name"."n_st" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'ST',"new_name"."d_inv_date",-"new_name"."n_st","new_cust_account_code" ) 
  end if;
  //if old has st and new has not then delete old
  if "old_name"."n_st" <> 0 then
    if "new_name"."n_st" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'ST'
    else
      // if old and new both have st then update old with new
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = -"new_name"."n_st",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'ST'
    end if end if;
  // if old has no Cess and new has then insert new
  if "old_name"."n_cess" = 0 and "new_name"."n_cess" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CESSPY',"new_name"."d_inv_date",-"new_name"."n_cess","new_cust_account_code" ) 
  end if;
  //if old has Cess and new has not then delete old
  if "old_name"."n_cess" <> 0 then
    if "new_name"."n_cess" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'CESSPY'
    else
      // if old and new both have cess then update old with new
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = -"new_name"."n_cess",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'CESSPY'
    end if end if;
  // if old has no RST and new has then insert new
  if "old_name"."n_rst" = 0 and "new_name"."n_rst" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_vat_rst_account_code","new_name"."d_inv_date",-"new_name"."n_rst","new_cust_account_code" ) 
  end if;
  //if old has rst and new has not then delete old
  if "old_name"."n_rst" <> 0 then
    if "new_name"."n_rst" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_vat_rst_account_code"
    else
      // if old and new both have st then update old with new
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = -"new_name"."n_rst",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = "old_vat_rst_account_code"
    end if end if;
  // if old has no freight and new has then insert new
  if "old_name"."n_freight" = 0 and "new_name"."n_freight" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'PCBCCH',"new_name"."d_inv_date",-"new_name"."n_freight","new_cust_account_code" ) 
  end if;
  //if old has FREIGHT and new has not then delete old
  if "old_name"."n_freight" <> 0 then
    if "new_name"."n_freight" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'PCBCCH'
    else
      // if old and new both have st then update old with new
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = -"new_name"."n_freight",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'PCBCCH'
    end if end if;
  // if old has no lbt and new has then insert new
  if "old_name"."n_lbt_amt" = 0 and "new_name"."n_lbt_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-LBTCH',"new_name"."d_inv_date","new_name"."n_lbt_amt","new_cust_account_code" ) 
  end if;
  //if old has lbt and new has not then delete old
  if "old_name"."n_lbt_amt" <> 0 then
    if "new_name"."n_lbt_amt" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = '-LBTCH'
    else
      // if old and new both have st then update old with new
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = "new_name"."n_lbt_amt",
        "c_opp_act_code" = "new_name"."c_credit_act"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = '-LBTCH'
    end if end if;
  // if old has no CST and new has then insert new
  if "old_name"."n_cst" = 0 and "new_name"."n_cst" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CST',"new_name"."d_inv_date",
      -"new_name"."n_cst","new_cust_account_code" ) 
  end if;
  //if old has cst and new has not then delete old
  if "old_name"."n_cst" <> 0 then
    if "new_name"."n_cst" = 0 then
      delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'CST'
    else
      // if old and new both have cst then update old with new
      update "ledger"
        set "d_date" = "new_name"."d_inv_date",
        "n_amount" = -"new_name"."n_cst",
        "c_opp_act_code" = "new_cust_account_code"
        where "ledger"."c_prefix" = "old_name"."c_prefix" and "ledger"."n_tran_no" = "old_name"."n_srno" and "ledger"."c_act_code" = 'CST'
    end if end if;
  if "new_name"."n_cgst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_act_code","new_name"."d_inv_date",
      -"new_name"."n_cgst_amt","new_cust_account_code" ) 
  end if;
  if "new_name"."n_sgst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_act_code","new_name"."d_inv_date",
      -"new_name"."n_sgst_amt","new_cust_account_code" ) 
  end if;
  if "new_name"."n_igst_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_act_code","new_name"."d_inv_date",
      -"new_name"."n_igst_amt","new_cust_account_code" ) 
  end if;
  if "new_name"."n_tcs_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_tcs_act_code","new_name"."d_inv_date",
      -"new_name"."n_tcs_amt","new_cust_account_code" ) 
  end if;
  ------------SEZ
  if "new_name"."n_igst_amt" <> 0 and "new_name"."n_to_gst_type" = 7 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_rev_act_code","new_name"."d_inv_date",
      "new_name"."n_igst_amt","new_cust_account_code" ) 
  end if;
  --------------
  if "isnull"("new_name"."n_gst_cess_amt",0) <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_gst_cess_act_code","new_name"."d_inv_date",
      -"isnull"("new_name"."n_gst_cess_amt",0),"new_cust_account_code" ) 
  end if;
  if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and "trim"("isnull"("new_name"."c_from_gst_no",'')) <> "trim"("isnull"("new_name"."c_to_gst_no",'')) then
    insert into "gst_ledger_mst"( "n_srno","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note","n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
      "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","c_eway_bill_no","c_port_code","n_cancel_flag" ) values
      ( "new_name"."n_srno","new_name"."d_inv_date","new_name"."c_cust_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
      '','',0,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","isnull"("new_name"."n_gst_cess_amt",0),
      0,"new_name"."n_disc_amt"+"new_name"."n_fix_discount",("new_name"."n_taxable_amt"),"new_name"."n_total","new_name"."d_ldate","new_name"."t_ltime","new_name"."c_user","new_name"."c_state_code","new_name"."n_service_chg","new_name"."n_flag",0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."c_eway_bill_no","new_name"."c_port_code","new_name"."n_cancel_flag" ) 
  end if;
  // update the old remark with new remark
  update "remarks" set "c_remark" = "remark" where "remarks"."c_prefix" = "old_name"."c_prefix" and "remarks"."n_tran_id" = "old_name"."n_srno";
  // old old has not any credit note settled and new has settled the 
  //credit note then update crnt_mst with invoice number and prefix
  if "old_name"."n_crnt_no" = 0 then
    if "new_name"."n_crnt_no" <> 0 then
      if "new_name"."c_crnt_prefix" = 'MD' then
        update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where "mdadj_mst"."c_prefix" = "new_name"."c_crnt_prefix"
          and "mdadj_mst"."n_srno" = "new_name"."n_crnt_no"
          and "mdadj_mst"."c_inv_recp_prefix" is null
          and "mdadj_mst"."n_inv_recp_no" = 0
      else
        update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "crnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where "crnt_mst"."c_prefix" = "new_name"."c_crnt_prefix"
          and "crnt_mst"."n_srno" = "new_name"."n_crnt_no"
          and "crnt_mst"."c_inv_recp_prefix" is null
          and "crnt_mst"."n_inv_recp_no" = 0
      end if;
      //if crdit note is already settled then gives message
      if sqlstate = '02000' then
        raiserror 18000 "Credit note is already settlled. You cannot Save this Invoice. "
      end if end if end if;
  if "old_name"."n_crnt_repl_no" = 0 then
    if "new_name"."n_crnt_repl_no" <> 0 then
      if "new_name"."c_crnt_repl_prefix" = 'MD' then
        update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where("mdadj_mst"."c_prefix" = "new_name"."c_crnt_repl_prefix"
          and "mdadj_mst"."n_srno" = "new_name"."n_crnt_repl_no")
          and "mdadj_mst"."c_inv_recp_prefix" is null
          and "mdadj_mst"."n_inv_recp_no" = 0
      else
        update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "crnt_repl_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where("crnt_repl_mst"."c_prefix" = "new_name"."c_crnt_repl_prefix"
          and "crnt_repl_mst"."n_srno" = "new_name"."n_crnt_repl_no")
          and "crnt_repl_mst"."c_inv_recp_prefix" is null
          and "crnt_repl_mst"."n_inv_recp_no" = 0
      end if;
      //if crdit note is already settled then gives message
      if sqlstate = '02000' then
        raiserror 18000 "Replacement Credit note is already settlled. You cannot Save this Invoice. "
      end if end if end if;
  //if old has settled credit note and new has not then update crnt_mst
  // and unset the settled credit note with prefix value null and
  //invoice number 0
  if "old_name"."n_crnt_no" <> 0 then
    if "new_name"."n_crnt_no" = 0 then
      if "old_name"."c_crnt_prefix" = 'MD' then
        update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
          "mdadj_mst"."n_inv_recp_no" = 0
          where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_prefix"
          and "mdadj_mst"."n_srno" = "old_name"."n_crnt_no"
          and "mdadj_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
          and "mdadj_mst"."n_inv_recp_no" = "old_name"."n_srno"
      else
        update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = null,
          "crnt_mst"."n_inv_recp_no" = 0
          where "crnt_mst"."c_prefix" = "old_name"."c_crnt_prefix"
          and "crnt_mst"."n_srno" = "old_name"."n_crnt_no"
          and "crnt_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
          and "crnt_mst"."n_inv_recp_no" = "old_name"."n_srno"
      end if;
      if sqlstate = '02000' then
        raiserror 18000 "Cannot update the credit note. You cannot Save this Invoice. "
      // if both old and new has credit note settled
      end if
    else if "old_name"."n_crnt_no" = "new_name"."n_crnt_no" then
        // if old and new credit note numbers are same
        if "old_name"."c_crnt_prefix" = 'MD' then
          update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_prefix"
            and "mdadj_mst"."n_srno" = "old_name"."n_crnt_no"
            and("mdadj_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("mdadj_mst"."n_inv_recp_no" = "old_name"."n_srno")
        else
          update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "crnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "crnt_mst"."c_prefix" = "old_name"."c_crnt_prefix"
            and "crnt_mst"."n_srno" = "old_name"."n_crnt_no"
            and("crnt_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("crnt_mst"."n_inv_recp_no" = "old_name"."n_srno")
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Credit note is already settlled. You cannot Save this Invoice. "
        // if old and new credit note are not same then unsettled old credit note
        end if
      else if "old_name"."c_crnt_prefix" = 'MD' then
          update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
            "mdadj_mst"."n_inv_recp_no" = 0
            where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_prefix"
            and "mdadj_mst"."n_srno" = "old_name"."n_crnt_no"
            and("mdadj_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("mdadj_mst"."n_inv_recp_no" = "old_name"."n_srno")
        else
          update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = null,
            "crnt_mst"."n_inv_recp_no" = 0
            where "crnt_mst"."c_prefix" = "old_name"."c_crnt_prefix"
            and "crnt_mst"."n_srno" = "old_name"."n_crnt_no"
            and("crnt_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("crnt_mst"."n_inv_recp_no" = "old_name"."n_srno")
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Credit note updation error. You cannot Save this Invoice. "
        end if;
        //if old and new credit note are not same then settled new credit note
        if "new_name"."c_crnt_prefix" = 'MD' then
          update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "mdadj_mst"."c_prefix" = "new_name"."c_crnt_prefix"
            and "mdadj_mst"."n_srno" = "new_name"."n_crnt_no"
            and "mdadj_mst"."c_inv_recp_prefix" is null
            and "mdadj_mst"."n_inv_recp_no" = 0
        else
          update "crnt_mst" set "crnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "crnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "crnt_mst"."c_prefix" = "new_name"."c_crnt_prefix"
            and "crnt_mst"."n_srno" = "new_name"."n_crnt_no"
            and "crnt_mst"."c_inv_recp_prefix" is null
            and "crnt_mst"."n_inv_recp_no" = 0
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Credit note updation error. You cannot Save this Invoice. "
        end if end if end if end if;
  if "old_name"."n_crnt_repl_no" <> 0 then
    if "new_name"."n_crnt_repl_no" = 0 then
      if "old_name"."c_crnt_repl_prefix" = 'MD' then
        update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
          "mdadj_mst"."n_inv_recp_no" = 0
          where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_repl_prefix"
          and "mdadj_mst"."n_srno" = "old_name"."n_crnt_repl_no"
          and "mdadj_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
          and "mdadj_mst"."n_inv_recp_no" = "old_name"."n_srno"
      else
        update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = null,
          "crnt_repl_mst"."n_inv_recp_no" = 0
          where "crnt_repl_mst"."c_prefix" = "old_name"."c_crnt_repl_prefix"
          and "crnt_repl_mst"."n_srno" = "old_name"."n_crnt_repl_no"
          and "crnt_repl_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
          and "crnt_repl_mst"."n_inv_recp_no" = "old_name"."n_srno"
      end if;
      if sqlstate = '02000' then
        raiserror 18000 "Cannot update the Replacement credit note. You cannot Save this Invoice. "
      // if both old and new has credit note settled
      end if
    else if "old_name"."n_crnt_repl_no" = "new_name"."n_crnt_repl_no" then
        // if old and new credit note numbers are same
        if "old_name"."c_crnt_repl_prefix" = 'MD' then
          update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_repl_prefix"
            and "mdadj_mst"."n_srno" = "old_name"."n_crnt_repl_no"
            and("mdadj_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("mdadj_mst"."n_inv_recp_no" = "old_name"."n_srno")
        else
          update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "crnt_repl_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "crnt_repl_mst"."c_prefix" = "old_name"."c_crnt_repl_prefix"
            and "crnt_repl_mst"."n_srno" = "old_name"."n_crnt_repl_no"
            and("crnt_repl_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("crnt_repl_mst"."n_inv_recp_no" = "old_name"."n_srno")
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Replacement Credit note is already settlled. You cannot Save this Invoice. "
        // if old and new credit note are not same then unsettled old credit note
        end if
      else if "old_name"."c_crnt_repl_prefix" = 'MD' then
          update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = null,
            "mdadj_mst"."n_inv_recp_no" = 0
            where "mdadj_mst"."c_prefix" = "old_name"."c_crnt_repl_prefix"
            and "mdadj_mst"."n_srno" = "old_name"."n_crnt_repl_no"
            and("mdadj_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("mdadj_mst"."n_inv_recp_no" = "old_name"."n_srno")
        else
          update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = null,
            "crnt_repl_mst"."n_inv_recp_no" = 0
            where "crnt_repl_mst"."c_prefix" = "old_name"."c_crnt_repl_prefix"
            and "crnt_repl_mst"."n_srno" = "old_name"."n_crnt_repl_no"
            and("crnt_repl_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("crnt_repl_mst"."n_inv_recp_no" = "old_name"."n_srno")
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Replacement Credit note updation error. You cannot Save this Invoice. "
        end if;
        //if old and new credit note are not same then settled new credit note
        if "new_name"."c_crnt_repl_prefix" = 'MD' then
          update "mdadj_mst" set "mdadj_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "mdadj_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "mdadj_mst"."c_prefix" = "new_name"."c_crnt_repl_prefix"
            and "mdadj_mst"."n_srno" = "new_name"."n_crnt_repl_no"
            and "mdadj_mst"."c_inv_recp_prefix" is null
            and "mdadj_mst"."n_inv_recp_no" = 0
        else
          update "crnt_repl_mst" set "crnt_repl_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "crnt_repl_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "crnt_repl_mst"."c_prefix" = "new_name"."c_crnt_repl_prefix"
            and "crnt_repl_mst"."n_srno" = "new_name"."n_crnt_repl_no"
            and "crnt_repl_mst"."c_inv_recp_prefix" is null
            and "crnt_repl_mst"."n_inv_recp_no" = 0
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Credit note updation error. You cannot Save this Invoice. "
        end if end if end if end if;
  //if old has not debit note settled and new has debit note settled
  // then set th e new debit note
  if "old_name"."n_dbnt_no" = 0 then
    if "new_name"."n_dbnt_no" <> 0 then
      if "new_name"."c_dbnt_prefix" = 'MB' then
        update "mdadj_dbnt_mst" set "mdadj_dbnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "mdadj_dbnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where "mdadj_dbnt_mst"."c_prefix" = "new_name"."c_dbnt_prefix"
          and "mdadj_dbnt_mst"."n_srno" = "new_name"."n_dbnt_no"
          and "mdadj_dbnt_mst"."c_inv_recp_prefix" is null
          and "mdadj_dbnt_mst"."n_inv_recp_no" = 0
      else
        update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "cust_dbnt"."n_inv_recp_no" = "new_name"."n_srno"
          where "cust_dbnt"."c_prefix" = "new_name"."c_dbnt_prefix"
          and "cust_dbnt"."n_srno" = "new_name"."n_dbnt_no"
          and "cust_dbnt"."c_inv_recp_prefix" is null
          and "cust_dbnt"."n_inv_recp_no" = 0
      end if;
      if sqlstate = '02000' then
        raiserror 18000 "Debit note is already settlled. You cannot Save this Invoice. "
      end if end if end if;
  // if old has debit note settled and new has not any debit note settled
  // then unsettled the debit note
  if "old_name"."n_dbnt_no" <> 0 then
    if "new_name"."n_dbnt_no" = 0 then
      if "old_name"."c_dbnt_prefix" = 'MB' then
        update "mdadj_dbnt_mst"
          set "mdadj_dbnt_mst"."c_inv_recp_prefix" = null,
          "mdadj_dbnt_mst"."n_inv_recp_no" = 0
          where "mdadj_dbnt_mst"."c_prefix" = "old_name"."c_dbnt_prefix"
          and "mdadj_dbnt_mst"."n_srno" = "old_name"."n_dbnt_no"
          and "mdadj_dbnt_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
          and "mdadj_dbnt_mst"."n_inv_recp_no" = "old_name"."n_srno"
      else
        update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = null,
          "cust_dbnt"."n_inv_recp_no" = 0
          where "cust_dbnt"."c_prefix" = "old_name"."c_dbnt_prefix"
          and "cust_dbnt"."n_srno" = "old_name"."n_dbnt_no"
          and "cust_dbnt"."c_inv_recp_prefix" = "old_name"."c_prefix"
          and "cust_dbnt"."n_inv_recp_no" = "old_name"."n_srno"
      end if;
      if sqlstate = '02000' then
        raiserror 18000 "Cannot update the debit note. You cannot Save this Invoice. "
      // if both old and new have debit note settled
      end if
    else if "old_name"."n_dbnt_no" = "new_name"."n_dbnt_no" then
        // if old and new debit note are same then
        if "old_name"."c_dbnt_prefix" = 'MB' then
          update "mdadj_dbnt_mst" set "mdadj_dbnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "mdadj_dbnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "mdadj_dbnt_mst"."c_prefix" = "old_name"."c_dbnt_prefix"
            and "mdadj_dbnt_mst"."n_srno" = "old_name"."n_dbnt_no"
            and("mdadj_dbnt_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("mdadj_dbnt_mst"."n_inv_recp_no" = "old_name"."n_srno")
        else
          update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "cust_dbnt"."n_inv_recp_no" = "new_name"."n_srno"
            where "cust_dbnt"."c_prefix" = "old_name"."c_dbnt_prefix"
            and "cust_dbnt"."n_srno" = "old_name"."n_dbnt_no"
            and("cust_dbnt"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("cust_dbnt"."n_inv_recp_no" = "old_name"."n_srno")
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Debit note is already settlled. You cannot Save this Invoice. "
        // if old and new debit note are not same then unsettled old debit note
        end if
      else if "old_name"."c_dbnt_prefix" = 'MB' then
          update "mdadj_dbnt_mst" set "mdadj_dbnt_mst"."c_inv_recp_prefix" = null,
            "mdadj_dbnt_mst"."n_inv_recp_no" = 0
            where "mdadj_dbnt_mst"."c_prefix" = "old_name"."c_dbnt_prefix"
            and "mdadj_dbnt_mst"."n_srno" = "old_name"."n_dbnt_no"
            and("mdadj_dbnt_mst"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("mdadj_dbnt_mst"."n_inv_recp_no" = "old_name"."n_srno")
        else
          update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = null,
            "cust_dbnt"."n_inv_recp_no" = 0
            where "cust_dbnt"."c_prefix" = "old_name"."c_dbnt_prefix"
            and "cust_dbnt"."n_srno" = "old_name"."n_dbnt_no"
            and("cust_dbnt"."c_inv_recp_prefix" = "old_name"."c_prefix")
            and("cust_dbnt"."n_inv_recp_no" = "old_name"."n_srno")
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Debit note updation error. You cannot Save this Invoice. "
        end if;
        //if old and new are different then settled new debit note
        if "new_name"."c_dbnt_prefix" = 'MB' then
          update "mdadj_dbnt_mst" set "mdadj_dbnt_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "mdadj_dbnt_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "mdadj_dbnt_mst"."c_prefix" = "new_name"."c_dbnt_prefix"
            and "mdadj_dbnt_mst"."n_srno" = "new_name"."n_dbnt_no"
            and "mdadj_dbnt_mst"."c_inv_recp_prefix" is null
            and "mdadj_dbnt_mst"."n_inv_recp_no" = 0
        else
          update "cust_dbnt" set "cust_dbnt"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "cust_dbnt"."n_inv_recp_no" = "new_name"."n_srno"
            where "cust_dbnt"."c_prefix" = "new_name"."c_dbnt_prefix"
            and "cust_dbnt"."n_srno" = "new_name"."n_dbnt_no"
            and "cust_dbnt"."c_inv_recp_prefix" is null
            and "cust_dbnt"."n_inv_recp_no" = 0
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Debit note updation error. You cannot Save this Invoice. "
        end if end if end if end if;
  // if old has not advance note settled and new has advance note then 
  // settled the advance note
  if "old_name"."n_adv_no" = 0 then
    if "new_name"."n_adv_no" <> 0 then
      if "new_name"."c_adv_prefix" = 'MV' then
        update "mdadj_adv_mst"
          set "mdadj_adv_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
          "mdadj_adv_mst"."n_inv_recp_no" = "new_name"."n_srno"
          where "mdadj_adv_mst"."c_prefix" = "new_name"."c_adv_prefix"
          and "mdadj_adv_mst"."n_srno" = "new_name"."n_adv_no"
          and "mdadj_adv_mst"."c_inv_recp_prefix" is null
          and "mdadj_adv_mst"."n_inv_recp_no" = 0
      else
        update "cust_advance" set "cust_advance"."c_inv_prefix" = "new_name"."c_prefix",
          "cust_advance"."n_inv_no" = "new_name"."n_srno"
          where "cust_advance"."c_prefix" = "new_name"."c_adv_prefix"
          and "cust_advance"."n_srno" = "new_name"."n_adv_no"
          and "cust_advance"."c_inv_prefix" is null
          and "cust_advance"."n_inv_no" = 0
      end if;
      if sqlstate = '02000' then
        raiserror 18000 "Advance note is already settlled. You cannot Save this Invoice. "
      end if end if end if;
  //if old has advance note settled and new has not then unsettled the 
  // old advance note
  if "old_name"."n_adv_no" <> 0 then
    if "new_name"."n_adv_no" = 0 then
      if "old_name"."c_adv_prefix" = 'MV' then
        update "mdadj_adv_mst"
          set "mdadj_adv_mst"."c_inv_recp_prefix" = null,
          "mdadj_adv_mst"."n_inv_recp_no" = 0
          where "mdadj_adv_mst"."c_prefix" = "old_name"."c_adv_prefix"
          and "mdadj_adv_mst"."n_srno" = "old_name"."n_adv_no"
          and "mdadj_adv_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
          and "mdadj_adv_mst"."n_inv_recp_no" = "old_name"."n_srno"
      else
        update "cust_advance" set "cust_advance"."c_inv_prefix" = null,
          "cust_advance"."n_inv_no" = 0
          where "cust_advance"."c_prefix" = "old_name"."c_adv_prefix"
          and "cust_advance"."n_srno" = "old_name"."n_adv_no"
          and "cust_advance"."c_inv_prefix" = "old_name"."c_prefix"
          and "cust_advance"."n_inv_no" = "old_name"."n_srno"
      end if;
      if sqlstate = '02000' then
        raiserror 18000 "Cannot update the advance note. You cannot Save this Invoice. "
      // if both new and old have advance note settled 
      // if both advance note are same
      end if
    else if "old_name"."n_adv_no" = "new_name"."n_adv_no" then
        if "old_name"."c_adv_prefix" = 'MV' then
          update "mdadj_adv_mst"
            set "mdadj_adv_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "mdadj_adv_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "mdadj_adv_mst"."c_prefix" = "old_name"."c_adv_prefix"
            and "mdadj_adv_mst"."n_srno" = "old_name"."n_adv_no"
            and "mdadj_adv_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
            and "mdadj_adv_mst"."n_inv_recp_no" = "old_name"."n_srno"
        else
          update "cust_advance" set "cust_advance"."c_inv_prefix" = "new_name"."c_prefix",
            "cust_advance"."n_inv_no" = "new_name"."n_srno"
            where "cust_advance"."c_prefix" = "old_name"."c_adv_prefix"
            and "cust_advance"."n_srno" = "old_name"."n_adv_no"
            and("cust_advance"."c_inv_prefix" = "old_name"."c_prefix")
            and("cust_advance"."n_inv_no" = "old_name"."n_srno")
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Advance note is already settlled. You cannot Save this Invoice. "
        //if both advance note are different then unsettled the old advance note
        end if
      else if "old_name"."c_adv_prefix" = 'MV' then
          update "mdadj_adv_mst"
            set "mdadj_adv_mst"."c_inv_recp_prefix" = null,
            "mdadj_adv_mst"."n_inv_recp_no" = 0
            where "mdadj_adv_mst"."c_prefix" = "old_name"."c_adv_prefix"
            and "mdadj_adv_mst"."n_srno" = "old_name"."n_adv_no"
            and "mdadj_adv_mst"."c_inv_recp_prefix" = "old_name"."c_prefix"
            and "mdadj_adv_mst"."n_inv_recp_no" = "old_name"."n_srno"
        else
          update "cust_advance" set "cust_advance"."c_inv_prefix" = null,
            "cust_advance"."n_inv_no" = 0
            where "cust_advance"."c_prefix" = "old_name"."c_adv_prefix"
            and "cust_advance"."n_srno" = "old_name"."n_adv_no"
            and("cust_advance"."c_inv_prefix" = "old_name"."c_prefix")
            and("cust_advance"."n_inv_no" = "old_name"."n_srno")
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Advance note updation error. You cannot Save this Invoice. "
        end if;
        //if both advance note are different then settled the new advance note
        if "new_name"."c_adv_prefix" = 'MV' then
          update "mdadj_adv_mst"
            set "mdadj_adv_mst"."c_inv_recp_prefix" = "new_name"."c_prefix",
            "mdadj_adv_mst"."n_inv_recp_no" = "new_name"."n_srno"
            where "mdadj_adv_mst"."c_prefix" = "new_name"."c_adv_prefix"
            and "mdadj_adv_mst"."n_srno" = "new_name"."n_adv_no"
            and "mdadj_adv_mst"."c_inv_recp_prefix" is null
            and "mdadj_adv_mst"."n_inv_recp_no" = 0
        else
          update "cust_advance" set "cust_advance"."c_inv_prefix" = "new_name"."c_prefix",
            "cust_advance"."n_inv_no" = "new_name"."n_srno"
            where "cust_advance"."c_prefix" = "new_name"."c_adv_prefix"
            and "cust_advance"."n_srno" = "new_name"."n_adv_no"
            and "cust_advance"."c_inv_prefix" is null
            and "cust_advance"."n_inv_no" = 0
        end if;
        if sqlstate = '02000' then
          raiserror 18000 "Advance note updation error. You cannot Save this Invoice. "
        end if end if end if end if;
  --//store track master updation
  if "old_name"."n_store_track" <> 2 and "new_name"."n_store_track" = 2 and "new_name"."n_approve" = 1 then
    select top 1 "c_code" into "c_phase" from "st_phase_mst" where "n_rack_flag" = 1;
    select top 1 "c_code" into "c_phase" from "st_phase_mst" where "n_rack_flag" = 1;
    insert into "st_track_mst"
      ( "c_br_code",
      "c_doc_no",
      "n_inout","c_phase_code","d_date",
      "c_user","c_system_name","c_system_ip","t_time_in","t_time_out",
      "n_complete","c_cust_code","c_order_id","n_urgent" ) values
      ( '000',
      '000/'+"string"("new_name"."c_year")+'/'+"string"("new_name"."c_prefix")+'/'+"string"("new_name"."n_srno"),
      0,"c_phase","new_name"."d_inv_date",
      "isNull"("new_name"."c_user",'3DS'),null,null,"new_name"."t_ltime",null,
      0,"new_name"."c_cust_code",null,0 ) 
  end if;
  if "new_name"."n_service_chg" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_service_act","new_name"."d_inv_date",
      -"new_name"."n_service_chg","new_cust_account_code" ) 
  end if;
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
    "n_srno1","n_amount","c_cust_code","d_date","d_due_date" ) values( "new_name"."c_year",
    "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
    "new_name"."n_total","new_name"."c_cust_code","new_name"."d_inv_date","new_name"."d_inv_date"+"new_name"."n_cr_days" ) 
end;
CREATE TRIGGER "update_ledger_from_rtn_purchase_det_insert" after insert order 1 on
-----------------------------------------
----------------------------------Purchase det
------Purchase Trigger
"DBA"."rtn_Purchase_det"
referencing new as "new_name"
for each row
begin
  declare "d_def_date" date;
  declare "c_tmp_code" char(6);
  declare @d_sale_rate numeric(14,3);
  declare @year,"cprefix" char(2);
  declare "c_rak" char(6);
  declare "rack_grp_code" char(10);
  declare @pk numeric(18);
  declare @brcode char(6);
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  select "right"("db_name"(),2) into @year;
  --  if len(string(new_name.n_srno)) < 8 then
  --    set @pk = uf_pk(@brcode,@year,'CR',new_name.n_srno,0,'')
  --  else
  set @pk = "new_name"."n_srno";
  set "cprefix" = "uf_get_pk_component"("new_name"."n_srno",3);
  --  end if;
  if "new_name"."n_ret_type" <= 2 then
    select "c_item_code" into "c_tmp_code" from "stock" where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
    if sqlcode = 100 then
      set "d_def_date" = "uf_default_date"();
      insert into "stock"( "c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty","n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty","n_mrp","n_purchase_rate","n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate","d_date","n_ptr","n_st_rate" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_expiry_date",0,0,0,0,0,0,0,0,0,"new_name"."n_mrp","new_name"."n_purchase_rate","new_name"."n_sale_rate",0,0,0,0,"new_name"."n_purchase_rate","d_def_date",0,0 ) ;
      if sqlstate = '02000' then
        raiserror 18000 "Error, Cannot add item in stock table. Please restart the system."
      end if end if end if;
  if "new_name"."n_post" <> 1 then
    return
  end if;
  if("new_name"."n_ret_type" = 1 or "new_name"."n_ret_type" = 2 or "new_name"."n_ret_type" = 5) and "new_name"."n_supp_ret" = 1 then
    select "c_item_code" into "c_tmp_code" from "stock_eb" where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
    if sqlcode = 100 then
      insert into "stock_eb"( "c_item_code","c_batch_no","n_eqty","n_bqty","n_oqty","n_loose_eqty","n_loose_bqty","n_loose_oqty","n_rqty","n_loose_rqty" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no",
        if "new_name"."n_ret_type" = 2 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        if "new_name"."n_ret_type" = 1 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,0,
        if "new_name"."n_ret_type" = 2 then "new_name"."n_loose_qty" else 0 endif,
        if "new_name"."n_ret_type" = 1 then "new_name"."n_loose_qty" else 0 endif,
        0,
        if "new_name"."n_ret_type" = 5 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        if "new_name"."n_ret_type" = 5 then "new_name"."n_loose_qty" else 0 endif ) 
    else
      update "stock_eb"
        set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "new_name"."n_ret_type" = 2 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "new_name"."n_ret_type" = 1 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"+if "new_name"."n_ret_type" = 2 then "new_name"."n_loose_qty" else 0 endif,
        "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"+if "new_name"."n_ret_type" = 1 then "new_name"."n_loose_qty" else 0 endif,
        "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "new_name"."n_ret_type" = 5 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"+if "new_name"."n_ret_type" = 5 then "new_name"."n_loose_qty" else 0 endif
        where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no"
    end if end if;
  if "new_name"."n_ret_type" = 3 or "new_name"."n_ret_type" = 4 then
    update "stock" set "stock"."n_credit_note_qty" = "stock"."n_credit_note_qty"+"new_name"."n_qty",
      "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty",
      "stock"."n_credit_note_scheme_qty" = "stock"."n_credit_note_scheme_qty"+"new_name"."n_scheme_qty",
      "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"new_name"."n_scheme_qty",
      "stock"."t_ltime" = "now"()
      where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
    if sqlstate = '02000' then
      raiserror 18000 "Type of return is Sales Return or Non-moving but specified Item-batch is not found in stock."
    end if;
    if "new_name"."n_enable_supp_stock_sale" = 1 then
      call "usp_stock_supp_rtn_as_pur"("new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_qty","new_name"."n_scheme_qty","new_name"."n_srno","new_name"."d_purchase_date","new_name"."n_mrp","new_name"."n_sale_rate","new_name"."n_purchase_rate","new_name"."d_expiry_date","new_name"."n_seq","isnull"("new_name"."n_branch",0))
    end if;
    insert into "stock_ledger"
      ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
      "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_gst_code","n_service_qty","n_scheme_disc",
      "n_product_value","n_taxable_amt","n_ref_no","d_ref_date","c_ref_no","n_service_chg","n_type_of_ret","n_eb_flag","n_add_cess_amt","n_add_cess","c_prefix" ) values
      ( @pk,"new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_purchase_date",
      "new_name"."n_qty","new_name"."n_scheme_qty",0,"isnull"("new_name"."n_effective_purchase_rate","isnull"("new_name"."n_purchase_rate",0)),"new_name"."n_disc_amt"+"new_name"."n_cash_discount",0,0,
      "new_name"."n_cgst_per","new_name"."n_cgst_amt","new_name"."n_sgst_per","new_name"."n_sgst_amt","new_name"."n_igst_per","new_name"."n_igst_amt","new_name"."n_gst_cess_per","new_name"."n_gst_cess_amt",
      "new_name"."c_hsn_sac_code","new_name"."c_gst_code","new_name"."n_service_qty","new_name"."n_scheme_disc","new_name"."n_product_value","new_name"."n_taxable_amt",
      "new_name"."n_ref_no","new_name"."d_ref_bill_dt","new_name"."c_ref_bill_no","new_name"."n_service_chg","new_name"."n_ret_type",if "new_name"."n_ret_type" = 3 or "new_name"."n_ret_type" = 4 then 0 else 1 endif,
      "new_name"."n_add_cess_amt","new_name"."n_add_cess","cprefix" ) 
  else
    select "c_item_code" into "c_tmp_code" from "stock" where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
    if sqlcode = 100 then
      set "d_def_date" = "uf_default_date"();
      insert into "stock"( "c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty","n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty","n_mrp","n_purchase_rate","n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate","d_date","n_ptr","n_st_rate" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_expiry_date",0,0,0,0,0,0,0,0,0,"new_name"."n_mrp","new_name"."n_purchase_rate","new_name"."n_sale_rate",0,0,0,0,"new_name"."n_purchase_rate","d_def_date",0,0 ) ;
      if sqlstate = '02000' then
        raiserror 18000 "Error, Cannot add item in stock table. Please restart the system."
      end if
    end if
  end if
end;
CREATE TRIGGER "update_ledger_from_rtn_purchase_detail" before update order 1 on
------------------------------------------------------------
----------------------------------
----------------------------------Purchase det
------Purchase Trigger
"DBA"."rtn_Purchase_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "d_def_date" date;
  declare "b_old_stock_effect" decimal(1);
  declare "b_new_stock_effect" decimal(1);
  declare "c_tmp_code" char(6);
  declare @d_sale_rate numeric(14,3);
  declare @year,"cprefix" char(2);
  declare "c_rak" char(6);
  declare "rack_grp_code" char(10);
  declare @brcode char(6);
  declare @pk numeric(18);
  select "right"("db_name"(),2),"System_Parameter"."c_br_code" into @year,@brcode from "System_Parameter";
  if "old_name"."n_post" = 1 and "new_name"."n_post" = 1 then
    return
  end if;
  --  if len(string(new_name.n_srno)) < 8 then
  --    set @pk = uf_pk(@brcode,@year,'CR',new_name.n_srno,0,'')
  --  else
  set @pk = "new_name"."n_srno";
  set "cprefix" = "uf_get_pk_component"("new_name"."n_srno",3);
  --  end if;
  delete from "stock_ledger"
    where "stock_ledger"."n_srno" = @pk
    and "stock_ledger"."n_seq" = "old_name"."n_seq"
    and "stock_ledger"."c_item_code" = "old_name"."c_item_code"
    and "stock_ledger"."c_batch_no" = "old_name"."c_batch_no";
  if("old_name"."n_ret_type" = 1 or "old_name"."n_ret_type" = 2 or "old_name"."n_ret_type" = 5) and "old_name"."n_supp_ret" = 1 and "old_name"."n_post" = 1 then
    update "stock_eb"
      set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"-if "old_name"."n_ret_type" = 2 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_bqty" = "stock_eb"."n_bqty"-if "old_name"."n_ret_type" = 1 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"-if "old_name"."n_ret_type" = 2 then "old_name"."n_loose_qty" else 0 endif,
      "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"-if "old_name"."n_ret_type" = 1 then "old_name"."n_loose_qty" else 0 endif,
      "stock_eb"."n_rqty" = "stock_eb"."n_rqty"-if "old_name"."n_ret_type" = 5 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"-if "old_name"."n_ret_type" = 5 then "old_name"."n_loose_qty" else 0 endif
      where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
  end if;
  if "new_name"."n_post" <> 1 then
    return
  end if;
  if("new_name"."n_ret_type" = 1 or "new_name"."n_ret_type" = 2 or "old_name"."n_ret_type" = 5) and "new_name"."n_supp_ret" = 1 then
    select "c_item_code" into "c_tmp_code" from "stock_eb" where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
    if sqlcode = 100 then
      insert into "stock_eb"( "c_item_code","c_batch_no","n_eqty","n_bqty","n_oqty","n_loose_eqty","n_loose_bqty","n_loose_oqty","n_rqty","n_loose_rqty" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no",
        if "new_name"."n_ret_type" = 2 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        if "new_name"."n_ret_type" = 1 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,0,
        if "new_name"."n_ret_type" = 2 then "new_name"."n_loose_qty" else 0 endif,
        if "new_name"."n_ret_type" = 1 then "new_name"."n_loose_qty" else 0 endif,
        0,
        if "new_name"."n_ret_type" = 5 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        if "new_name"."n_ret_type" = 5 then "new_name"."n_loose_qty" else 0 endif ) 
    else
      update "stock_eb"
        set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "new_name"."n_ret_type" = 2 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "new_name"."n_ret_type" = 1 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"+if "new_name"."n_ret_type" = 2 then "new_name"."n_loose_qty" else 0 endif,
        "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"+if "new_name"."n_ret_type" = 1 then "new_name"."n_loose_qty" else 0 endif,
        "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "new_name"."n_ret_type" = 5 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"+if "new_name"."n_ret_type" = 5 then "new_name"."n_loose_qty" else 0 endif
        where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no"
    end if end if;
  if("old_name"."n_post"+"new_name"."n_post" > 0) and("new_name"."n_ret_type" = 3 or "new_name"."n_ret_type" = 4) then
    if "old_name"."n_enable_supp_stock_sale" = 1 then
      delete from "invoice_det_stk_sale"
        where "c_item_code" = "old_name"."c_item_code" and "c_batch_no" = "old_name"."c_batch_no" and "n_tran_no" = "old_name"."n_srno" and "n_tran_seq" = "old_name"."n_seq";
      if "new_name"."n_enable_supp_stock_sale" = 1 then
        call "usp_stock_supp_rtn_as_pur"("new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_qty","new_name"."n_scheme_qty","new_name"."n_srno","new_name"."d_purchase_date","new_name"."n_mrp","new_name"."n_sale_rate","new_name"."n_purchase_rate","new_name"."d_expiry_date","new_name"."n_seq","isnull"("new_name"."n_branch",0))
      end if
    end if end if;
  if "old_name"."n_post" = 0 and "new_name"."n_post" = 1 then
    insert into "stock_ledger"
      ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
      "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_gst_code","n_service_qty","n_scheme_disc",
      "n_product_value","n_taxable_amt","n_ref_no","d_ref_date","c_ref_no","n_service_chg","n_type_of_ret","n_eb_flag","n_add_cess_amt","n_add_cess","c_prefix" ) values
      ( @pk,"new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_purchase_date",
      "new_name"."n_qty","new_name"."n_scheme_qty",0,"isnull"("new_name"."n_effective_purchase_rate","isnull"("new_name"."n_purchase_rate",0)),"new_name"."n_disc_amt"+"new_name"."n_cash_discount",0,0,
      "new_name"."n_cgst_per","new_name"."n_cgst_amt","new_name"."n_sgst_per","new_name"."n_sgst_amt","new_name"."n_igst_per","new_name"."n_igst_amt","new_name"."n_gst_cess_per","new_name"."n_gst_cess_amt",
      "new_name"."c_hsn_sac_code","new_name"."c_gst_code","new_name"."n_service_qty","new_name"."n_scheme_disc","new_name"."n_product_value","new_name"."n_taxable_amt",
      "new_name"."n_ref_no","new_name"."d_ref_bill_dt","new_name"."c_ref_bill_no","new_name"."n_service_chg","new_name"."n_ret_type",if "new_name"."n_ret_type" = 3 or "new_name"."n_ret_type" = 4 then 0 else 1 endif,
      "new_name"."n_add_cess_amt","new_name"."n_add_cess","cprefix" ) ;
    if "new_name"."n_ret_type" = 3 or "new_name"."n_ret_type" = 4 then
      update "stock" set "stock"."n_credit_note_qty" = "stock"."n_credit_note_qty"+"new_name"."n_qty",
        "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty",
        "stock"."n_credit_note_scheme_qty" = "stock"."n_credit_note_scheme_qty"+"new_name"."n_scheme_qty",
        "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"new_name"."n_scheme_qty",
        "stock"."t_ltime" = "now"()
        where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
      if sqlstate = '02000' then
        --        raiserror 18000 "Type of return is Sales Return or Non-moving but specified Item-batch is not found in stock."
      end if;
      select "n_sale_rate" into @d_sale_rate from "stock" where "c_item_code" = "new_name"."c_item_code" and "c_batch_no" = "new_name"."c_batch_no";
      //New Entry	
      if "new_name"."n_scheme_qty" <> 0 then
        insert into "scheme_ledger_det"
          ( "c_prefix","c_year","n_srno","c_item_code","c_batch_no","n_seq","d_date_time","c_remark","n_qty","n_rate","n_value","n_qty_disc_flag" ) values
          ( 'RP',@year,"new_name"."n_srno","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_seq","GETDATE"(),'RETURN PURCHASE',"new_name"."n_scheme_qty",@d_sale_rate,(@d_sale_rate*"new_name"."n_scheme_qty"),1 ) ;
        update "scheme_mst" set "n_used_sch_qty" = "n_used_sch_qty"-"new_name"."n_scheme_qty" where "c_item_code" = "new_name"."c_item_code" and "c_batch_no" = "new_name"."c_batch_no"
      end if;
      if "new_name"."n_scheme_disc" <> 0 then
        insert into "scheme_ledger_det"
          ( "c_prefix","c_year","n_srno","c_item_code","c_batch_no","n_seq","d_date_time","c_remark","n_qty","n_rate","n_value","n_qty_disc_flag" ) values
          ( 'RP',@year,"new_name"."n_srno","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_seq","GETDATE"(),'RETURN PURCHASE',1,"new_name"."n_scheme_disc","new_name"."n_scheme_disc",2 ) 
      end if end if;
    select "c_item_code" into "c_tmp_code" from "stock" where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
    if sqlcode = 100 then
      set "d_def_date" = "uf_default_date"();
      insert into "stock"( "c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty","n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty","n_mrp","n_purchase_rate","n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate","d_date","n_ptr" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_expiry_date",0,0,0,0,0,0,0,0,0,"new_name"."n_mrp","new_name"."n_purchase_rate","new_name"."n_sale_rate",0,0,0,0,"new_name"."n_purchase_rate","d_def_date",0 ) ;
      if sqlstate = '02000' then
        raiserror 18000 "Error, Cannot add item in stock table. Please restart the system."
      end if end if;
    ---end if; -----EOF if new_name.n_ret_type = 3 or new_name.n_ret_type = 4 then
    return
  end if;
  if("old_name"."n_ret_type" = 3 or "old_name"."n_ret_type" = 4) then
    set "b_old_stock_effect" = 1
  else
    set "b_old_stock_effect" = 0
  end if;
  if("new_name"."n_ret_type" = 3 or "new_name"."n_ret_type" = 4) then
    set "b_new_stock_effect" = 1
  else
    set "b_new_stock_effect" = 0
  end if;
  if "b_old_stock_effect" = 0 and "b_new_stock_effect" = 1 then
    update "stock" set "stock"."n_credit_note_qty" = "stock"."n_credit_note_qty"+"new_name"."n_qty",
      "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty",
      "stock"."n_credit_note_scheme_qty" = "stock"."n_credit_note_scheme_qty"+"new_name"."n_scheme_qty",
      "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"new_name"."n_scheme_qty",
      "stock"."t_ltime" = "now"()
      where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
    if sqlstate = '02000' then
      --      raiserror 18000 "Specified Item-batch is not found in stock."
    end if end if;
  if "b_old_stock_effect" = 1 then
    if "b_new_stock_effect" = 0 then
      update "stock" set "stock"."n_credit_note_qty" = "stock"."n_credit_note_qty"-"old_name"."n_qty",
        "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty"-"old_name"."n_scheme_qty",
        "stock"."n_credit_note_scheme_qty" = "stock"."n_credit_note_scheme_qty"-"old_name"."n_scheme_qty",
        "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"old_name"."n_scheme_qty",
        "stock"."t_ltime" = "now"()
        where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
      if sqlstate = '02000' then
        --        raiserror 18000 "Specified Item-batch is not found in stock."
      end if
    else update "stock" set "stock"."n_credit_note_qty" = "stock"."n_credit_note_qty"+"new_name"."n_qty",
        "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty",
        "stock"."n_credit_note_scheme_qty" = "stock"."n_credit_note_scheme_qty"+"new_name"."n_scheme_qty",
        "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"new_name"."n_scheme_qty",
        "stock"."t_ltime" = "now"()
        where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
      if sqlstate = '02000' then
        --        raiserror 18000 "Specified Item-batch is not found in stock."
      end if;
      update "stock" set "stock"."n_credit_note_qty" = "stock"."n_credit_note_qty"-"old_name"."n_qty",
        "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty"-"old_name"."n_scheme_qty",
        "stock"."n_credit_note_scheme_qty" = "stock"."n_credit_note_scheme_qty"-"old_name"."n_scheme_qty",
        "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"old_name"."n_scheme_qty",
        "stock"."t_ltime" = "now"()
        where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
      if sqlstate = '02000' then
        --        raiserror 18000 "Specified Item-batch is not found in stock."
      end if end if end if; ----------EOF if b_old_stock_effect = 1 then  
  --  if new_name.n_ret_type = 1 or new_name.n_ret_type = 2 then
  select "c_item_code" into "c_tmp_code" from "stock" where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
  if sqlcode = 100 then
    set "d_def_date" = "uf_default_date"();
    insert into "stock"( "c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty","n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty","n_mrp","n_purchase_rate","n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate","d_date","n_ptr" ) values
      ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_expiry_date",0,0,0,0,0,0,0,0,0,"new_name"."n_mrp","new_name"."n_purchase_rate","new_name"."n_sale_rate",0,0,0,0,"new_name"."n_purchase_rate","d_def_date",0 ) ;
    if sqlstate = '02000' then
      raiserror 18000 "Error, Cannot add item in stock table. Please restart the system."
    --  end if
    end if
  end if
end;
CREATE TRIGGER "Update_Ledger_From_Supp_Pay" after update order 1
on "DBA".supp_pay
referencing old as old_name new as new_name
for each row
begin
  declare s_old_credit_act_code char(6);
  declare s_new_credit_act_code char(6);
  declare d_old_kasar_amount decimal(14,2);
  declare d_new_kasar_amount decimal(14,2);
  if old_name.c_credit_act_code='CASH' then
    set s_old_credit_act_code='CASH'
  else
    set s_old_credit_act_code='RCPAYM'
  end if
  ;
  if new_name.c_credit_act_code='CASH' then
    set s_new_credit_act_code='CASH'
  else
    set s_new_credit_act_code='RCPAYM'
  end if
  ;
  set d_old_kasar_amount=old_name.n_total-old_name.n_chq_amt;
  set d_new_kasar_amount=new_name.n_total-new_name.n_chq_amt;
  if ifnull(old_name.d_reconcile_date,0,1)=0 and ifnull(new_name.d_reconcile_date,0,1)=1 then
    if new_name.n_return=1 then if d_new_kasar_amount<>0 then
        insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,
          c_opp_act_code) values(new_name.c_prefix,new_name.n_srno,'KASAR',
          new_name.d_reconcile_date,d_new_kasar_amount,
          new_name.c_supp_code)
      end if
      ;
      if new_name.n_total<>0 then
        insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
          new_name.c_prefix,new_name.n_srno,new_name.c_supp_code,new_name.d_reconcile_date,
          -new_name.n_total,s_new_credit_act_code)
      end if
      ;
      if new_name.n_chq_amt<>0 then
        insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
          new_name.c_prefix,new_name.n_srno,s_new_credit_act_code,new_name.d_reconcile_date,
          new_name.n_chq_amt,new_name.c_supp_code)
      end if
      ;
      update remarks set remarks.c_remark=': CHEQUE RETURNED :'
        +remarks.c_remark
        where remarks.c_prefix=new_name.c_prefix
        and remarks.n_tran_id=new_name.n_srno;
      update supp_pay_det set supp_pay_det.n_amount=0
        where supp_pay_det.n_srno=new_name.n_srno
    else
      if new_name.n_chq_amt<>0 then
        insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
          new_name.c_prefix,new_name.n_srno,new_name.c_credit_act_code,new_name.d_reconcile_date,
          -new_name.n_chq_amt,new_name.c_supp_code);
        insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
          new_name.c_prefix,new_name.n_srno,s_new_credit_act_code,new_name.d_reconcile_date,
          new_name.n_chq_amt,new_name.c_credit_act_code)
      end if
    end if
    ;
    update ledger set ledger.c_opp_act_code=new_name.c_credit_act_code where ledger.c_prefix=new_name.c_prefix
      and ledger.n_tran_no=new_name.n_srno and ledger.c_opp_act_code='RCPAYM'
  else
    if d_new_kasar_amount<>0 and d_old_kasar_amount=0 then
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,'KASAR',new_name.d_pay_date,
        -d_new_kasar_amount,new_name.c_supp_code)
    else
      if d_new_kasar_amount=0 and d_old_kasar_amount<>0 then
        delete from ledger where ledger.c_prefix=new_name.c_prefix
          and ledger.n_tran_no=new_name.n_srno
          and ledger.c_act_code='KASAR'
      else
        update Ledger set Ledger.d_date=new_name.d_pay_date,
          Ledger.n_amount=-d_new_kasar_amount,
          Ledger.c_opp_act_code=new_name.c_supp_code
          where(ledger.c_prefix=new_name.c_prefix)
          and(ledger.n_tran_no=new_name.n_srno)
          and(ledger.c_act_code='KASAR')
      end if
    end if
    ;
    if new_name.n_total<>0 and old_name.n_total=0 then
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,new_name.c_supp_code,new_name.d_pay_date,
        new_name.n_total,s_new_credit_act_code)
    else
      if new_name.n_total=0 and old_name.n_total<>0 then
        delete from ledger where(ledger.c_prefix=new_name.c_prefix)
          and(ledger.n_tran_no=new_name.n_srno)
          and(ledger.c_act_code=old_name.c_supp_code)
      else
        update Ledger set Ledger.c_act_code=new_name.c_supp_code,
          Ledger.d_date=new_name.d_pay_date,
          Ledger.n_amount=new_name.n_total,
          Ledger.c_opp_act_code=s_new_credit_act_code
          where(ledger.c_prefix=new_name.c_prefix)
          and(ledger.n_tran_no=new_name.n_srno)
          and(ledger.c_act_code=old_name.c_supp_code)
      end if
    end if
    ;
    if new_name.n_chq_amt<>0 and old_name.n_chq_amt=0 then
      insert into ledger(c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code) values(
        new_name.c_prefix,new_name.n_srno,s_new_credit_act_code,new_name.d_pay_date,
        -new_name.n_chq_amt,new_name.c_supp_code)
    else
      if new_name.n_chq_amt=0 and old_name.n_chq_amt<>0 then
        delete from Ledger where ledger.c_prefix=new_name.c_prefix
          and ledger.n_tran_no=new_name.n_srno
          and ledger.c_act_code=s_old_credit_act_code
      else
        update Ledger set Ledger.c_act_code=s_new_credit_act_code,
          Ledger.d_date=new_name.d_pay_date,
          Ledger.n_amount=-new_name.n_chq_amt,
          Ledger.c_opp_act_code=new_name.c_supp_code
          where(ledger.c_prefix=new_name.c_prefix)
          and ledger.n_tran_no=new_name.n_srno
          and ledger.c_act_code=s_old_credit_act_code
      end if
    end if
    ;
    update remarks set remarks.c_chq_no=new_name.c_chq_no,
      remarks.d_chq_dt=new_name.d_chq_dt,
      remarks.c_remark=new_name.c_remark
      where remarks.c_prefix=new_name.c_prefix
      and remarks.n_tran_id=new_name.n_srno
  end if
end;
CREATE TRIGGER "update_ledger_rtn_purchase_mst" after update order 2 on
--------------------------------
--------------------------------
----------------
---------------------------------------------
"DBA"."rtn_Purchase_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "s_purchase_account_code" char(6);
  declare "d_pur_total" decimal(10,2);
  declare "d_vat_total" decimal(10,2);
  declare "br_sale_purchae_bal" decimal(1);
  declare "d_post_date" date;
  declare @yr char(2);
  declare @brcode char(6);
  declare @traninitial numeric(18);
  declare @trantype numeric(1);
  declare @multval numeric(1);
  declare @reconflag numeric(1);
  declare @prefix_tran_no numeric(18);
  declare @multi_srno numeric(18);
  declare @settled_srno numeric(18);
  declare @invrcptno numeric(18);
  declare @c_year_new,@c_year_old char(2);
  declare @doc_date_new,@doc_date_old date;
  if "old_name"."n_stop_trigger" <> "new_name"."n_stop_trigger" then
    return
  end if;
  set @invrcptno = 0;
  set @reconflag = 0;
  if "new_name"."n_gst_on_postdate" = 1 then
    set "d_post_date" = "isnull"("new_name"."d_poted_date","new_name"."d_purchase_date")
  else
    set "d_post_date" = "new_name"."d_purchase_date"
  end if;
  select "isnull"("n_br_sale_bal",1) into "br_sale_purchae_bal" from "System_Parameter";
  if "old_name"."n_post" = 1 then
    delete from "ledger" where "ledger"."c_prefix" = "old_name"."c_prefix"
      and "ledger"."n_tran_no" = "old_name"."n_srno";
    delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix"
      and "remarks"."n_tran_id" = "old_name"."n_srno";
    delete from "gst_ledger_mst" where "gst_ledger_mst"."n_srno" = "old_name"."n_srno";
    delete from "gst_ledger_mst" where "gst_ledger_mst"."n_srno" = -"old_name"."n_srno"
  end if;
  if "old_name"."n_approve" = 1 and("new_name"."n_approve" = 0 or "new_name"."n_approve" = 2) then
    select top 1 "n_srno" into @multi_srno from "mdadj_det" where "n_doc_no" = "new_name"."n_srno";
    select top 1 "n_srno" into @settled_srno from "invoice_mst" where "n_crnt_no" = @multi_srno;
    if @settled_srno > 0 then
      raiserror 18000 "This Document is already settled in invoice no "
    end if;
    select top 1 "n_srno" into @settled_srno from "DBA"."cust_rec" where "n_crnt_no" = @multi_srno;
    if @settled_srno > 0 then
      raiserror 18000 "This Document is already settled in Customer Receipt"
    end if;
    delete from "mdadj_mst" where "n_srno" = @multi_srno;
    delete from "mdadj_det" where "n_srno" = @multi_srno
  end if;
  if "new_name"."n_post" <> 1 then
    return
  end if;
  if "new_name"."n_approve" <> 1 then
    return
  end if;
  if "new_name"."n_vaton" = 0 then
    set "d_vat_total" = 0
  else
    set "d_vat_total" = "new_name"."n_st_total"+"new_name"."n_dif_vat"-"new_name"."n_crnt_vat_amt"+"new_name"."n_dbnt_vat_amt"
  end if;
  if "new_name"."n_vaton" = 0 then
    set "d_pur_total" = "new_name"."n_total"-"isnull"("new_name"."n_service_chg",0)
  else
    set "d_pur_total" = "new_name"."n_total"-("d_vat_total"+"new_name"."n_cess")-"new_name"."n_othercharge"-"isnull"("new_name"."n_service_chg",0)-"new_name"."n_add_cess_amt"
  end if;
  if "new_name"."n_head_office" = 0 then
    set "s_purchase_account_code" = "new_name"."c_opp_act_code"
  else
    set "s_purchase_account_code" = "new_name"."c_opp_act_code"
  end if;
  //Supplier posting 
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_supp_code","d_post_date",-"new_name"."n_total",
    "s_purchase_account_code" ) ;
  --  if new_name.n_scheme_discount <> 0 then
  --    insert into ledger( c_prefix,n_tran_no,c_act_code,d_date,n_amount,c_opp_act_code ) values
  --      ( new_name.c_prefix,new_name.n_srno,'SCHMR',d_post_date,-new_name.n_scheme_discount,s_purchase_account_code ) 
  --  end if;
  if "new_name"."n_discount_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'DISCR',"d_post_date",-"new_name"."n_discount_amt","s_purchase_account_code" ) 
  end if;
  if "new_name"."n_crnt_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'DBNTR',"d_post_date",-"new_name"."n_crnt_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_dbnt_amt" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CRNTR',"d_post_date","new_name"."n_dbnt_amt","new_name"."c_supp_code" ) 
  end if;
  if "d_vat_total" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'VAT',"d_post_date","d_vat_total","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_cess" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'CESSPY',"d_post_date","new_name"."n_cess","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_othercharge" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'KASAR',"d_post_date","new_name"."n_othercharge","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_act_repl_value" = 1 and "new_name"."n_repl_value" <> 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-RPLPR',"d_post_date","new_name"."n_repl_value",'-CLAIM' ) ;
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno",'-CLAIM',"d_post_date",-"new_name"."n_repl_value",'-RPLPR' ) 
  end if;
  insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","s_purchase_account_code","d_post_date",
    if("new_name"."n_to_gst_type" = 0 or "new_name"."n_to_gst_type" = 8) and "new_name"."n_from_gst_type" <> 0 then "d_pur_total"+"new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"
      +"new_name"."n_discount_amt"
    else "d_pur_total"+"new_name"."n_crnt_amt"-"new_name"."n_dbnt_amt"
      +"new_name"."n_discount_amt"+(if("new_name"."n_to_gst_type" <> 0 and "new_name"."n_to_gst_type" <> 8) and "new_name"."n_from_gst_type" = 0 then 0
      else if("new_name"."n_to_gst_type" = 0 or "new_name"."n_to_gst_type" = 8) and "new_name"."n_from_gst_type" = 0 then-("new_name"."n_cgst_amt"+"new_name"."n_sgst_amt"+"new_name"."n_igst_amt"+"new_name"."n_gst_cess_amt")
        else "new_name"."n_cgst_amt"+"new_name"."n_sgst_amt"+"new_name"."n_igst_amt"+"new_name"."n_gst_cess_amt"
        endif
      endif)
    endif,"new_name"."c_supp_code" ) ;
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",null,null,'Bill No.: '+"new_name"."c_purchase_bill_no"+' Dated: '+convert(char(10),"new_name"."d_purchase_bill_date",103) ) ;
  delete from "purchase_bill_info" where "c_year" = "old_name"."c_year"
    and "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno";
  insert into "purchase_bill_info"( "c_year","c_prefix","n_srno","c_bill_no","d_bill_date","c_supp_code" ) values
    ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno","new_name"."c_purchase_bill_no","new_name"."d_purchase_bill_date","new_name"."c_supp_code" ) ;
  ----jagamohan
  set @c_year_new = "new_name"."c_year";
  set @doc_date_new = "new_name"."d_purchase_date";
  if @c_year_new is null then
    if "month"(@doc_date_new) <= 3 then
      set @c_year_new = "right"("string"("year"(@doc_date_new)-1),2)
    else
      set @c_year_new = "right"("string"("year"(@doc_date_new)),2)
    end if end if;
  set @c_year_old = "old_name"."c_year";
  set @doc_date_old = "old_name"."d_purchase_date";
  if @c_year_old is null then
    if "month"(@doc_date_old) <= 3 then
      set @c_year_old = "right"("string"("year"(@doc_date_old)-1),2)
    else
      set @c_year_old = "right"("string"("year"(@doc_date_old)),2)
    end if end if;
  delete from "settle_mst_header"
    where "c_year" = @c_year_old
    and "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno";
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
    "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
    "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
    "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
    "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
    "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
    "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."d_purchase_date","new_name"."c_supp_code",null,null,0,"new_name"."n_dis_per","new_name"."n_fix_discount","new_name"."n_othercharge",
    "new_name"."n_total",0,"new_name"."n_scheme_discount",0,null,"new_name"."n_crnt_amt",0,null,"new_name"."n_discount_amt",0,null,0,0,null,0,0,0,0,0,0,0,
    null,0,0,0,"new_name"."c_user",null,null,null,0,0,null,null,
    0,"new_name"."c_post_user","new_name"."c_sys_ip","new_name"."c_computer_name",0,0,"new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no","new_name"."n_cgst_amt","new_name"."n_sgst_amt",
    "new_name"."n_igst_amt","new_name"."n_gst_cess_amt","new_name"."c_state_code","new_name"."c_eway_bill_no","new_name"."d_purchase_bill_date","new_name"."n_to_gst_type","new_name"."n_service_chg","new_name"."n_taxable_amt",null,null,"new_name"."n_add_cess_amt",
    "new_name"."c_remark","new_name"."n_settle_days","new_name"."c_debit_act","new_name"."n_Post","new_name"."n_adj_type","new_name"."n_counter_ret",0,"new_name"."c_post_user",null,9 ) ;
  delete from "settle_mst"
    where "c_year" = @c_year_old
    and "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_year1" = @c_year_old
    and "c_prefix1" = "old_name"."c_prefix"
    and "n_srno1" = "old_name"."n_srno"
    and "n_act_type" = 1;
  if "new_name"."n_approve" = 1 then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( @c_year_new,
      "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."c_prefix","new_name"."n_srno",
      -1*("new_name"."n_total"),"new_name"."c_supp_code","new_name"."d_purchase_date","new_name"."d_purchase_date",1 ) 
  end if;
  -------------
  if("old_name"."n_approve" = 0 or "old_name"."n_approve" = 2) and "new_name"."n_approve" = 1 then
    select "prefix_sr_numbers"."n_sr_number"
      into @prefix_tran_no from "prefix_sr_numbers"
      where "c_trans" = 'MDADJ';
    select "right"("db_name"(),2),"c_br_code" into @yr,@brcode from "System_Parameter";
    set @prefix_tran_no = @prefix_tran_no+1;
    update "prefix_sr_numbers"
      set "prefix_sr_numbers"."n_sr_number" = @prefix_tran_no
      where "c_trans" = 'MDADJ';
    set @prefix_tran_no = "uf_pk"(@brcode,@yr,'MD',@prefix_tran_no,0,'');
    insert into "mdadj_mst"
      ( "c_prefix","n_srno","d_mdadj_date","c_cust_code","n_total","c_inv_recp_prefix","n_inv_recp_no","c_remark","n_adj_type","n_doc_type","c_user","c_ship_code","n_settle_days","d_ldate","t_ltime","c_year","c_act_code" ) values
      ( 'MD',@prefix_tran_no,"uf_default_date"(),"new_name"."c_supp_code","new_name"."n_total",null,0,'RETURN PURCHASE : '+"string"("new_name"."n_srno"),"new_name"."n_adj_type",2,"new_name"."c_user",'',"isnull"("new_name"."n_settle_days",0),"new_name"."d_ldate","new_name"."t_ltime","new_name"."c_year","new_name"."c_opp_act_code" ) ;
    insert into "mdadj_det"
      ( "c_prefix","n_srno","n_doc_type","c_doc_prefix","n_doc_no","n_doc_amt","c_doc_year","c_cust_code","d_date","c_year" ) values
      ( 'MD',@prefix_tran_no,2,"new_name"."c_prefix","new_name"."n_srno","new_name"."n_total","new_name"."c_year","new_name"."c_supp_code","uf_default_date"(),"new_name"."c_year" ) ;
    set @invrcptno = 1
  end if;
  if "new_name"."n_igst_amt" <> 0 and("new_name"."n_from_gst_type" = 0) and @invrcptno = 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_act_code","d_post_date","new_name"."n_igst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_sgst_amt" <> 0 and("new_name"."n_from_gst_type" = 0) and @invrcptno = 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_act_code","d_post_date","new_name"."n_sgst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_cgst_amt" <> 0 and("new_name"."n_from_gst_type" = 0) and @invrcptno = 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_act_code","d_post_date","new_name"."n_cgst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_gst_cess_amt" <> 0 and("new_name"."n_from_gst_type" = 0) and @invrcptno = 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_gst_cess_act_code","d_post_date","new_name"."n_gst_cess_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_add_cess_amt" <> 0 and("new_name"."n_from_gst_type" = 0) and @invrcptno = 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_add_cess_act_code","d_post_date","new_name"."n_add_cess_amt","new_name"."c_supp_code" ) 
  end if;
  //Reverse ledger 
  if "new_name"."n_cgst_amt" <> 0 and("new_name"."n_from_gst_type" = 0 and "new_name"."n_to_gst_type" <> 0 and "new_name"."n_to_gst_type" < 3) and @invrcptno = 0 then
    //Supplier is un Registered/composite and Firm is registered
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_cgst_rev_act_code","d_post_date",-"new_name"."n_cgst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_sgst_amt" <> 0 and("new_name"."n_from_gst_type" = 0 and "new_name"."n_to_gst_type" <> 0 and "new_name"."n_to_gst_type" < 3) and @invrcptno = 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_sgst_rev_act_code","d_post_date",-"new_name"."n_sgst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_igst_amt" <> 0 and("new_name"."n_from_gst_type" = 0 and "new_name"."n_to_gst_type" <> 0 and "new_name"."n_to_gst_type" < 3) and @invrcptno = 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_igst_rev_act_code","d_post_date",-"new_name"."n_igst_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_gst_cess_amt" <> 0 and("new_name"."n_from_gst_type" = 0 and "new_name"."n_to_gst_type" <> 0 and "new_name"."n_to_gst_type" < 3) and @invrcptno = 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_gst_cess_rev_act_code","d_post_date",-"new_name"."n_gst_cess_amt","new_name"."c_supp_code" ) 
  end if;
  if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and "trim"("isnull"("new_name"."c_from_gst_no",'')) <> "trim"("isnull"("new_name"."c_to_gst_no",'')) and @invrcptno = 0 then
    insert into "gst_ledger_mst"( "n_srno","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note","n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
      "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","d_ref_date","c_eway_bill_no","c_port_code","n_cancel_flag","n_add_cess_amt" ) values
      ( "new_name"."n_srno",
      if "new_name"."n_gst_enabled" <> 0 and("new_name"."n_to_gst_type" <> 0 and "new_name"."n_to_gst_type" <> 8) and "new_name"."n_from_gst_type" = 0 then
        "d_post_date"
      else
        "d_post_date"
      endif,"new_name"."c_supp_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
      "new_name"."c_purchase_bill_no",'',@reconflag,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_gst_cess_amt",
      0,"new_name"."n_discount_amt"+"new_name"."n_scheme_discount",("new_name"."n_taxable_amt"),"new_name"."n_total","new_name"."d_ldate","new_name"."t_ltime","new_name"."c_user","new_name"."c_state_code","new_name"."n_service_chg",
      "new_name"."n_flag","isnull"("new_name"."n_discount_amt",0)+"isnull"("new_name"."n_cash_discount",0),"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."d_purchase_bill_date","new_name"."c_eway_bill_no","new_name"."c_port_code","new_name"."n_cancel_flag","new_name"."n_add_cess_amt" ) ;
    if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_to_gst_type" <> 0 and "new_name"."n_from_gst_type" = 0 and "new_name"."n_to_gst_type" < 3 then
      insert into "gst_ledger_mst"( "n_srno","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note","n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
        "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","d_ref_date","c_eway_bill_no","c_port_code","n_cancel_flag","n_add_cess_amt" ) values
        ( -1*"new_name"."n_srno","d_post_date","new_name"."c_supp_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
        "new_name"."c_purchase_bill_no",'',1,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_gst_cess_amt",
        0,"new_name"."n_discount_amt"+"new_name"."n_scheme_discount",("new_name"."n_taxable_amt"),"new_name"."n_total","new_name"."d_ldate","new_name"."t_ltime","new_name"."c_user","new_name"."c_state_code",
        "new_name"."n_service_chg",0,"isnull"("new_name"."n_discount_amt",0)+"isnull"("new_name"."n_cash_discount",0),"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."d_purchase_bill_date","new_name"."c_eway_bill_no","new_name"."c_port_code","new_name"."n_cancel_flag",0 ) 
    end if end if;
  --jagamohan on 03-08-2017
  if "new_name"."n_service_chg" <> 0 and @invrcptno = 0 then
    insert into "ledger"( "c_prefix","n_tran_no","c_act_code","d_date","n_amount","c_opp_act_code" ) values
      ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_service_act","d_post_date","new_name"."n_service_chg","new_name"."c_supp_code" ) 
  end if;
  call "usp_check_update_last_tran_info"(0,"new_name"."c_supp_code",10,"new_name"."c_prefix","new_name"."n_srno","new_name"."d_purchase_date")
end;
CREATE TRIGGER "update_lost_order_master_detail_delete" before delete order 1 on
"DBA"."lost_order_master_detail"
referencing old as "old_name"
for each row
begin
  update "lost_order_master_summary" set "n_qty" = "n_qty"-"old_name"."n_qty" where "c_item_code" = "old_name"."c_item_code" and "n_inv_no" = 0
end;
CREATE TRIGGER "update_lost_order_master_detail_insert" after insert order 1 on
"DBA"."lost_order_master_detail"
referencing new as "new_name"
for each row
begin
  declare @invno,@chk numeric(18);
  declare @d_date date;
  set @chk = 0;
  select "count"(),"max"("d_date") into @chk,@d_date from "lost_order_master_summary"
    where "c_item_code" = "new_name"."c_item_code" and "n_inv_no" = 0;
  if @chk is null then
    set @chk = 0
  end if;
  if @chk = 0 then
    insert into "lost_order_master_summary"( "c_item_code","d_date","n_qty" ) values( "new_name"."c_item_code","new_name"."d_date","new_name"."n_qty" ) 
  else
    if "new_name"."d_date" > @d_date then
      update "lost_order_master_summary" set "n_qty" = "n_qty"+"new_name"."n_qty","d_date" = "new_name"."d_date" where "c_item_code" = "new_name"."c_item_code" and "n_inv_no" = 0
    else
      update "lost_order_master_summary" set "n_qty" = "n_qty"+"new_name"."n_qty" where "c_item_code" = "new_name"."c_item_code" and "n_inv_no" = 0
    end if
  end if
end;
CREATE TRIGGER "update_mdadj_adv_det_det_update" after update order 2 on
"DBA"."mdadj_adv_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @cust_code char(6);
  declare @doc_date_old,@doc_date_new date;
  declare @new_settled_amt numeric(18,2);
  declare @c_sett_prefix_old,@c_sett_prefix_new,@c_doc_prefix_old,@c_doc_prefix_new char(2);
  declare @c_sett_year_old,@c_sett_year_new,@c_doc_year_old,@c_doc_year_new char(2);
  declare @sett_doc_old,@sett_doc_new,@n_doc_old,@n_doc_new numeric(18);
  if "old_name"."n_stop_trigger" <> "new_name"."n_stop_trigger" then
    return
  end if;
  if "old_name"."n_doc_type" <> "new_name"."n_doc_type" or "old_name"."c_doc_prefix" <> "new_name"."c_doc_prefix" or "old_name"."n_doc_no" <> "new_name"."n_doc_no" then
    if "new_name"."n_doc_type" = 0 then
      update "cust_advance" set "cust_advance"."c_inv_prefix" = null,
        "cust_advance"."n_inv_no" = 0
        where("cust_advance"."c_prefix" = "old_name"."c_doc_prefix"
        and "cust_advance"."n_srno" = "old_name"."n_doc_no")
        and "cust_advance"."c_inv_prefix" = "old_name"."c_prefix"
        and "cust_advance"."n_inv_no" = "old_name"."n_srno";
      if "new_name"."n_doc_no" <> 0 then
        update "cust_advance" set "cust_advance"."c_inv_prefix" = "new_name"."c_prefix",
          "cust_advance"."n_inv_no" = "new_name"."n_srno"
          where("cust_advance"."c_prefix" = "new_name"."c_doc_prefix"
          and "cust_advance"."n_srno" = "new_name"."n_doc_no")
          and "cust_advance"."c_inv_prefix" is null
          and "cust_advance"."n_inv_no" = 0;
        //if this credit not is already settled then will give error message 
        if sqlstate = '02000' then
          raiserror 18000 "Advance note is already settlled. You cannot Save this Multi Document Transaction. "
        end if end if end if end if;
  delete from "settle_mst"
    where "n_srno" = "old_name"."n_srno"
    and "c_prefix" = "old_name"."c_prefix"
    and "c_year" = "old_name"."c_year"
    and "n_srno1" = "old_name"."n_doc_no"
    and "c_prefix1" = "old_name"."c_doc_prefix"
    and "c_year1" = "old_name"."c_doc_year";
  set @new_settled_amt = "new_name"."n_doc_amt";
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1","n_srno1",
    "n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values
    ( "new_name"."c_year","new_name"."c_prefix","new_name"."n_srno","new_name"."c_doc_year","new_name"."c_doc_prefix","new_name"."n_doc_no",
    -1*(@new_settled_amt),"new_name"."c_cust_code","new_name"."d_date","new_name"."d_date",1 ) 
end;
CREATE TRIGGER "update_opening_qty" after update of n_opening_qty,
n_opening_scheme_qty order 1 on "DBA".stock
referencing old as old_name new as new_name
for each row
begin
  update stock set n_balance_qty=old_name.n_balance_qty
    -old_name.n_opening_qty-old_name.n_opening_scheme_qty
    +new_name.n_opening_qty+new_name.n_opening_scheme_qty,
    n_sch_bal_qty=old_name.n_sch_bal_qty-old_name.n_opening_scheme_qty
    +new_name.n_opening_scheme_qty
    where c_item_code=new_name.c_item_code
    and c_batch_no=new_name.c_batch_no
end;
CREATE TRIGGER "update_ord_det_from_lost_order_master_delete" before delete order 1 on
"DBA"."lost_order_master"
referencing old as "old_name"
for each row
begin
  if "old_name"."n_ord_srno" > 0 then
    if "old_name"."n_block_stock" = 0 then
      update "ord_det" set "n_issue_qty" = "n_issue_qty"-"old_name"."n_qty"
        where "ord_det"."c_year" = "old_name"."c_ord_year"
        and "ord_det"."c_prefix" = "old_name"."c_ord_prefix"
        and "ord_det"."n_srno" = "old_name"."n_ord_srno"
        and "ord_det"."c_item_code" = "old_name"."c_item_code"
    end if;
    if "old_name"."n_block_stock" > 0 then
      delete from "lost_order_master_detail"
        where "c_ord_year" = "old_name"."c_ord_year"
        and "c_ord_prefix" = "old_name"."c_ord_prefix"
        and "n_ord_srno" = "old_name"."n_ord_srno"
        and "c_item_code" = "old_name"."c_item_code"
        and "n_inv_no" = 0
    end if
  end if
end;
CREATE TRIGGER "update_ord_det_from_lost_order_master_insert" after insert order 1 on
"DBA"."lost_order_master"
referencing new as "new_name"
for each row
begin
  declare @invno numeric(18);
  if "new_name"."n_ord_srno" > 0 then
    select "n_invno" into @invno from "ord_mst" where "n_srno" = "new_name"."n_ord_srno";
    if @invno is null then
      set @invno = 0
    end if;
    if "new_name"."n_block_stock" > 0 and @invno <= 0 then
      insert into "lost_order_master_detail"
        ( "c_item_code","d_date","n_qty","c_ord_year","c_ord_prefix","n_ord_srno" ) values
        ( "new_name"."c_item_code","new_name"."d_date","new_name"."n_qty","new_name"."c_ord_year","new_name"."c_ord_prefix","new_name"."n_ord_srno" ) ;
      return
    --        end if
    end if;
    update "ord_det" set "n_issue_qty" = "n_issue_qty"+"new_name"."n_qty"
      where "ord_det"."c_year" = "new_name"."c_ord_year"
      and "ord_det"."c_prefix" = "new_name"."c_ord_prefix"
      and "ord_det"."n_srno" = "new_name"."n_ord_srno"
      and "ord_det"."c_item_code" = "new_name"."c_item_code"
  end if
end;
CREATE TRIGGER "update_ord_det_from_lost_order_master_update" after update order 2 on
"DBA"."lost_order_master"
referencing old as "old_name" new as "new_name"
for each row
begin
  if "old_name"."n_ord_srno" > 0 then
    update "ord_det" set "n_issue_qty" = "n_issue_qty"-"old_name"."n_qty"
      where "ord_det"."c_year" = "old_name"."c_ord_year"
      and "ord_det"."c_prefix" = "old_name"."c_ord_prefix"
      and "ord_det"."n_srno" = "old_name"."n_ord_srno"
      and "ord_det"."c_item_code" = "old_name"."c_item_code"
      and "ord_det"."n_issue_qty" > 0
      and "ord_det"."n_block_stock" = 0
  end if;
  if "new_name"."n_ord_srno" > 0 then
    update "ord_det" set "n_issue_qty" = "n_issue_qty"+"new_name"."n_qty"
      where "ord_det"."c_year" = "new_name"."c_ord_year"
      and "ord_det"."c_prefix" = "new_name"."c_ord_prefix"
      and "ord_det"."n_srno" = "new_name"."n_ord_srno"
      and "ord_det"."c_item_code" = "new_name"."c_item_code"
      and "ord_det"."n_block_stock" = 0
  end if
end;
CREATE TRIGGER "update_order_ledger_from_order_cancel_delete" AFTER DELETE
ORDER 1 ON "DBA"."order_cancel"
REFERENCING OLD AS old_name
FOR EACH ROW 
BEGIN
    if old_name.n_slab_no = 1 then 
        update  order_ledger 
            set n_cancel_o1 = n_cancel_o1 - old_name.n_qty 
          where order_ledger.c_year = old_name.c_year and 
                order_ledger.n_srno = old_name.n_srno and 
                order_ledger.n_seq  = old_name.n_seq;
    end if;
    if old_name.n_slab_no = 2 then 
        update  order_ledger 
            set n_cancel_o2 = n_cancel_o2 - old_name.n_qty 
          where order_ledger.c_year = old_name.c_year and 
                order_ledger.n_srno = old_name.n_srno and 
                order_ledger.n_seq  = old_name.n_seq;
    end if;
    if old_name.n_slab_no = 3 then 
        update  order_ledger 
            set n_cancel_o3 = n_cancel_o3 - old_name.n_qty 
          where order_ledger.c_year = old_name.c_year and 
                order_ledger.n_srno = old_name.n_srno and 
                order_ledger.n_seq  = old_name.n_seq;
    end if;
    if old_name.n_slab_no = 4 then 
        update  order_ledger 
            set n_cancel_o4 = n_cancel_o4 - old_name.n_qty 
          where order_ledger.c_year = old_name.c_year and 
                order_ledger.n_srno = old_name.n_srno and 
                order_ledger.n_seq  = old_name.n_seq;
    end if;
END;
CREATE TRIGGER "update_order_ledger_from_order_cancel_insert" AFTER INSERT
ORDER 1 ON "DBA"."order_cancel"
REFERENCING NEW AS new_name
FOR EACH ROW 
BEGIN
    if new_name.n_slab_no = 1 then 
        update  order_ledger 
            set n_cancel_o1 = n_cancel_o1 + new_name.n_qty 
          where order_ledger.c_year = new_name.c_year and 
                order_ledger.n_srno = new_name.n_srno and 
                order_ledger.n_seq  = new_name.n_seq;
    end if;
    if new_name.n_slab_no = 2 then 
        update  order_ledger 
            set n_cancel_o2 = n_cancel_o2 + new_name.n_qty 
          where order_ledger.c_year = new_name.c_year and 
                order_ledger.n_srno = new_name.n_srno and 
                order_ledger.n_seq  = new_name.n_seq;
    end if;
    if new_name.n_slab_no = 3 then 
        update  order_ledger 
            set n_cancel_o3 = n_cancel_o3 + new_name.n_qty 
          where order_ledger.c_year = new_name.c_year and 
                order_ledger.n_srno = new_name.n_srno and 
                order_ledger.n_seq  = new_name.n_seq;
    end if;
    if new_name.n_slab_no = 4 then 
        update  order_ledger 
            set n_cancel_o4 = n_cancel_o4 + new_name.n_qty 
          where order_ledger.c_year = new_name.c_year and 
                order_ledger.n_srno = new_name.n_srno and 
                order_ledger.n_seq  = new_name.n_seq;
    end if;
END;
CREATE TRIGGER "update_order_ledger_from_order_cancel_update" AFTER update 
ORDER 1 ON "DBA"."order_cancel"
REFERENCING OLD AS old_name
FOR EACH ROW 
BEGIN
    if old_name.n_slab_no = 1 then 
        update  order_ledger 
            set n_cancel_o1 = n_cancel_o1 - old_name.n_qty 
          where order_ledger.c_year = old_name.c_year and 
                order_ledger.n_srno = old_name.n_srno and 
                order_ledger.n_seq  = old_name.n_seq;
    end if;
    if old_name.n_slab_no = 2 then 
        update  order_ledger 
            set n_cancel_o2 = n_cancel_o2 - old_name.n_qty 
          where order_ledger.c_year = old_name.c_year and 
                order_ledger.n_srno = old_name.n_srno and 
                order_ledger.n_seq  = old_name.n_seq;
    end if;
    if old_name.n_slab_no = 3 then 
        update  order_ledger 
            set n_cancel_o3 = n_cancel_o3 - old_name.n_qty 
          where order_ledger.c_year = old_name.c_year and 
                order_ledger.n_srno = old_name.n_srno and 
                order_ledger.n_seq  = old_name.n_seq;
    end if;
    if old_name.n_slab_no = 4 then 
        update  order_ledger 
            set n_cancel_o4 = n_cancel_o4 - old_name.n_qty 
          where order_ledger.c_year = old_name.c_year and 
                order_ledger.n_srno = old_name.n_srno and 
                order_ledger.n_seq  = old_name.n_seq;
    end if;
    if new_name.n_slab_no = 1 then 
        update  order_ledger 
            set n_cancel_o1 = n_cancel_o1 + new_name.n_qty 
          where order_ledger.c_year = new_name.c_year and 
                order_ledger.n_srno = new_name.n_srno and 
                order_ledger.n_seq  = new_name.n_seq;
    end if;
    if new_name.n_slab_no = 2 then 
        update  order_ledger 
            set n_cancel_o2 = n_cancel_o2 + new_name.n_qty 
          where order_ledger.c_year = new_name.c_year and 
                order_ledger.n_srno = new_name.n_srno and 
                order_ledger.n_seq  = new_name.n_seq;
    end if;
    if new_name.n_slab_no = 3 then 
        update  order_ledger 
            set n_cancel_o3 = n_cancel_o3 + new_name.n_qty 
          where order_ledger.c_year = new_name.c_year and 
                order_ledger.n_srno = new_name.n_srno and 
                order_ledger.n_seq  = new_name.n_seq;
    end if;
    if new_name.n_slab_no = 4 then 
        update  order_ledger 
            set n_cancel_o4 = n_cancel_o4 + new_name.n_qty 
          where order_ledger.c_year = new_name.c_year and 
                order_ledger.n_srno = new_name.n_srno and 
                order_ledger.n_seq  = new_name.n_seq;
    end if;
END;
CREATE TRIGGER "update_order_ledger_from_purchase_tmp_det_delete" BEFORE DELETE
ORDER 1 ON "DBA"."Purchase_tmp_det"
REFERENCING OLD AS old_name
FOR EACH ROW
BEGIN
  if old_name.c_order_year is not null and old_name.n_order_no > 0 and old_name.n_seq > 0 and old_name.n_order_slab_no > 0 and old_name.n_pur_no = 0 then 
    if old_name.n_order_slab_no = 1 then 
        update  order_ledger 
            set n_transit_o1 = n_transit_o1 - old_name.n_qty 
          where order_ledger.c_year = old_name.c_order_year and 
                order_ledger.n_srno = old_name.n_order_no and 
                order_ledger.n_seq  = old_name.n_order_seq;
    end if;
    if old_name.n_order_slab_no = 2 then 
        update  order_ledger 
            set n_transit_o2 = n_transit_o2 - old_name.n_qty 
          where order_ledger.c_year = old_name.c_order_year and 
                order_ledger.n_srno = old_name.n_order_no and 
                order_ledger.n_seq  = old_name.n_order_seq;
    end if;
    if old_name.n_order_slab_no = 3 then 
        update  order_ledger 
            set n_transit_o3 = n_transit_o3 - old_name.n_qty 
          where order_ledger.c_year = old_name.c_order_year and 
                order_ledger.n_srno = old_name.n_order_no and 
                order_ledger.n_seq  = old_name.n_order_seq;
    end if;
    if old_name.n_order_slab_no = 4 then 
        update  order_ledger 
            set n_transit_o4 = n_transit_o4 - old_name.n_qty 
          where order_ledger.c_year = old_name.c_order_year and 
                order_ledger.n_srno = old_name.n_order_no and 
                order_ledger.n_seq  = old_name.n_order_seq;
    end if;
  end if;
END;
CREATE TRIGGER "update_order_ledger_from_purchase_tmp_det_insert" AFTER INSERT
ORDER 1 ON "DBA"."Purchase_tmp_det"
REFERENCING NEW AS new_name
FOR EACH ROW 
BEGIN
  if new_name.c_order_year is not null and new_name.n_order_no > 0 and new_name.n_seq > 0 and new_name.n_order_slab_no > 0 and new_name.n_pur_no = 0 then 
    if new_name.n_order_slab_no = 1 then 
        update  order_ledger 
            set n_transit_o1 = n_transit_o1 + new_name.n_qty 
          where order_ledger.c_year = new_name.c_order_year and 
                order_ledger.n_srno = new_name.n_order_no and 
                order_ledger.n_seq  = new_name.n_order_seq;
    end if;
    if new_name.n_order_slab_no = 2 then 
        update  order_ledger 
            set n_transit_o2 = n_transit_o2 + new_name.n_qty 
          where order_ledger.c_year = new_name.c_order_year and 
                order_ledger.n_srno = new_name.n_order_no and 
                order_ledger.n_seq  = new_name.n_order_seq;
    end if;
    if new_name.n_order_slab_no = 3 then 
        update  order_ledger 
            set n_transit_o3 = n_transit_o3 + new_name.n_qty 
          where order_ledger.c_year = new_name.c_order_year and 
                order_ledger.n_srno = new_name.n_order_no and 
                order_ledger.n_seq  = new_name.n_order_seq;
    end if;
    if new_name.n_order_slab_no = 4 then 
        update  order_ledger 
            set n_transit_o4 = n_transit_o4 + new_name.n_qty 
          where order_ledger.c_year = new_name.c_order_year and 
                order_ledger.n_srno = new_name.n_order_no and 
                order_ledger.n_seq  = new_name.n_order_seq;
    end if;
  end if;
END;
CREATE TRIGGER "update_order_ledger_from_purchase_tmp_det_update" AFTER UPDATE
ORDER 1 ON "DBA"."Purchase_tmp_det"
REFERENCING OLD AS old_name NEW AS new_name
FOR EACH ROW /* WHEN( search_condition ) */
BEGIN
  if old_name.c_order_year is not null and old_name.n_order_no > 0 and old_name.n_seq > 0 and old_name.n_order_slab_no > 0 and old_name.n_pur_no = 0 then 
    if old_name.n_order_slab_no = 1 then 
        update  order_ledger 
            set n_transit_o1 = n_transit_o1 - old_name.n_qty 
          where order_ledger.c_year = old_name.c_order_year and 
                order_ledger.n_srno = old_name.n_order_no and 
                order_ledger.n_seq  = old_name.n_order_seq;
    end if;
    if old_name.n_order_slab_no = 2 then 
        update  order_ledger 
            set n_transit_o2 = n_transit_o2 - old_name.n_qty 
          where order_ledger.c_year = old_name.c_order_year and 
                order_ledger.n_srno = old_name.n_order_no and 
                order_ledger.n_seq  = old_name.n_order_seq;
    end if;
    if old_name.n_order_slab_no = 3 then 
        update  order_ledger 
            set n_transit_o3 = n_transit_o3 - old_name.n_qty 
          where order_ledger.c_year = old_name.c_order_year and 
                order_ledger.n_srno = old_name.n_order_no and 
                order_ledger.n_seq  = old_name.n_order_seq;
    end if;
    if old_name.n_order_slab_no = 4 then 
        update  order_ledger 
            set n_transit_o4 = n_transit_o4 - old_name.n_qty 
          where order_ledger.c_year = old_name.c_order_year and 
                order_ledger.n_srno = old_name.n_order_no and 
                order_ledger.n_seq  = old_name.n_order_seq;
    end if;
  end if;
  if new_name.c_order_year is not null and new_name.n_order_no > 0 and new_name.n_seq > 0 and new_name.n_order_slab_no > 0 and new_name.n_pur_no = 0 then 
    if new_name.n_order_slab_no = 1 then 
        update  order_ledger 
            set n_transit_o1 = n_transit_o1 + new_name.n_qty 
          where order_ledger.c_year = new_name.c_order_year and 
                order_ledger.n_srno = new_name.n_order_no and 
                order_ledger.n_seq  = new_name.n_order_seq;
    end if;
    if new_name.n_order_slab_no = 2 then 
        update  order_ledger 
            set n_transit_o2 = n_transit_o2 + new_name.n_qty 
          where order_ledger.c_year = new_name.c_order_year and 
                order_ledger.n_srno = new_name.n_order_no and 
                order_ledger.n_seq  = new_name.n_order_seq;
    end if;
    if new_name.n_order_slab_no = 3 then 
        update  order_ledger 
            set n_transit_o3 = n_transit_o3 + new_name.n_qty 
          where order_ledger.c_year = new_name.c_order_year and 
                order_ledger.n_srno = new_name.n_order_no and 
                order_ledger.n_seq  = new_name.n_order_seq;
    end if;
    if new_name.n_order_slab_no = 4 then 
        update  order_ledger 
            set n_transit_o4 = n_transit_o4 + new_name.n_qty 
          where order_ledger.c_year = new_name.c_order_year and 
                order_ledger.n_srno = new_name.n_order_no and 
                order_ledger.n_seq  = new_name.n_order_seq;
    end if;
  end if;
END;
CREATE TRIGGER "update_order_time_slab_deleted"
-----------------------
 after delete order 1 on
"DBA"."order_time_slab"
referencing old as "old_name"
for each row
begin
  declare @countord numeric(2);
  declare @countinv numeric(2);
  select "count"() into @countord from "ord_mst" where "d_date" = "uf_default_date"() and "n_slab_key" = "old_name"."n_srno";
  select "count"() into @countinv from "invoice_time_slab","invoice_mst"
    where "invoice_time_slab"."n_srno" = "invoice_mst"."n_srno" and "invoice_time_slab"."c_prefix" = "invoice_mst"."c_prefix" and "d_inv_date" = "uf_default_date"()
    and "invoice_time_slab"."n_slab_key" = "old_name"."n_srno";
  if @countord > 0 or @countinv > 0 then
    raiserror 18000 "This Key Is Already in Use For The Day"
  end if
end;
CREATE TRIGGER "update_order_time_slab_update" after update order 1 on
"DBA"."order_time_slab"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @countord numeric(2);
  declare @countinv numeric(2);
  select "count"() into @countord from "ord_mst" where "d_date" = "uf_default_date"() and "n_slab_key" = "old_name"."n_srno";
  select "count"() into @countinv from "invoice_time_slab","invoice_mst"
    where "invoice_time_slab"."n_srno" = "invoice_mst"."n_srno" and "invoice_time_slab"."c_prefix" = "invoice_mst"."c_prefix"
    and "invoice_time_slab"."n_slab_key" = "old_name"."n_srno" and "d_inv_date" = "uf_default_date"();
  if @countord > 0 or @countinv > 0 then
    raiserror 18000 "This Key Is Already in Use For The Day"
  end if
end;
CREATE TRIGGER "update_purchase_from_item_receipt_entry"
------------------------------------------------
 after update order 1 on
"DBA"."item_receipt_entry"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @tray_code char(6);
  declare @d_ldate date;
  declare @dt_ltime "datetime";
  declare @gre_prefix char(4);
  declare @gre_year char(2);
  declare @gre_br_code char(6);
  declare @gre_srno numeric(18);
  declare @gre_seq,@gresrno_gen numeric(4);
  declare @supp_code char(6);
  declare @qtb numeric(4);
  if "new_name"."n_type" = "old_name"."n_type" then
    return
  end if;
  set @d_ldate = "DBA"."uf_default_date"();
  set @dt_ltime = cast(@d_ldate+"now"() as "datetime");
  set @gresrno_gen = 0;
  set @gre_prefix = 'GR';
  select top 1 "c_supp_code" into @supp_code from "gate_pass_mst" where "n_srno" = "new_name"."n_gate_pass_no" and "n_cancel_flag" = 0;
  select "n_qty_per_box" into @qtb from "item_mst" where "c_code" = "new_name"."c_item_code";
  --  if new_name.n_type = 1 or new_name.n_type = 3 or new_name.n_type = 4 then
  --   update pur_det set n_post = 2,d_ldate = @d_ldate,t_ltime = @dt_ltime where c_br_code = new_name.c_pur_br_code and c_year = new_name.c_pur_year and c_prefix = new_name.c_pur_prefix and n_srno = new_name.n_pur_srno and n_seq = new_name.n_pur_seq;
  --   update pur_mst set d_ldate = @d_ldate,t_ltime = @dt_ltime where c_br_code = new_name.c_pur_br_code and c_year = new_name.c_pur_year and c_prefix = new_name.c_pur_prefix and n_srno = new_name.n_pur_srno;
  select "max"("goods_rec_det"."n_srno")
    into @gre_srno from "goods_rec_det" join "goods_rec_mst"
      on "goods_rec_det"."n_srno" = "goods_rec_mst"."n_srno"
    where "goods_rec_mst"."n_gate_pass_no" = "new_name"."n_gate_pass_no"
    group by "goods_rec_mst"."n_gate_pass_no";
  if @gre_srno is null then
    set @gre_srno = 0
  end if;
  if @gre_srno = '' then
    set @gre_srno = 0
  end if;
  if @gre_srno = 0 then --//if gre is not generated with respective gatepass no
    set @gre_seq = 1;
    set @gre_srno = "uf_get_new_tran"('GREPU');
    if @gre_srno is null then
      set @gre_srno = 0
    end if;
    if "length"(@gre_srno) = 9 then
      set @gresrno_gen = 1
    end if;
    if "length"(@gre_srno) = 10 then
      if "right"("string"(@gre_srno),1) = 0 then
        set @gresrno_gen = 1
      end if end if;
    if @gresrno_gen = 0 then
      insert into "goods_rec_mst"
        ( "c_prefix","n_srno","d_date","c_supp_code","n_total","c_ref_no","c_ref_prefix","n_ref_no","c_remark","n_shift","n_min_wt","n_max_wt","n_min_inn_wt","n_max_inn_wt","n_min_out_wt","n_max_out_wt","n_cancel_flag","d_ldate","c_user","c_luser",
        "c_computer_name","c_sys_user","c_sys_ip","c_sman_code","n_post","n_gate_pass_no","c_user_2","n_entry_type" ) values
        ( @gre_prefix,@gre_srno,"uf_default_date"(),@supp_code,0,null,null,0,'CREATED FROM LINE ITEM ENTRY',
        0,0,0,0,0,0,0,0,@d_ldate,"new_name"."c_user","new_name"."c_user",null,null,null,null,1,"new_name"."n_gate_pass_no",null,0 ) ;
      insert into "goods_rec_det"
        ( "n_srno","n_seq","c_item_code","c_batch_no","d_exp_dt","n_qty","n_ret_qty","n_loose_qty","n_ret_loose_qty","n_mrp","n_case_type","n_min_wt","n_max_wt","c_note","c_ref_prefix","n_ref_no","n_ref_seq",
        "n_cancel_flag","d_date","d_ldate","n_shift","t_ltime","n_ref_pk","n_entry_type","n_post","c_supp_code","n_gate_pass_no" ) values
        ( @gre_srno,@gre_seq,"new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_expiry_date",
        "new_name"."n_qty",0,0,0,"new_name"."n_mrp",0,0,0,null,null,0,0,0,"uf_default_date"(),"uf_default_date"(),0,@dt_ltime,0,0,1,@supp_code,"new_name"."n_gate_pass_no" ) 
    end if
  else select top 1 "n_seq"
      into @gre_seq from "goods_rec_det"
      where "goods_rec_det"."n_srno" = @gre_srno
      order by "n_seq" desc;
    insert into "goods_rec_det"
      ( "n_srno","n_seq","c_item_code","c_batch_no","d_exp_dt","n_qty","n_ret_qty","n_loose_qty","n_ret_loose_qty","n_mrp","n_case_type","n_min_wt","n_max_wt","c_note","c_ref_prefix","n_ref_no","n_ref_seq",
      "n_cancel_flag","d_date","d_ldate","n_shift","t_ltime","n_ref_pk","n_entry_type","n_post","c_supp_code","n_gate_pass_no" ) values
      ( @gre_srno,@gre_seq+1,"new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_expiry_date",
      "new_name"."n_qty",0,0,0,"new_name"."n_mrp",0,0,0,null,null,0,0,0,"uf_default_date"(),"uf_default_date"(),0,@dt_ltime,0,0,1,@supp_code,"new_name"."n_gate_pass_no" ) 
  --  end if
  end if
end;
CREATE TRIGGER "UPDATE_PWD_HISTORY_FROM_USER_PASS_UPDATE" after update order 1 on
"DBA"."USER_PASS"
referencing old as "OLD_NAME" new as "NEW_NAME"
for each row
begin
  insert into "PWD_HISTORY"( "C_USER_ID","C_USER_PASS","D_LDATE","T_LTIME" ) values
    ( "NEW_NAME"."C_USER_ID","NEW_NAME"."C_USER_PASS","NEW_NAME"."D_LDATE","NEW_NAME"."T_LTIME" ) 
end;
CREATE TRIGGER "update_ref_crnt_repl_issue_mst_insert" after insert order 1 on
------------------------sales invoice_mst insert
--inv insert Start
"DBA"."crnt_repl_issue_mst"
referencing new as "new_name"
for each row
begin
  declare @c_year_new char(2);
  if "new_name"."n_crnt_repl_no" > 0 then
    if "new_name"."c_crnt_repl_prefix" = 'MD' then
      update "mdadj_mst" set "n_inv_recp_no" = "new_name"."n_srno",
        "c_inv_recp_prefix" = "new_name"."c_prefix"
        where "n_srno" = "new_name"."n_crnt_repl_no" and "c_prefix" = "new_name"."c_crnt_repl_prefix"
    end if;
    if "new_name"."c_crnt_repl_prefix" = 'CC' then
      update "crnt_repl_mst" set "n_inv_recp_no" = "new_name"."n_srno",
        "c_inv_recp_prefix" = "new_name"."c_prefix"
        where "n_srno" = "new_name"."n_crnt_repl_no" and "c_prefix" = "new_name"."c_crnt_repl_prefix"
    end if;
    set @c_year_new = "new_name"."c_year";
    if @c_year_new is null then
      if "month"(@doc_date_new) <= 3 then
        set @c_year_new = "right"("string"("year"("new_name"."d_crnt_repl_date")-1),2)
      else
        set @c_year_new = "right"("string"("year"("new_name"."d_crnt_repl_date")),2)
      end if end if;
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( @c_year_new,
      "new_name"."c_prefix","new_name"."n_srno","new_name"."c_repl_year","new_name"."c_crnt_repl_prefix","new_name"."n_crnt_repl_no",
      ("new_name"."n_crnt_repl_amt"),"new_name"."c_cust_code","new_name"."d_crnt_repl_date","new_name"."d_crnt_repl_date",1 ) 
  end if
end;
CREATE TRIGGER "Update_ref_crnt_repl_issue_mst_update" after update order 2 on
-----------sales invoice mst update
--inv insert End
--inv update start
--------------------------
"DBA"."crnt_repl_issue_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @c_year_new char(2);
  if "old_name"."n_crnt_repl_no" > 0 then
    delete from "settle_mst" where "n_srno" = "old_name"."n_srno" and "c_prefix" = "old_name"."c_prefix"
      and "n_srno1" = "old_name"."n_crnt_repl_no" and "c_prefix1" = "old_name"."c_crnt_repl_prefix"
  end if;
  if "new_name"."n_crnt_repl_no" > 0 then
    if "new_name"."c_crnt_repl_prefix" = 'MD' then
      update "mdadj_mst" set "n_inv_recp_no" = "new_name"."n_srno",
        "c_inv_recp_prefix" = "new_name"."c_prefix"
        where "n_srno" = "new_name"."n_crnt_repl_no" and "c_prefix" = "new_name"."c_crnt_repl_prefix"
    end if;
    if "new_name"."c_crnt_repl_prefix" = 'CC' then
      update "crnt_repl_mst" set "n_inv_recp_no" = "new_name"."n_srno",
        "c_inv_recp_prefix" = "new_name"."c_prefix"
        where "n_srno" = "new_name"."n_crnt_repl_no" and "c_prefix" = "new_name"."c_crnt_repl_prefix"
    end if;
    set @c_year_new = "new_name"."c_year";
    if @c_year_new is null then
      if "month"(@doc_date_new) <= 3 then
        set @c_year_new = "right"("string"("year"("new_name"."d_crnt_repl_date")-1),2)
      else
        set @c_year_new = "right"("string"("year"("new_name"."d_crnt_repl_date")),2)
      end if end if;
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( @c_year_new,
      "new_name"."c_prefix","new_name"."n_srno","new_name"."c_repl_year","new_name"."c_crnt_repl_prefix","new_name"."n_crnt_repl_no",
      ("new_name"."n_crnt_repl_amt"),"new_name"."c_cust_code","new_name"."d_crnt_repl_date","new_name"."d_crnt_repl_date",1 ) 
  end if
end;
CREATE TRIGGER "update_ref_from_crnt_repl_issue_mst_delete" before delete order 1 on
--inv update End
--inv Delete Start
"DBA"."crnt_repl_issue_mst"
referencing old as "old_name"
for each row
begin
  if "old_name"."n_crnt_repl_no" > 0 then
    if "old_name"."c_crnt_repl_prefix" = 'MD' then
      update "mdadj_mst" set "n_inv_recp_no" = 0,
        "c_inv_recp_prefix" = null
        where "n_srno" = "old_name"."n_crnt_repl_no" and "c_prefix" = "old_name"."c_crnt_repl_prefix"
    end if;
    if "old_name"."c_crnt_repl_prefix" = 'CC' then
      update "crnt_repl_mst" set "n_inv_recp_no" = 0,
        "c_inv_recp_prefix" = null
        where "n_srno" = "old_name"."n_crnt_repl_no" and "c_prefix" = "old_name"."c_crnt_repl_prefix"
    end if end if;
  delete from "settle_mst" where "n_srno" = "old_name"."n_srno" and "c_prefix" = "old_name"."c_prefix"
    and "n_srno1" = "old_name"."n_crnt_repl_no" and "c_prefix1" = "old_name"."c_crnt_repl_prefix"
end;
CREATE TRIGGER "update_ref_from_repl_issue_mst_det_delete" before delete order 1 on
--inv update End
--inv Delete Start
"DBA"."repl_issue_mst_det"
referencing old as "old_name"
for each row
begin
  update "crnt_repl_issue_mst" set "n_inv_recp_no" = 0,
    "c_inv_recp_prefix" = null
    where "crnt_repl_issue_mst"."n_srno" = "old_name"."n_repl_issue_no"
end;
CREATE TRIGGER "update_ref_repl_issue_mst_det_i"
--------------
 after insert order 1 on
------------------------sales invoice_mst insert
--inv insert Start
"DBA"."repl_issue_mst_det"
referencing new as "new_name"
for each row
begin
  update "crnt_repl_issue_mst" set "n_inv_recp_no" = "new_name"."n_inv_no",
    "c_inv_recp_prefix" = 'CI'
    where "crnt_repl_issue_mst"."n_srno" = "new_name"."n_repl_issue_no"
end;
CREATE TRIGGER "update_release_outtray_pickbackup" before update order 1 on
"DBA"."slip_list_detail_temp"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @docno char(25);
  declare @li_check,@loop_start numeric(8);
  declare @item_code char(6);
  declare @c_prefix char(2);
  declare local temporary table "inv_item"(
    "c_item_code" char(6) not null,
    "c_doc_no" char(25) not null,
    primary key("c_item_code","c_doc_no"),
    ) on commit preserve rows;
  if "old_name"."n_dispatched" = 0 and "new_name"."n_dispatched" = 1 then
    set @c_prefix = "uf_get_pk_component"("new_name"."n_inv_no",3);
    set @docno = '000/'+"right"("string"("uf_get_financial_year"()),2)+'/'+@c_prefix+'/'+"string"("new_name"."n_inv_no");
    insert into "inv_item"( "c_item_code","c_doc_no" ) 
      select "c_item_code",@docno
        from(select distinct "invoice_det"."c_item_code"
            from "invoice_det" join "item_mst" on "invoice_det"."c_item_code" = "item_mst"."c_code"
              join "rack_mst" on "rack_mst"."c_code" = "item_mst"."c_rack_code"
              join "rack_group_mst" on "rack_group_mst"."c_code" = "rack_mst"."c_group"
              join "store_mst" on "store_mst"."c_code" = "rack_group_mst"."c_store_code"
            where "n_srno" = "new_name"."n_inv_no"
            and "n_temp_conversion" = 1) as "tmp_tbl";
    select "count"() into @li_check from "inv_item";
    if @li_check > 0 then
      update "st_pick_backup","inv_item" set "c_out_tray_no" = '000000',"n_carton_no" = cast("right"("string"("new_name"."n_inv_no"),6) as numeric(6))
        where "st_pick_backup"."c_doc_no" = "inv_item"."c_doc_no" and "st_pick_backup"."c_item_code" = "inv_item"."c_item_code"
    end if
  end if
end;
CREATE TRIGGER "update_remark_when_jv_is_deleted" after delete order 3 on
"DBA"."jv_mst"
referencing old as "old_name"
for each row
begin
  delete from "remarks" where "remarks"."c_prefix" = "old_name"."c_prefix" and "remarks"."n_tran_id" = "old_name"."n_srno";
  delete from "gst_ledger_mst"
    where "gst_ledger_mst"."n_srno" = "old_name"."n_srno";
  delete from "gst_ledger_mst"
    where "gst_ledger_mst"."n_srno" = -1*"old_name"."n_srno";
  delete from "gst_ledger_det"
    where "gst_ledger_det"."n_srno" = "old_name"."n_srno";
  delete from "settle_mst_header" where "n_srno" = "old_name"."n_srno" and "c_prefix" = "old_name"."c_prefix" and "c_year" = "old_name"."c_year";
  if "old_name"."n_ref_no_tds" <> 0 and "old_name"."n_total" <> 0 then
    update "sale_till_date" set "n_pur_value" = "n_pur_value"-"old_name"."n_total" where "c_code" = "old_name"."c_tds_act_code";
    update "gstin_wise_sale_total" set "n_pur_value" = "n_pur_value"-"old_name"."n_total" where "c_code" = "old_name"."c_tds_act_gstin"
  end if
end;
CREATE TRIGGER "update_remarks_when_insert_in_jv_mst" after insert order 1 on
"DBA"."jv_mst"
referencing new as "new_name"
for each row
begin
  insert into "remarks"( "c_prefix","n_tran_id","c_chq_no","d_chq_dt","c_remark" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",null,null,"new_name"."c_remark" ) ;
  --------GST
  if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_cess_amt"+"new_name"."n_sgst_amt"+"new_name"."n_cgst_amt"+"new_name"."n_igst_amt" <> 0 then
    insert into "gst_ledger_mst"( "n_srno","n_pk","d_date","c_act_code","c_from_gst_no","n_from_gst_type",
      "c_to_gst_no","c_ref_no","c_note",
      "n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
      "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","d_ref_date" ) values
      ( "new_name"."n_srno",0,if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and "new_name"."n_to_gst_type" = 2 then
        "DATE"("STRING"("YEAR"("DATEADD"("month",1,"isnull"("new_name"."d_jv_date","new_name"."d_ref_date"))))+'-'+"RIGHT"('0'+"STRING"("MONTH"("DATEADD"("month",1,"isnull"("new_name"."d_jv_date","new_name"."d_ref_date")))),2)+'-'+'01')
      else
        "isnull"("new_name"."d_jv_date","new_name"."d_ref_date")
      endif,"new_name"."c_act_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
      "new_name"."c_ref_no","new_name"."c_remark",if "new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 3 then 1 else 0 endif,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_cess_amt",
      0,"new_name"."n_discount","new_name"."n_taxable_amt","new_name"."n_total","new_name"."d_ldate","new_name"."t_ltime","new_name"."c_luser","new_name"."c_state_code","new_name"."n_service_chg","new_name"."n_flag",0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."d_ref_date" ) 
  end if;
  if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and("new_name"."n_to_gst_type" = 2) and "new_name"."n_jv_type" = 1 then --for expense only rcm
    insert into "gst_ledger_mst"( "n_srno","n_pk","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note",
      "n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
      "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","d_ref_date" ) values
      ( -1*"new_name"."n_srno",0,"new_name"."d_jv_date",
      "new_name"."c_act_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
      "new_name"."c_ref_no","new_name"."c_remark",1,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_cess_amt",
      0,"new_name"."n_discount","new_name"."n_taxable_amt","new_name"."n_total","new_name"."d_ldate","new_name"."t_ltime","new_name"."c_luser","new_name"."c_state_code","new_name"."n_service_chg",0,0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."d_ref_date" ) 
  end if;
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
    "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
    "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
    "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
    "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
    "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
    "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type","n_ref_no" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."d_jv_date",null,null,null,"new_name"."n_flag","new_name"."n_jv_type",0,0,"new_name"."n_total",
    0,0,0,null,0,0,null,0,0,null,0,0,null,0,"new_name"."n_approve",0,0,0,0,0,
    null,0,0,0,"new_name"."c_user",null,null,null,0,0,null,null,
    0,null,null,null,0,0,"new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no","new_name"."n_cgst_amt","new_name"."n_sgst_amt",
    "new_name"."n_igst_amt","new_name"."n_cess_amt","new_name"."c_state_code","new_name"."c_ref_no","new_name"."d_ref_date","new_name"."n_to_gst_type","new_name"."n_service_chg","new_name"."n_taxable_amt",null,null,0,
    "new_name"."c_remark",0,null,0,0,0,0,null,"new_name"."c_act_code",10,"new_name"."n_ref_srno" ) 
end;
CREATE TRIGGER "update_rermaks_when_jv_is_updated" after update order 2 on
"DBA"."jv_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @c_year,@c_year_old char(2);
  update "remarks" set "remarks"."c_remark" = "new_name"."c_remark"
    where "remarks"."c_prefix" = "old_name"."c_prefix" and "remarks"."n_tran_id" = "old_name"."n_srno";
  delete from "gst_ledger_mst"
    where "gst_ledger_mst"."n_srno" = "old_name"."n_srno";
  delete from "gst_ledger_mst"
    where "gst_ledger_mst"."n_srno" = -1*"old_name"."n_srno";
  if "old_name"."n_taxable_amt" > 0 and "new_name"."n_taxable_amt" = 0 then
    delete from "gst_ledger_det"
      where "gst_ledger_det"."n_srno" = "old_name"."n_srno"
  end if;
  if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_cess_amt"+"new_name"."n_sgst_amt"+"new_name"."n_cgst_amt"+"new_name"."n_igst_amt" <> 0 then
    insert into "gst_ledger_mst"( "n_srno","n_pk","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note",
      "n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
      "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","d_ref_date" ) values
      ( "new_name"."n_srno",0,if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and "new_name"."n_to_gst_type" = 2 then
        "DATE"("STRING"("YEAR"("DATEADD"("month",1,"isnull"("new_name"."d_jv_date","new_name"."d_ref_date"))))+'-'+"RIGHT"('0'+"STRING"("MONTH"("DATEADD"("month",1,"isnull"("new_name"."d_jv_date","new_name"."d_ref_date")))),2)+'-'+'01')
      else
        "new_name"."d_jv_date"
      endif,"new_name"."c_act_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
      "new_name"."c_ref_no","new_name"."c_remark",if "new_name"."n_to_gst_type" = 2 or "new_name"."n_to_gst_type" = 3 then 1 else 0 endif,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_cess_amt",
      0,"new_name"."n_discount","new_name"."n_taxable_amt","new_name"."n_total","new_name"."d_ldate","new_name"."t_ltime","new_name"."c_luser","new_name"."c_state_code","new_name"."n_service_chg","new_name"."n_flag",0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."d_ref_date" ) 
  end if;
  if "new_name"."n_gst_enabled" <> 0 and "new_name"."n_from_gst_type" = 0 and("new_name"."n_to_gst_type" = 2) and "new_name"."n_jv_type" = 1 then
    insert into "gst_ledger_mst"( "n_srno","n_pk","d_date","c_act_code","c_from_gst_no","n_from_gst_type","c_to_gst_no","c_ref_no","c_note",
      "n_gst_recon_flag","n_cgst_amt","n_sgst_amt","n_igst_amt","n_gst_cess_amt",
      "n_amount","n_discount","n_taxable_amt","n_total","d_ldate","t_ltime","c_luser","c_state_code","n_service_chg","n_flag","n_cash_discount","n_to_gst_type","c_prefix","d_ref_date" ) values
      ( -1*"new_name"."n_srno",0,"new_name"."d_jv_date",
      "new_name"."c_act_code","new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no",
      "new_name"."c_ref_no","new_name"."c_remark",1,"new_name"."n_cgst_amt","new_name"."n_sgst_amt","new_name"."n_igst_amt","new_name"."n_cess_amt",
      0,"new_name"."n_discount","new_name"."n_taxable_amt","new_name"."n_total","new_name"."d_ldate","new_name"."t_ltime","new_name"."c_luser","new_name"."c_state_code","new_name"."n_service_chg",0,0,"new_name"."n_to_gst_type","new_name"."c_prefix","new_name"."d_ref_date" ) 
  end if;
  set @c_year = "new_name"."c_year";
  if @c_year is null then
    if "month"("new_name"."d_jv_date") <= 3 then
      set @c_year = "right"("string"("year"("new_name"."d_jv_date")-1),2)
    else
      set @c_year = "right"("string"("year"("new_name"."d_jv_date")),2)
    end if end if;
  set @c_year_old = "old_name"."c_year";
  if @c_year_old is null then
    if "month"("old_name"."d_jv_date") <= 3 then
      set @c_year_old = "right"("string"("year"("old_name"."d_jv_date")-1),2)
    else
      set @c_year_old = "right"("string"("year"("old_name"."d_jv_date")),2)
    end if end if;
  delete from "settle_mst_header" where "n_srno" = "old_name"."n_srno" and "c_prefix" = "old_name"."c_prefix" and "c_year" = @c_year_old;
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
    "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
    "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
    "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
    "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
    "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
    "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type","n_ref_no" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",@c_year,"new_name"."d_jv_date",null,null,null,"new_name"."n_flag","new_name"."n_jv_type",0,0,"new_name"."n_total",
    0,0,0,null,0,0,null,0,0,null,0,0,null,0,"new_name"."n_approve",0,0,0,0,0,
    null,0,0,0,"new_name"."c_user",null,null,null,0,0,null,null,
    0,null,null,null,0,0,"new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no","new_name"."n_cgst_amt","new_name"."n_sgst_amt",
    "new_name"."n_igst_amt","new_name"."n_cess_amt","new_name"."c_state_code","new_name"."c_ref_no","new_name"."d_ref_date","new_name"."n_to_gst_type","new_name"."n_service_chg","new_name"."n_taxable_amt",null,null,0,
    "new_name"."c_remark",0,null,0,0,0,0,null,"new_name"."c_act_code",10,"new_name"."n_ref_srno" ) 
end;
CREATE TRIGGER "update_settle_mst" after update order 1 on
"DBA"."settle_cust_rec_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  update "settle_mst" set "n_amount" = "new_name"."n_amount","c_ref_no" = "new_name"."c_ref_no"
    where "c_year" = "old_name"."c_year" and "c_prefix" = "old_name"."c_prefix" and "n_srno" = "old_name"."n_srno"
    and "c_year1" = "old_name"."c_year1" and "c_prefix1" = "old_name"."c_prefix1" and "n_srno1" = "old_name"."n_srno1"
    and "d_date" = "old_name"."d_date" and "c_cust_code" = "old_name"."c_cust_code"
end;
CREATE TRIGGER "update_settle_mst_from_crnt_repl" before update order 1 on
-------------
-----------------------
-----------------------------------------
--------------------------------
---------------------
------------------------credit note update mst
--crnt insert end
--Crnt Update Start
--crnt insert end
--Crnt Update Start
"DBA"."crnt_repl_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @settle_mst_insert numeric(1);
  declare @c_year_old,@c_year_new,@set_crnt_old_yr,@set_crnt_new_yr char(2);
  declare @doc_date_old,@doc_date_new date;
  if "old_name"."n_stop_trigger" <> "new_name"."n_stop_trigger" then
    return
  end if;
  set @c_year_new = "new_name"."c_year";
  set @doc_date_new = "new_name"."d_crnt_repl_date";
  if @c_year_new is null then
    if "length"("new_name"."n_srno") > 9 then
      set @c_year_new = "uf_get_pk_component"("new_name"."n_srno",1)
    else
      if "month"(@doc_date_new) <= 3 then
        set @c_year_new = "right"("string"("year"(@doc_date_new)-1),2)
      else
        set @c_year_new = "right"("string"("year"(@doc_date_new)),2)
      end if end if end if;
  set @c_year_old = "old_name"."c_year";
  set @doc_date_old = "old_name"."d_crnt_repl_date";
  if @c_year_old is null then
    if "length"("old_name"."n_srno") > 9 then
      set @c_year_old = "uf_get_pk_component"("old_name"."n_srno",1)
    else
      if "month"(@doc_date_old) <= 3 then
        set @c_year_old = "right"("string"("year"(@doc_date_old)-1),2)
      else
        set @c_year_old = "right"("string"("year"(@doc_date_old)),2)
      end if end if end if;
  delete from "settle_mst_header"
    where "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno";
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
    "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
    "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
    "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
    "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
    "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
    "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type" ) values
    ( "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."d_crnt_repl_date","new_name"."c_cust_code","new_name"."c_sman_code",null,0,"new_name"."n_discount_per",0,0,"new_name"."n_total",
    0,"new_name"."n_tot_sch_disc",0,null,0,0,null,0,0,null,0,0,null,"new_name"."n_credit_per",0,"new_name"."n_discount",0,0,0,0,
    null,"new_name"."n_prod_val",0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,0,"new_name"."n_approved",null,null,
    0,null,null,null,0,0,"new_name"."c_from_gst_no","new_name"."n_from_gst_type","new_name"."c_to_gst_no","new_name"."n_cgst_amt","new_name"."n_sgst_amt",
    "new_name".
    "n_igst_amt","new_name"."n_gst_cess_amt","new_name"."c_state_code","new_name"."c_eway_bill_no","new_name"."d_eway_date","new_name"."n_to_gst_type",0,"new_name"."n_taxable_amt",null,null,0,
    "new_name"."c_remark","new_name"."n_settle_days","new_name"."c_debit_act","new_name"."n_Post",9,"new_name"."n_counter_ret","new_name"."n_treat_vat","new_name"."c_post_user",null,8 ) ;
  delete from "settle_mst"
    where "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_prefix1" = "old_name"."c_prefix"
    and "n_srno1" = "old_name"."n_srno";
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
    "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( @c_year_new,
    "new_name"."c_prefix","new_name"."n_srno",@c_year_new,"new_name"."c_prefix","new_name"."n_srno",
    -1*("new_name"."n_total"),"new_name"."c_cust_code","new_name"."d_crnt_repl_date","new_name"."d_crnt_repl_date",1 ) ;
  set @set_crnt_old_yr = "uf_get_pk_component"("old_name"."n_ref_srno",1);
  set @set_crnt_new_yr = "uf_get_pk_component"("new_name"."n_ref_srno",1);
  delete from "settle_mst"
    where "c_prefix" = 'CR'
    and "n_srno" = "old_name"."n_ref_srno"
    and "c_prefix1" = "old_name"."c_prefix"
    and "n_srno1" = "old_name"."n_srno";
  if "isnull"("new_name"."n_ref_srno",0) <> 0 and "new_name"."c_ref_prefix" = 'CR' then
    insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
      "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( @set_crnt_new_yr,
      'CR',"new_name"."n_ref_srno",@c_year_new,"new_name"."c_prefix","new_name"."n_srno",
      ("new_name"."n_total"),"new_name"."c_cust_code","new_name"."d_crnt_repl_date","new_name"."d_crnt_repl_date",1 ) 
  end if
end;
CREATE TRIGGER "update_settle_mst_from_cust_advance" before update order 1 on
-------------
-----------------------
-----------------------------------------
--------------------------------
---------------------
------------------------credit note update mst
--crnt insert end
--Crnt Update Start
--crnt insert end
--Crnt Update Start
"DBA"."cust_advance"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @new_c_year,@old_c_year char(2);
  if "old_name"."n_stop_trigger" <> "new_name"."n_stop_trigger" then
    return
  end if;
  delete from "settle_mst"
    where "c_year" = "old_name"."c_year"
    and "c_prefix" = "old_name"."c_prefix"
    and "n_srno" = "old_name"."n_srno"
    and "c_year1" = "old_name"."c_year"
    and "c_prefix1" = "old_name"."c_prefix"
    and "n_srno1" = "old_name"."n_srno";
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
    "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
    "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
    -1*("new_name"."n_total"),"new_name"."c_cust_code","new_name"."d_adv_date","new_name"."d_adv_date",1 ) 
end;
CREATE TRIGGER "update_settle_mst_from_mdadj_adv_mst" before update order 1 on
-------------
-----------------------
-----------------------------------------
--------------------------------
---------------------
------------------------credit note update mst
--crnt insert end
--Crnt Update Start
--crnt insert end
--Crnt Update Start
"DBA"."mdadj_adv_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  if "old_name"."n_stop_trigger" <> "new_name"."n_stop_trigger" then
    return
  end if;
  delete from "settle_mst_header"
    where "n_srno" = "old_name"."n_srno"
    and "c_prefix" = "old_name"."c_prefix"
    and "c_year" = "old_name"."c_year";
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
    "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
    "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
    "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
    "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
    "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
    "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."d_mdadj_date","new_name"."c_cust_code",null,null,0,0,0,0,"new_name"."n_total",
    0,0,0,null,0,0,null,0,0,null,0,0,null,0,0,0,0,0,0,0,
    null,0,0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,0,0,null,null,
    0,null,null,null,0,0,null,0,null,0,0,
    0,0,null,null,null,0,0,0,null,null,0,
    "new_name"."c_remark","new_name"."n_settle_days",null,0,"new_name"."n_adj_type","new_name"."n_doc_type",0,null,
    "new_name"."c_act_code",7 ) ;
  delete from "settle_mst"
    where "n_srno" = "old_name"."n_srno"
    and "c_prefix" = "old_name"."c_prefix"
    and "c_year" = "old_name"."c_year"
    and "n_srno1" = "old_name"."n_srno"
    and "c_prefix1" = "old_name"."c_prefix"
    and "c_year1" = "old_name"."c_year";
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
    "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
    "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
    -1*("new_name"."n_total"),"new_name"."c_cust_code","new_name"."d_mdadj_date","new_name"."d_mdadj_date",1 ) 
end;
CREATE TRIGGER "update_settle_mst_from_mdadj_dbnt_mst" before update order 1 on
-------------
-----------------------
-----------------------------------------
--------------------------------
---------------------
------------------------credit note update mst
--crnt insert end
--Crnt Update Start
--crnt insert end
--Crnt Update Start
"DBA"."mdadj_dbnt_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  if "old_name"."n_stop_trigger" <> "new_name"."n_stop_trigger" then
    return
  end if;
  delete from "settle_mst_header"
    where "n_srno" = "old_name"."n_srno"
    and "c_prefix" = "old_name"."c_prefix"
    and "c_year" = "old_name"."c_year";
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
    "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
    "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
    "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
    "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
    "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
    "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."d_mdadj_dbnt_date","new_name"."c_cust_code",null,null,0,0,0,0,"new_name"."n_total",
    0,0,0,null,0,0,null,0,0,null,0,0,null,0,0,0,0,0,0,0,
    null,0,0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,0,0,null,null,
    0,null,null,null,0,0,null,0,null,0,0,
    0,0,null,null,null,0,0,0,null,null,0,
    "new_name"."c_remark","new_name"."n_settle_days",null,0,"new_name"."n_adj_type","new_name"."n_doc_type",0,null,
    "new_name"."c_act_code",5 ) ;
  delete from "settle_mst"
    where "n_srno" = "old_name"."n_srno"
    and "c_prefix" = "old_name"."c_prefix"
    and "c_year" = "old_name"."c_year"
    and "n_srno1" = "old_name"."n_srno"
    and "c_prefix1" = "old_name"."c_prefix"
    and "c_year1" = "old_name"."c_year";
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
    "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
    "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
    ("new_name"."n_total"),"new_name"."c_cust_code","new_name"."d_mdadj_dbnt_date","new_name"."d_mdadj_dbnt_date",1 ) 
end;
CREATE TRIGGER "update_settle_mst_from_mdadj_mst" before update order 1 on
-------------
-----------------------
-----------------------------------------
--------------------------------
---------------------
------------------------credit note update mst
--crnt insert end
--Crnt Update Start
--crnt insert end
--Crnt Update Start
"DBA"."mdadj_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  if "old_name"."n_stop_trigger" <> "new_name"."n_stop_trigger" then
    return
  end if;
  delete from "settle_mst_header"
    where "n_srno" = "old_name"."n_srno"
    and "c_prefix" = "old_name"."c_prefix"
    and "c_year" = "old_name"."c_year";
  insert into "settle_mst_header"
    ( "c_prefix","n_srno","c_year","d_date","c_cust_code","c_sman_code","c_dman_code","n_cr_days","n_discount_per","n_fix_discount","n_other_charge","n_total",
    "n_counter_sale","n_tot_sch_disc","n_crnt_no","c_crnt_prefix","n_crnt_amt","n_dbnt_no","c_dbnt_prefix","n_dbnt_amt","n_adv_no","c_adv_prefix","n_adv_amt",
    "n_crnt_repl_no","c_crnt_repl_prefix","n_crnt_repl_amt","n_branch","n_disc_amt","n_rec_disc_on","n_rec_disc_amt","n_taxable_sale","n_non_taxable_sale",
    "c_credit_act","n_prod_val","n_ref_order_no","n_order_no","c_user","c_ship_code","c_ref_id","c_ref_year","n_ref_srno","n_approve","c_series_code","c_mfac_code",
    "n_excise_amnt","c_conv_user","c_sys_ip","c_computer_name","n_store_track","n_vdc_srno","c_from_gst_no","n_from_gst_type","c_to_gst_no","n_cgst_amt","n_sgst_amt",
    "n_igst_amt","n_gst_cess_amt","c_state_code","c_eway_bill_no","d_eway_date","n_to_gst_type","n_service_chg","n_taxable_amt","c_ordered_user","c_store_code","n_add_cess_amt",
    "c_remark","n_settle_days","c_debit_act","n_Post","n_adj_type","n_counter_ret","n_treat_vat","c_post_user","c_act_code","n_doc_type" ) values
    ( "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."d_mdadj_date","new_name"."c_cust_code",null,null,0,0,0,0,"new_name"."n_total",
    0,0,0,null,0,0,null,0,0,null,0,0,null,0,0,0,0,0,0,0,
    null,0,0,0,"new_name"."c_user","new_name"."c_ship_code",null,null,0,0,null,null,
    0,null,null,null,0,0,null,0,null,0,0,
    0,0,null,null,null,0,0,0,null,null,0,
    "new_name"."c_remark","new_name"."n_settle_days",null,0,"new_name"."n_adj_type","new_name"."n_doc_type",0,null,
    "new_name"."c_act_code",3 ) ;
  delete from "settle_mst"
    where "n_srno" = "old_name"."n_srno"
    and "c_prefix" = "old_name"."c_prefix"
    and "c_year" = "old_name"."c_year"
    and "n_srno1" = "old_name"."n_srno"
    and "c_prefix1" = "old_name"."c_prefix"
    and "c_year1" = "old_name"."c_year";
  insert into "settle_mst"( "c_year","c_prefix","n_srno","c_year1","c_prefix1",
    "n_srno1","n_amount","c_cust_code","d_date","d_due_date","n_act_type" ) values( "new_name"."c_year",
    "new_name"."c_prefix","new_name"."n_srno","new_name"."c_year","new_name"."c_prefix","new_name"."n_srno",
    -1*("new_name"."n_total"),"new_name"."c_cust_code","new_name"."d_mdadj_date","new_name"."d_mdadj_date",1 ) 
end;
CREATE TRIGGER "update_st_track_in_history_on_st_track_in_delete" before delete order 1 on
"DBA"."st_track_in"
referencing old as "old_name"
for each row
begin
  update "stock" set "stock"."n_hold_qty" = "stock"."n_hold_qty"-"old_name"."n_qty",
    "stock"."n_store_track_qty" = "stock"."n_store_track_qty"-"old_name"."n_qty"
    where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
  insert into "st_track_in_history"
    ( "c_doc_no","n_seq","c_item_code","c_batch_no","n_qty",
    "c_tray_code","n_complete","t_time","t_time_out","c_godown_code",
    "c_user","c_mode" ) on existing update defaults off values
    ( "old_name"."c_doc_no","old_name"."n_seq","old_name"."c_item_code","old_name"."c_batch_no","old_name"."n_qty",
    "old_name"."c_tray_code","old_name"."n_complete","now"(),"now"(),"old_name"."c_godown_code",
    "old_name"."c_user",'Delete' ) 
end;
CREATE TRIGGER "update_st_track_in_history_on_st_track_in_insert" before insert order 1 on
"DBA"."st_track_in"
referencing new as "new_name"
for each row
begin
  insert into "st_track_in_history"
    ( "c_doc_no","n_seq","c_item_code","c_batch_no","n_qty",
    "c_tray_code","n_complete","t_time","t_time_out","c_godown_code",
    "c_user","c_mode" ) on existing update defaults off values
    ( "new_name"."c_doc_no","new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_qty",
    "new_name"."c_tray_code","new_name"."n_complete","now"(),null,"new_name"."c_godown_code",
    "new_name"."c_user",'Insert' ) ;
  update "stock" set "stock"."n_hold_qty" = "stock"."n_hold_qty"+"new_name"."n_qty",
    "stock"."n_store_track_qty" = "stock"."n_store_track_qty"+"new_name"."n_qty"
    where "stock"."c_item_code" = "new_name"."c_item_code"
    and "stock"."c_batch_no" = "new_name"."c_batch_no"
end;
CREATE TRIGGER "update_st_track_in_history_on_st_track_in_update" before update order 1 on
"DBA"."st_track_in"
referencing old as "old_name" new as "new_name"
for each row
begin
  insert into "st_track_in_history"
    ( "c_doc_no","n_seq","c_item_code","c_batch_no","n_qty",
    "c_tray_code","n_complete","t_time","t_time_out","c_godown_code",
    "c_user","c_mode" ) on existing update defaults off values
    ( "new_name"."c_doc_no","new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_qty",
    "new_name"."c_tray_code","new_name"."n_complete","now"(),null,"new_name"."c_godown_code",
    "new_name"."c_user",'Update' ) ;
  if "old_name"."n_qty" <> "new_name"."n_qty" then
    update "stock" set "stock"."n_hold_qty" = "stock"."n_hold_qty"-"old_name"."n_qty"+"new_name"."n_qty",
      "stock"."n_store_track_qty" = "stock"."n_store_track_qty"-"old_name"."n_qty"+"new_name"."n_qty"
      where "stock"."c_item_code" = "new_name"."c_item_code"
      and "stock"."c_batch_no" = "new_name"."c_batch_no"
  end if
end;
CREATE TRIGGER "update_st_track_mst_from_doc_track_update" before update order 1 on "dba"."doc_track"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "s_dispatch_stage_code" char(6);
  declare @brcode char(6);
  declare @sttrackenable numeric(1);
  declare @stage char(6);
  declare @stgenable char(1);
  declare @year char(2);
  declare @docno char(30);
  declare @note char(50);
  declare @pick_tray char(6);
  declare @pos char(6);
  declare @search_str char(20);
  select "c_dispatch_stage_code","c_br_code","isnull"("n_enable_store_track",0) into "s_dispatch_stage_code",@brcode,@sttrackenable from "system_parameter";
  select "right"("db_name"(),2) into @year;
  if @sttrackenable > 0 then
    set @note = "new_name"."c_note";
    set @search_str = 'pick_tray=';
    set @pos = "charindex"(@search_str,@note);
    if @pos > 0 then
      set @note = "substring"(@note,@pos+"len"(@search_str));
      set @pos = "charindex"('#',@note);
      set @pick_tray = "left"(@note,@pos-1)
    end if;
    select "c_val","c_defa_val" into @stgenable,@stage from "sys_para_setup" where "c_para_val_code" = 'S00097';
    if "isnull"(@stage,'') <> '' and @stgenable = '1' then
      if @stage = "new_name"."c_stage_code" and "new_name"."c_stage_code" = "old_name"."c_stage_code" then
        set @docno = @brcode+'/'+@year+'/'+"new_name"."c_inv_prefix"+'/'+"string"("new_name"."n_inv_no");
        if(select "count"("c_doc_no") from "st_track_mst" where "n_inout" = 0 and "c_doc_no" = @docno and "n_confirm" = 1) > 0 then //aready confirmed 
          update "st_track_mst" set "c_auto_tray_code" = @pick_tray,"n_confirm" = 2 where "n_inout" = 0 and "c_doc_no" = @docno and "n_confirm" = 1
        end if
      end if
    end if
  end if
end;
CREATE TRIGGER "Update_st_track_mst_from_inv_summary_list_mst" after update order 2 on
"DBA"."inv_summary_list_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "br_code" char(6);
  declare "c_phase" char(6);
  --//store track master updation
  if "old_name"."n_store_track" <> 2 and "new_name"."n_store_track" = 2 and "new_name"."n_approved" = 1 then
    select top 1 "c_code" into "c_phase" from "st_phase_mst" where "n_rack_flag" = 1;
    select "uf_get_br_code"('000') into "br_code" from "dummy";
    insert into "st_track_mst"
      ( "c_br_code",
      "c_doc_no",
      "n_inout","c_phase_code","d_date",
      "c_user","c_system_name","c_system_ip","t_time_in","t_time_out",
      "n_complete","c_cust_code","c_order_id","n_urgent" ) values
      ( "br_code",
      "br_code"+'/'+"string"("new_name"."c_year")+'/'+"string"("new_name"."c_prefix")+'/'+"string"("new_name"."n_srno"),
      0,"c_phase","new_name"."d_date",
      "isNull"("new_name"."c_user",'3DS'),null,null,"new_name"."t_ltime",null,
      0,'',null,"new_name"."n_urgent" ) 
  end if
end;
CREATE TRIGGER "update_st_track_mst_on_dc_mst_delete" before delete order 1 on
"DBA"."dc_mst"
referencing old as "old_name"
for each row
begin
  declare @brcode char(6);
  select "c_br_code" into @brcode from "System_Parameter";
  insert into "deleted_mst"( "c_prefix","n_srno","d_date","c_code","n_amount","n_ref_no","c_ref_year" ) values
    ( "old_name"."c_prefix","old_name"."n_srno","old_name"."d_dc_date","old_name"."c_cust_code","old_name"."n_total","old_name"."n_order_no","old_name"."c_year" ) ;
  delete from "st_track_mst" where "st_track_mst"."c_doc_no" = (@brcode+'/'+"string"("old_name"."c_year")+'/'+"string"("old_name"."c_prefix")+'/'+"string"("old_name"."n_srno"));
  call "usp_check_update_last_tran_info"(1,"old_name"."c_cust_code",2,"old_name"."c_prefix","old_name"."n_srno","old_name"."d_dc_date");
  update "sale_till_date" set "n_value_dc_sale" = "n_value_dc_sale"-"old_name"."n_total" where "c_code" = "old_name"."c_cust_code";
  update "gstin_wise_sale_total" set "n_value_dc_sale" = "n_value_dc_sale"-"old_name"."n_total" where "c_code" = "old_name"."c_to_gst_no"
end;
CREATE TRIGGER "update_st_track_mst_on_dc_mst_update" before update order 1 on
"DBA"."dc_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "c_phase" char(10);
  declare @brcode char(6);
  select "c_br_code" into @brcode from "System_Parameter";
  if "old_name"."n_store_track" <> 2 and "new_name"."n_store_track" = 2 and "new_name"."n_approve" = 1 then
    select top 1 "c_code" into "c_phase" from "st_phase_mst" where "n_rack_flag" = 1;
    select top 1 "c_code" into "c_phase" from "st_phase_mst" where "n_rack_flag" = 1;
    insert into "st_track_mst"
      ( "c_br_code",
      "c_doc_no",
      "n_inout","c_phase_code","d_date",
      "c_user","c_system_name","c_system_ip","t_time_in","t_time_out",
      "n_complete","c_cust_code","c_order_id","n_urgent" ) values
      ( @brcode,
      @brcode+'/'+"string"("new_name"."c_year")+'/'+"string"("new_name"."c_prefix")+'/'+"string"("new_name"."n_srno"),
      0,"c_phase","new_name"."d_dc_date",
      "isNull"("new_name"."c_user",'3DS'),null,null,"new_name"."t_ltime",null,
      0,"new_name"."c_cust_code",null,0 ) 
  end if;
  if "new_name"."n_total" <> "old_name"."n_total" then
    update "sale_till_date" set "n_value_dc_sale" = "n_value_dc_sale"-"old_name"."n_total" where "c_code" = "old_name"."c_cust_code";
    update "sale_till_date" set "n_value_dc_sale" = "n_value_dc_sale"+"new_name"."n_total" where "c_code" = "new_name"."c_cust_code";
    update "gstin_wise_sale_total" set "n_value_dc_sale" = "n_value_dc_sale"+"new_name"."n_total" where "c_code" = "new_name"."c_to_gst_no";
    update "gstin_wise_sale_total" set "n_value_dc_sale" = "n_value_dc_sale"-"old_name"."n_total" where "c_code" = "old_name"."c_to_gst_no"
  end if
end;
CREATE TRIGGER "update_stk_user_audit_admin_on_update" after update order 1 on
"DBA"."stk_audit_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @d_pending_items numeric(6);
  if "old_name"."n_approve" = 0 and "new_name"."n_approve" = 1 then
    //get the pending item list
    select "count"() into @d_pending_items from "stk_audit_det" where "n_srno" = "new_name"."n_srno"
      and "n_approve" = 0;
    // print 'pending';
    //print @d_pending_items;
    if @d_pending_items = 0 then
      // if no pending item then make mst as complted  
      update "stk_user_audit" set "n_admin_complete" = 1 where "n_srno" = "new_name"."n_srno"
    end if
  end if
end;
CREATE TRIGGER "update_stk_user_audit_on_update"
--------TRIGGERS-----
 after update order 1 on
"DBA"."stk_audit"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @d_pending_items numeric(6);
  if "old_name"."n_complete" = 0 and "new_name"."n_complete" = 1 then
    //get the pending item list
    select "count"() into @d_pending_items from "DBA"."stk_audit" where "c_prefix" = "new_name"."c_prefix"
      and "n_srno" = "new_name"."n_srno"
      and "n_complete" = 0;
    //print 'pendinfg';
    //print @d_pending_items;
    if @d_pending_items = 0 then
      // if no pending item then make mst as complted  
      update "Stk_user_audit" set "n_complted" = 1 where "c_prefix" = "new_name"."c_prefix"
        and "n_srno" = "new_name"."n_srno"
    end if
  end if
end;
CREATE TRIGGER "update_stock_eb_from_crnt_repl_det" after insert order 1 on
"DBA"."crnt_repl_det"
referencing new as "new_name"
for each row
begin
  declare "d_def_date" date;
  declare "c_tmp_code" char(6);
  declare @is_stk_exist numeric(1);
  set @is_stk_exist = 0;
  set "d_def_date" = "uf_default_date"();
  if "new_name"."n_type_of_ret" <= 2 then
    select "count"() into @is_stk_exist from "stock" where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
    if @is_stk_exist is null then
      set @is_stk_exist = 0
    end if;
    if sqlcode = 0 then
      if @is_stk_exist = 0 then
        insert into "stock"( "c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty","n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty","n_mrp","n_purchase_rate","n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate","d_date","n_ptr","c_remark" ) values
          ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_expiry_date",0,0,0,0,0,0,0,0,0,"new_name"."n_mrp","new_name"."n_purchase_rate","new_name"."n_sale_rate",0,1,0,0,"new_name"."n_purchase_rate","d_def_date",0,'Expiry Replacement Return from '+"string"("new_name"."n_srno") ) ;
        if sqlstate = '02000' then
          raiserror 18000 "Error, Cannot add item in stock table. Please restart the system."
        end if end if end if end if;
  if "new_name"."n_crnt_no" > 0 and "new_name"."c_crnt_prefix" = 'TC' then
    update "crnt_tmp_det" set "n_crnt_no" = "new_name"."n_crnt_no"
      where "n_srno" = "new_name"."n_crnt_no" and "c_item_code" = "new_name"."c_item_code"
      and "c_batch_no" = "new_name"."c_batch_no"
  end if;
  if "new_name"."n_post" <> 1 then
    return
  end if;
  if("new_name"."n_type_of_ret" = 1 or "new_name"."n_type_of_ret" = 2 or "new_name"."n_type_of_ret" = 5) and "new_name"."n_supp_ret" = 1 then
    select "count"() into @is_stk_exist from "stock_eb" where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
    if @is_stk_exist is null then
      set @is_stk_exist = 0
    end if;
    if sqlcode = 0 then
      if @is_stk_exist = 0 then
        insert into "stock_eb"( "c_item_code","c_batch_no","n_eqty","n_bqty","n_oqty","n_loose_eqty","n_loose_bqty","n_loose_oqty","n_rqty","n_loose_rqty" ) values
          ( "new_name"."c_item_code","new_name"."c_batch_no",
          if "new_name"."n_type_of_ret" = 2 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
          if "new_name"."n_type_of_ret" = 1 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
          0,
          if "new_name"."n_type_of_ret" = 2 then "new_name"."n_loose_qty" else 0 endif,
          if "new_name"."n_type_of_ret" = 1 then "new_name"."n_loose_qty" else 0 endif,
          0,
          if "new_name"."n_type_of_ret" = 5 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
          if "new_name"."n_type_of_ret" = 5 then "new_name"."n_loose_qty" else 0 endif ) 
      else
        update "stock_eb"
          set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "new_name"."n_type_of_ret" = 2 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
          "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "new_name"."n_type_of_ret" = 1 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
          "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"+if "new_name"."n_type_of_ret" = 2 then "new_name"."n_loose_qty" else 0 endif,
          "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"+if "new_name"."n_type_of_ret" = 1 then "new_name"."n_loose_qty" else 0 endif,
          "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "new_name"."n_type_of_ret" = 5 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
          "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"+if "new_name"."n_type_of_ret" = 5 then "new_name"."n_loose_qty" else 0 endif
          where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no"
      //EOF sqlcode
      end if end if
  end if
end;
CREATE TRIGGER "update_stock_eb_from_crnt_repl_det_delete" before delete order 2 on
"DBA"."crnt_repl_det"
referencing old as "old_name"
for each row
begin
  if "old_name"."n_crnt_no" > 0 and "old_name"."c_crnt_prefix" = 'TC' then
    update "crnt_tmp_det" set "n_crnt_no" = 0
      where "n_srno" = "old_name"."n_crnt_no" and "c_item_code" = "old_name"."c_item_code"
      and "c_batch_no" = "old_name"."c_batch_no"
  end if;
  if "old_name"."n_post" <> 1 then
    return
  end if;
  if("old_name"."n_type_of_ret" = 1 or "old_name"."n_type_of_ret" = 2 or "old_name"."n_type_of_ret" = 5) and "old_name"."n_supp_ret" = 1 then
    update "stock_eb"
      set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"-if "old_name"."n_type_of_ret" = 2 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_bqty" = "stock_eb"."n_bqty"-if "old_name"."n_type_of_ret" = 1 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"-if "old_name"."n_type_of_ret" = 2 then "old_name"."n_loose_qty" else 0 endif,
      "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"-if "old_name"."n_type_of_ret" = 1 then "old_name"."n_loose_qty" else 0 endif,
      "stock_eb"."n_rqty" = "stock_eb"."n_rqty"-if "old_name"."n_type_of_ret" = 5 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"-if "old_name"."n_type_of_ret" = 2 then "old_name"."n_loose_qty" else 0 endif
      where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
  end if
end;
CREATE TRIGGER "update_stock_eb_from_crnt_repl_det_update" before update order 1 on
"DBA"."crnt_repl_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "c_tmp_code" char(6);
  declare @is_stock_exist numeric(1);
  declare "d_def_date" date;
  if "new_name"."n_post"+"old_name"."n_post" = 0 then
    return
  end if;
  set @is_stock_exist = 0;
  set "d_def_date" = "uf_default_date"();
  if("new_name"."n_type_of_ret" = 1 or "new_name"."n_type_of_ret" = 2 or "new_name"."n_type_of_ret" = 5) and "new_name"."n_supp_ret" = 1 then
    select "count"() into @is_stock_exist from "stock_eb" where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
    if @is_stock_exist is null then
      set @is_stock_exist = 0
    end if;
    if sqlcode = 0 then
      if @is_stock_exist = 0 then
        insert into "stock_eb"( "c_item_code","c_batch_no","n_eqty","n_bqty","n_oqty","n_loose_eqty","n_loose_bqty","n_loose_oqty","n_rqty","n_loose_rqty" ) values
          ( "new_name"."c_item_code","new_name"."c_batch_no",
          if "new_name"."n_type_of_ret" = 2 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
          if "new_name"."n_type_of_ret" = 1 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
          0,
          if "new_name"."n_type_of_ret" = 2 then "new_name"."n_loose_qty" else 0 endif,
          if "new_name"."n_type_of_ret" = 1 then "new_name"."n_loose_qty" else 0 endif,
          0,
          if "new_name"."n_type_of_ret" = 5 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
          if "new_name"."n_type_of_ret" = 5 then "new_name"."n_loose_qty" else 0 endif ) 
      else
        if "new_name"."n_post" = 1 then
          update "stock_eb"
            set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "new_name"."n_type_of_ret" = 2 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
            "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "new_name"."n_type_of_ret" = 1 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
            "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"+if "new_name"."n_type_of_ret" = 2 then "new_name"."n_loose_qty" else 0 endif,
            "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"+if "new_name"."n_type_of_ret" = 1 then "new_name"."n_loose_qty" else 0 endif,
            "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "new_name"."n_type_of_ret" = 5 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
            "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"+if "new_name"."n_type_of_ret" = 5 then "new_name"."n_loose_qty" else 0 endif
            where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no"
        end if;
        if "old_name"."n_post" = 1 then
          update "stock_eb"
            set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"-if "old_name"."n_type_of_ret" = 2 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
            "stock_eb"."n_bqty" = "stock_eb"."n_bqty"-if "old_name"."n_type_of_ret" = 1 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
            "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"-if "old_name"."n_type_of_ret" = 2 then "old_name"."n_loose_qty" else 0 endif,
            "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"-if "old_name"."n_type_of_ret" = 1 then "old_name"."n_loose_qty" else 0 endif,
            "stock_eb"."n_rqty" = "stock_eb"."n_rqty"-if "old_name"."n_type_of_ret" = 5 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
            "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"-if "old_name"."n_type_of_ret" = 5 then "old_name"."n_loose_qty" else 0 endif
            where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
        //EOF sqlcode
        end if end if end if end if;
  select "count"() into @is_stock_exist from "stock" where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
  if @is_stock_exist is null then
    set @is_stock_exist = 0
  end if;
  if sqlcode = 0 then
    if @is_stock_exist = 0 then
      insert into "stock"( "c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty","n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty","n_mrp","n_purchase_rate","n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate","d_date","n_ptr","c_remark" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_expiry_date",0,0,0,0,0,0,0,0,0,"new_name"."n_mrp","new_name"."n_purchase_rate","new_name"."n_sale_rate",0,1,0,0,"new_name"."n_purchase_rate","d_def_date",0,'Expiry Replacement Return from '+"string"("new_name"."n_srno") ) ;
      if sqlstate = '02000' then
        raiserror 18000 "Error, Cannot add item in stock table. Please restart the system."
      end if
    end if
  end if
end;
CREATE TRIGGER "update_stock_eb_from_dbnt_det_new_delete" before delete order 2 on
------Dbnt Trigger
"DBA"."dbnt_det_new"
referencing old as "old_name"
for each row
begin
  declare @pk numeric(16);
  declare @brcode char(6);
  declare @year char(2);
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  if "len"("string"("old_name"."n_srno")) < 8 then
    set @pk = "uf_pk"(@brcode,@year,'DB',"old_name"."n_srno",0,'')
  else
    set @pk = "old_name"."n_srno"
  end if;
  delete from "stock_ledger"
    where "stock_ledger"."n_srno" = @pk
    and "stock_ledger"."n_seq" = "old_name"."n_seq"
    and "stock_ledger"."c_item_code" = "old_name"."c_item_code"
    and "stock_ledger"."c_batch_no" = "old_name"."c_batch_no";
  if "old_name"."c_type" = 'S' then
    delete from "dbnt_det" where "dbnt_det"."n_srno" = "old_name"."n_srno" and "dbnt_det"."c_item_code" = "old_name"."c_item_code" and "dbnt_det"."c_batch_no" = "old_name"."c_batch_no"
  else
    update "stock_eb"
      set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "old_name"."c_type" = 'E' then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "old_name"."c_type" = 'B' then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_oqty" = "stock_eb"."n_oqty"+if "old_name"."c_type" <> 'E' and "old_name"."c_type" <> 'B' and "old_name"."c_type" <> 'C' then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"+if "old_name"."c_type" = 'E' then "old_name"."n_loose_qty" else 0 endif,
      "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"+if "old_name"."c_type" = 'B' then "old_name"."n_loose_qty" else 0 endif,
      "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "old_name"."c_type" = 'C' then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"+if "old_name"."c_type" = 'C' then "old_name"."n_loose_qty" else 0 endif
      where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
  end if;
  delete from "dbnt_ledger"
    where "dbnt_ledger"."n_srno1" = "old_name"."n_srno"
    and "dbnt_ledger"."c_item_code" = "old_name"."c_item_code"
    and "dbnt_ledger"."c_batch_no" = "old_name"."c_batch_no"
    and "dbnt_ledger"."c_type" = "old_name"."c_type";
  update "stock_adj" set "n_debitnote_srno" = 0 where "n_debitnote_srno" = "old_name"."n_srno"
    and "stock_adj"."c_item_code" = "old_name"."c_item_code"
    and "stock_adj"."c_batch_no" = "old_name"."c_batch_no"
    and "stock_adj"."n_supp_return" = 1;
  update "crnt_tmp_det" set "n_ref_dbntno" = 0 where "n_ref_dbntno" = "old_name"."n_srno"
    and "crnt_tmp_det"."c_item_code" = "old_name"."c_item_code"
    and "crnt_tmp_det"."c_batch_no" = "old_name"."c_batch_no"
end;
CREATE TRIGGER "update_stock_eb_from_dbnt_det_new_insert" after insert order 1 on
-------------------------------
-------------------debit note insert trigger
"DBA"."dbnt_det_new"
referencing new as "new_name"
for each row
begin
  declare "c_tmp_code" char(6);
  declare @pk numeric(16);
  declare @brcode char(6);
  declare @year,"cprefix" char(2);
  declare "d_def_date" date;
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  if "len"("string"("new_name"."n_srno")) < 8 then
    set @pk = "uf_pk"(@brcode,@year,'DB',"new_name"."n_srno",0,'')
  else
    set @pk = "new_name"."n_srno"
  end if;
  set "cprefix" = "uf_get_pk_component"(@pk,3);
  if "new_name"."c_type" = 'E' or "new_name"."c_type" = 'B' then
    select "c_item_code" into "c_tmp_code" from "stock" where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
    if sqlcode = 100 then
      set "d_def_date" = "uf_default_date"();
      insert into "stock"( "c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty","n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty","n_mrp","n_purchase_rate","n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate","d_date","n_ptr","n_st_rate" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_exp_date",0,0,0,0,0,0,0,0,0,"new_name"."n_mrp","isnull"("isnull"("new_name"."n_purchase_rate","new_name"."n_eff_pur_rate"),0),"isnull"("isnull"("new_name"."n_purchase_rate","new_name"."n_eff_pur_rate"),0),0,0,0,0,"isnull"("isnull"("new_name"."n_eff_pur_rate","new_name"."n_purchase_rate"),0),"d_def_date",0,0 ) ;
      if sqlstate = '02000' then
        raiserror 18000 "Error, Cannot add item in stock table. Please restart the system."
      end if end if end if;
  if "new_name"."c_type" = 'S' then
    delete from "dbnt_det" where "dbnt_det"."n_srno" = "new_name"."n_srno" and "dbnt_det"."c_item_code" = "new_name"."c_item_code" and "dbnt_det"."c_batch_no" = "new_name"."c_batch_no";
    insert into "dbnt_det"( "n_srno","c_item_code","c_batch_no","n_qty","c_mfac_code","d_dbnt_date","n_enable_supp_stock_sale","c_code_supp" ) values
      ( "new_name"."n_srno","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_qty"+"new_name"."n_scheme_qty","new_name"."c_mfac_code","new_name"."d_dbnt_date","new_name"."n_enable_supp_stock_sale","new_name"."c_code_supp" ) 
  else
    select "c_item_code" into "c_tmp_code" from "stock_eb" where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
    if sqlcode = 100 then
      insert into "stock_eb"( "c_item_code","c_batch_no","n_eqty","n_bqty","n_oqty","n_loose_eqty","n_loose_bqty","n_loose_oqty","n_rqty","n_loose_rqty" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no",
        if "new_name"."c_type" = 'E' then-1*("new_name"."n_qty"+"new_name"."n_scheme_qty") else 0 endif,
        if "new_name"."c_type" = 'B' then-1*("new_name"."n_qty"+"new_name"."n_scheme_qty") else 0 endif,
        if "new_name"."c_type" <> 'E' and "new_name"."c_type" <> 'B' and "new_name"."c_type" <> 'C' then-1*("new_name"."n_qty"+"new_name"."n_scheme_qty") else 0 endif,
        if "new_name"."c_type" = 'E' then-1*"new_name"."n_loose_qty" else 0 endif,
        if "new_name"."c_type" = 'B' then-1*"new_name"."n_loose_qty" else 0 endif,
        0,
        if "new_name"."c_type" = 'C' then-1*("new_name"."n_qty"+"new_name"."n_scheme_qty") else 0 endif,
        if "new_name"."c_type" = 'c' then-1*"new_name"."n_loose_qty" else 0 endif ) 
    else
      update "stock_eb"
        set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"-if "new_name"."c_type" = 'E' then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_bqty" = "stock_eb"."n_bqty"-if "new_name"."c_type" = 'B' then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_oqty" = "stock_eb"."n_oqty"-if "new_name"."c_type" <> 'E' and "new_name"."c_type" <> 'B' and "new_name"."c_type" <> 'C' then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"-if "new_name"."c_type" = 'E' then "new_name"."n_loose_qty" else 0 endif,
        "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"-if "new_name"."c_type" = 'B' then "new_name"."n_loose_qty" else 0 endif,
        "stock_eb"."n_rqty" = "stock_eb"."n_rqty"-if "new_name"."c_type" = 'C' then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"-if "new_name"."c_type" = 'C' then "new_name"."n_loose_qty" else 0 endif
        where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no"
    end if end if;
  --------------
  insert into "stock_ledger"
    ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
    "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_gst_code","n_service_qty","n_scheme_disc","n_product_value","n_taxable_amt","n_ref_no",
    "d_ref_date","n_service_chg","c_ret_type","n_eb_flag","c_prefix" ) values
    ( @pk,"new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_dbnt_date",
    -1*"new_name"."n_qty",-1*"new_name"."n_scheme_qty",0,"new_name"."n_rate","new_name"."n_disc_amt",0,0,
    "new_name"."n_cgst_per","new_name"."n_cgst_amt","new_name"."n_sgst_per","new_name"."n_sgst_amt","new_name"."n_igst_per","new_name"."n_igst_amt","new_name"."n_gst_cess_per","new_name"."n_gst_cess_amt","new_name"."c_hsn_sac_code",
    "new_name"."c_gst_code","new_name"."n_service_qty","new_name"."n_sch_disc_value","new_name"."n_product_value","new_name"."n_taxable_amt","new_name"."n_ref_no","new_name"."d_ref_date","new_name"."n_service_chg",
    "new_name"."c_type",if "new_name"."c_type" = 'S' or "new_name"."c_type" = 'N' then 1 else 0 endif,"cprefix" ) ;
  --------------------jagamohan
  insert into "dbnt_ledger"
    ( "n_srno","c_prefix","c_type","c_item_code","c_batch_no","n_srno1","c_prefix1","c_type1","n_qty","n_loose_qty","n_qty_actual","n_loose_qty_actual","n_rate",
    "n_pack_conv","n_debit_per","n_igst_per","n_cgst_per","n_sgst_per","n_cess_per","c_gst_code","n_schm_qty","n_scheme_disc","n_schm_qty_actual","n_schm_disc_actual" ) values
    ( "new_name"."n_srno",'DB',"new_name"."c_type","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_srno",'DB',"new_name"."c_type","isnull"("new_name"."n_qty",0)+"isnull"("new_name"."n_qty1",0)+"isnull"("new_name"."n_scheme_qty",0),
    "isnull"("new_name"."n_loose_qty",0)+"isnull"("new_name"."n_loose_qty1",0),"isnull"("new_name"."n_qty",0)+"isnull"("new_name"."n_qty1",0)+"isnull"("new_name"."n_scheme_qty",0),"isnull"("new_name"."n_loose_qty",0)+"isnull"("new_name"."n_loose_qty1",0),"new_name"."n_rate",
    "isnull"("new_name"."n_pack_conv",1),"isnull"("new_name"."n_debit_per",100),"isnull"("new_name"."n_igst_per",0),"isnull"("new_name"."n_cgst_per",0),"isnull"("new_name"."n_sgst_per",0),"isnull"("new_name"."n_gst_cess_per",0),"new_name"."c_gst_code",
    "isnull"("new_name"."n_scheme_qty",0),"isnull"("new_name"."n_scheme_disc",0),"isnull"("new_name"."n_scheme_qty",0),"isnull"("new_name"."n_scheme_disc",0) ) 
end;
CREATE TRIGGER "update_stock_eb_from_dbnt_det_new_update" before update order 1 on
---------------------------------------------------------------
-----------------dbnt_det update
"DBA"."dbnt_det_new"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "c_tmp_code" char(6);
  declare @pk numeric(16);
  declare @brcode char(6);
  declare @year,"cprefix" char(2);
  declare @revert_stk numeric(1);
  declare "d_def_date" date;
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  set "d_def_date" = "uf_default_date"();
  if "len"("string"("new_name"."n_srno")) < 8 then
    set @pk = "uf_pk"(@brcode,@year,'DB',"new_name"."n_srno",0,'')
  else
    set @pk = "new_name"."n_srno"
  end if;
  set "cprefix" = "uf_get_pk_component"(@pk,3);
  select cast("uf_sys_para_setup"('S00186','-','0',1) as numeric(1)) into @revert_stk;
  if @revert_stk is null then
    set @revert_stk = 0
  end if;
  if "new_name"."c_type" = 'E' or "new_name"."c_type" = 'B' then
    select "c_item_code" into "c_tmp_code" from "stock" where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
    if sqlcode = 100 then
      insert into "stock"( "c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty","n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty","n_mrp","n_purchase_rate","n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate","d_date","n_ptr","n_st_rate" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_exp_date",0,0,0,0,0,0,0,0,0,"new_name"."n_mrp","isnull"("isnull"("new_name"."n_purchase_rate","new_name"."n_eff_pur_rate"),0),"isnull"("isnull"("new_name"."n_purchase_rate","new_name"."n_eff_pur_rate"),0),0,0,0,0,"isnull"("isnull"("new_name"."n_eff_pur_rate","new_name"."n_purchase_rate"),0),"d_def_date",0,0 ) ;
      if sqlstate = '02000' then
        raiserror 18000 "Error, Cannot add item in stock table. Please restart the system."
      end if end if end if;
  delete from "stock_ledger"
    where "stock_ledger"."n_srno" = @pk
    and "stock_ledger"."n_seq" = "old_name"."n_seq"
    and "stock_ledger"."c_item_code" = "old_name"."c_item_code"
    and "stock_ledger"."c_batch_no" = "old_name"."c_batch_no";
  if "old_name"."c_type" = 'S' then
    delete from "dbnt_det" where "dbnt_det"."n_srno" = "old_name"."n_srno" and "dbnt_det"."c_item_code" = "old_name"."c_item_code" and "dbnt_det"."c_batch_no" = "old_name"."c_batch_no"
  else
    update "stock_eb"
      set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "old_name"."c_type" = 'E' then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "old_name"."c_type" = 'B' then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_oqty" = "stock_eb"."n_oqty"+if "old_name"."c_type" <> 'E' and "old_name"."c_type" <> 'B' and "old_name"."c_type" <> 'C' then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"+if "old_name"."c_type" = 'E' then "old_name"."n_loose_qty" else 0 endif,
      "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"+if "old_name"."c_type" = 'B' then "old_name"."n_loose_qty" else 0 endif,
      "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "old_name"."c_type" = 'C' then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
      "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"+if "old_name"."c_type" = 'C' then "old_name"."n_loose_qty" else 0 endif
      where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
  end if;
  if "new_name"."c_type" = 'S' then
    insert into "dbnt_det"( "n_srno","c_item_code","c_batch_no","n_qty","c_mfac_code","d_dbnt_date","n_enable_supp_stock_sale","c_code_supp" ) values
      ( "new_name"."n_srno","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_qty"+"new_name"."n_scheme_qty"+if @revert_stk = 1 then if "new_name"."d_dbnt_date" < "d_def_date" then "isnull"("new_name"."n_qty1",0) else 0 endif else 0 endif,"new_name"."c_mfac_code","new_name"."d_dbnt_date","new_name"."n_enable_supp_stock_sale","new_name"."c_code_supp" ) 
  else
    select "c_item_code" into "c_tmp_code" from "stock_eb" where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
    if sqlcode = 100 then
      insert into "stock_eb"( "c_item_code","c_batch_no","n_eqty","n_bqty","n_oqty","n_loose_eqty","n_loose_bqty","n_loose_oqty","n_rqty","n_loose_rqty" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no",
        if "new_name"."c_type" = 'E' then-1*("new_name"."n_qty"+"new_name"."n_scheme_qty") else 0 endif,
        if "new_name"."c_type" = 'B' then-1*("new_name"."n_qty"+"new_name"."n_scheme_qty") else 0 endif,
        if "new_name"."c_type" <> 'E' and "new_name"."c_type" <> 'B' and "new_name"."c_type" <> 'C' then-1*("new_name"."n_qty"+"new_name"."n_scheme_qty") else 0 endif,
        if "new_name"."c_type" = 'E' then-1*"new_name"."n_loose_qty" else 0 endif,
        if "new_name"."c_type" = 'B' then-1*"new_name"."n_loose_qty" else 0 endif,
        0,
        if "new_name"."c_type" = 'C' then-1*("new_name"."n_qty"+"new_name"."n_scheme_qty") else 0 endif,
        if "new_name"."c_type" = 'C' then-1*"new_name"."n_loose_qty" else 0 endif ) 
    else
      update "stock_eb"
        set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"-if "new_name"."c_type" = 'E' then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_bqty" = "stock_eb"."n_bqty"-if "new_name"."c_type" = 'B' then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_oqty" = "stock_eb"."n_oqty"-if "new_name"."c_type" <> 'E' and "new_name"."c_type" <> 'B' and "new_name"."c_type" <> 'C' then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"-if "new_name"."c_type" = 'E' then "new_name"."n_loose_qty" else 0 endif,
        "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"-if "new_name"."c_type" = 'B' then "new_name"."n_loose_qty" else 0 endif,
        "stock_eb"."n_rqty" = "stock_eb"."n_rqty"-if "new_name"."c_type" = 'C' then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"-if "new_name"."c_type" = 'C' then "new_name"."n_loose_qty" else 0 endif
        where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no"
    end if end if;
  delete from "dbnt_ledger"
    where "dbnt_ledger"."n_srno1" = "old_name"."n_srno"
    and "dbnt_ledger"."c_item_code" = "old_name"."c_item_code"
    and "dbnt_ledger"."c_batch_no" = "old_name"."c_batch_no"
    and "dbnt_ledger"."c_type1" = "old_name"."c_type"
    and "dbnt_ledger"."c_prefix1" = 'DB';
  ----------------
  insert into "stock_ledger"
    ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
    "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_gst_code","n_service_qty","n_scheme_disc","n_product_value","n_taxable_amt","n_ref_no",
    "d_ref_date","n_service_chg","c_ret_type","n_eb_flag","c_prefix" ) values
    ( @pk,"new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_dbnt_date",
    -1*"new_name"."n_qty",-1*"new_name"."n_scheme_qty",0,"new_name"."n_rate","new_name"."n_disc_amt",0,0,
    "new_name"."n_cgst_per","new_name"."n_cgst_amt","new_name"."n_sgst_per","new_name"."n_sgst_amt","new_name"."n_igst_per","new_name"."n_igst_amt","new_name"."n_gst_cess_per","new_name"."n_gst_cess_amt","new_name"."c_hsn_sac_code",
    "new_name"."c_gst_code","new_name"."n_service_qty","new_name"."n_sch_disc_value","new_name"."n_product_value","new_name"."n_taxable_amt","new_name"."n_ref_no","new_name"."d_ref_date","new_name"."n_service_chg","new_name"."c_type",
    if "new_name"."c_type" = 'S' or "new_name"."c_type" = 'N' then 1 else 0 endif,"cprefix" ) ;
  ----------------
  insert into "dbnt_ledger"
    ( "n_srno","c_prefix","c_type","c_item_code","c_batch_no","n_srno1","c_prefix1","c_type1","n_qty","n_loose_qty","n_qty_actual","n_loose_qty_actual","n_rate",
    "n_pack_conv","n_debit_per","n_igst_per","n_cgst_per","n_sgst_per","n_cess_per","c_gst_code","n_schm_qty","n_scheme_disc","n_schm_qty_actual","n_schm_disc_actual" ) values
    ( "new_name"."n_srno",'DB',"new_name"."c_type","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_srno",'DB',"new_name"."c_type","isnull"("new_name"."n_qty",0)+"isnull"("new_name"."n_qty1",0)+"isnull"("new_name"."n_scheme_qty",0),
    "isnull"("new_name"."n_loose_qty",0)+"isnull"("new_name"."n_loose_qty1",0),"isnull"("new_name"."n_qty",0)+"isnull"("new_name"."n_qty1",0)+"isnull"("new_name"."n_scheme_qty",0),"isnull"("new_name"."n_loose_qty",0)+"isnull"("new_name"."n_loose_qty1",0),"new_name"."n_rate",
    "isnull"("new_name"."n_pack_conv",1),"isnull"("new_name"."n_debit_per",100),"isnull"("new_name"."n_igst_per",0),"isnull"("new_name"."n_cgst_per",0),"isnull"("new_name"."n_sgst_per",0),"isnull"("new_name"."n_gst_cess_per",0),"new_name"."c_gst_code",
    "isnull"("new_name"."n_scheme_qty",0),"isnull"("new_name"."n_scheme_disc",0),"isnull"("new_name"."n_scheme_qty",0),"isnull"("new_name"."n_scheme_disc",0) ) 
end;
CREATE TRIGGER "update_stock_eb_from_stock_eb_op_delete" before delete order 2
on "DBA".stock_eb_op
referencing old as old_name
for each row
begin
    update stock_eb set
    stock_eb.n_eqty=stock_eb.n_eqty-old_name.n_eqty,
    stock_eb.n_bqty=stock_eb.n_bqty-old_name.n_bqty,
    stock_eb.n_oqty=stock_eb.n_oqty-old_name.n_oqty,
    stock_eb.n_loose_eqty=stock_eb.n_loose_eqty-old_name.n_loose_eqty,
    stock_eb.n_loose_bqty=stock_eb.n_loose_bqty-old_name.n_loose_bqty,
    stock_eb.n_loose_oqty=stock_eb.n_loose_oqty-old_name.n_loose_oqty,
    stock_eb.n_rqty=stock_eb.n_rqty-old_name.n_rqty,
    stock_eb.n_loose_rqty=stock_eb.n_loose_rqty-old_name.n_loose_rqty
    where stock_eb.c_item_code=old_name.c_item_code and stock_eb.c_batch_no=old_name.c_batch_no;
end;
CREATE TRIGGER "update_stock_eb_from_stock_eb_op_insert" after insert order 1
on "DBA".stock_eb_op
referencing new as new_name
for each row
begin
    declare c_tmp_code char(6);
    select c_item_code into c_tmp_code from stock_eb where stock_eb.c_item_code=new_name.c_item_code and stock_eb.c_batch_no=new_name.c_batch_no;
    if sqlcode=100 then
      insert into stock_eb(c_item_code,c_batch_no,n_eqty,n_bqty,n_oqty,n_loose_eqty,n_loose_bqty,n_loose_oqty,n_rqty,n_loose_rqty) values(
        new_name.c_item_code,
        new_name.c_batch_no,
        new_name.n_eqty,
        new_name.n_bqty,
        new_name.n_oqty,
        new_name.n_loose_eqty,
        new_name.n_loose_bqty,
        new_name.n_loose_oqty,
        new_name.n_rqty,
        new_name.n_loose_rqty)
    else
      update stock_eb set
        stock_eb.n_eqty=stock_eb.n_eqty+new_name.n_eqty,
        stock_eb.n_bqty=stock_eb.n_bqty+new_name.n_bqty,
        stock_eb.n_oqty=stock_eb.n_oqty+new_name.n_oqty,
        stock_eb.n_loose_eqty=stock_eb.n_loose_eqty+new_name.n_loose_eqty,
        stock_eb.n_loose_bqty=stock_eb.n_loose_bqty+new_name.n_loose_bqty,
        stock_eb.n_loose_oqty=stock_eb.n_loose_oqty+new_name.n_loose_oqty,
        stock_eb.n_rqty=stock_eb.n_rqty+new_name.n_rqty,
        stock_eb.n_loose_rqty=stock_eb.n_loose_rqty+new_name.n_loose_rqty
        where stock_eb.c_item_code=new_name.c_item_code and stock_eb.c_batch_no=new_name.c_batch_no
    end if
end;
CREATE TRIGGER "update_stock_eb_from_stock_eb_op_update" before update order 1
on "DBA".stock_eb_op
referencing old as old_name new as new_name
for each row
begin
    declare c_tmp_code char(6);
    update stock_eb set
    stock_eb.n_eqty=stock_eb.n_eqty-old_name.n_eqty,
    stock_eb.n_bqty=stock_eb.n_bqty-old_name.n_bqty,
    stock_eb.n_oqty=stock_eb.n_oqty-old_name.n_oqty,
    stock_eb.n_loose_eqty=stock_eb.n_loose_eqty-old_name.n_loose_eqty,
    stock_eb.n_loose_bqty=stock_eb.n_loose_bqty-old_name.n_loose_bqty,
    stock_eb.n_loose_oqty=stock_eb.n_loose_oqty-old_name.n_loose_oqty,
    stock_eb.n_rqty=stock_eb.n_rqty-old_name.n_rqty,
    stock_eb.n_loose_rqty=stock_eb.n_loose_rqty-old_name.n_loose_rqty
    where stock_eb.c_item_code=old_name.c_item_code and stock_eb.c_batch_no=old_name.c_batch_no;
    select c_item_code into c_tmp_code from stock_eb where stock_eb.c_item_code=new_name.c_item_code and stock_eb.c_batch_no=new_name.c_batch_no;
    if sqlcode=100 then
      insert into stock_eb(c_item_code,c_batch_no,n_eqty,n_bqty,n_oqty,n_loose_eqty,n_loose_bqty,n_loose_oqty,n_rqty,n_loose_rqty) values(
        new_name.c_item_code,
        new_name.c_batch_no,
        new_name.n_eqty,
        new_name.n_bqty,
        new_name.n_oqty,
        new_name.n_loose_eqty,
        new_name.n_loose_bqty,
        new_name.n_loose_oqty,
        new_name.n_rqty,
        new_name.n_loose_rqty)
    else
      update stock_eb set
        stock_eb.n_eqty=stock_eb.n_eqty+new_name.n_eqty,
        stock_eb.n_bqty=stock_eb.n_bqty+new_name.n_bqty,
        stock_eb.n_oqty=stock_eb.n_oqty+new_name.n_oqty,
        stock_eb.n_loose_eqty=stock_eb.n_loose_eqty+new_name.n_loose_eqty,
        stock_eb.n_loose_bqty=stock_eb.n_loose_bqty+new_name.n_loose_bqty,
        stock_eb.n_loose_oqty=stock_eb.n_loose_oqty+new_name.n_loose_oqty,
        stock_eb.n_rqty=stock_eb.n_rqty+new_name.n_rqty,
        stock_eb.n_loose_rqty=stock_eb.n_loose_rqty+new_name.n_loose_rqty
        where stock_eb.c_item_code=new_name.c_item_code and stock_eb.c_batch_no=new_name.c_batch_no
    end if
end;
CREATE TRIGGER "update_stock_ffrom_stk_adj_update" before update order 1 on
"DBA"."stock_adj_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "c_tmp_code" char(6);
  declare @pk,"d_old_godown_qty","d_new_godown_qty" numeric(18);
  declare @brcode char(6);
  declare @year,@c_prefix char(2);
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  set @c_prefix = "uf_get_pk_component"("new_name"."n_srno",3);
  delete from "stock_ledger"
    where "stock_ledger"."n_srno" = "old_name"."n_srno"
    and "stock_ledger"."n_seq" = "old_name"."n_seq";
  if "old_name"."n_tran_type" = 0 then //batch adjustment  
    if "old_name"."n_cancel_flag" <> 1 and "old_name"."n_post" = 1 and "old_name"."n_qty" < 0 then
      insert into "stock_ledger"
        ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
        "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_prefix" ) values
        ( "new_name"."n_srno",0,"new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_date",
        "new_name"."n_qty","new_name"."n_seq",0,"new_name"."n_sale_rate",0,0,0,
        0,0,0,0,0,0,0,0,"new_name"."c_hsn_sac_code",@c_prefix ) ;
      update "stock" set "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty",
        "d_ldate" = "new_name"."d_ldate","t_ltime" = "now"()
        where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
      if "old_name"."n_retu_supp" = 1 then
        update "stock_eb" set "stock_eb"."n_oqty" = "stock_eb"."n_oqty"+"old_name"."n_qty"
          where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
      end if end if;
    if "new_name"."n_cancel_flag" <> 1 and "new_name"."n_post" = 1 then
      select "stock"."c_item_code"
        into "c_tmp_code" from "stock"
        where "stock"."c_item_code" = "new_name"."c_item_code"
        and "stock"."c_batch_no" = "new_name"."c_batch_no";
      if sqlcode <> 0 then
        insert into "stock"( "c_item_code","c_batch_no","n_balance_qty","n_sch_bal_qty" ) values
          ( "new_name"."c_item_code","new_name"."c_batch_no",
          "new_name"."n_qty",0 ) 
      else
        update "stock" set "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty"
          where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no"
      end if;
      update "stock" set "d_ldate" = "new_name"."d_ldate","t_ltime" = "new_name"."t_ltime"
        where "stock"."c_item_code" = "new_name"."c_item_code"
        and "stock"."c_batch_no" = "new_name"."c_batch_no"
        and("stock"."d_ldate" is null or "stock"."d_ldate" < "new_name"."d_ldate" or "stock"."t_ltime" is null or "stock"."t_ltime" < "new_name"."t_ltime");
      if "new_name"."n_enable_supp_stock_sale" = 1 or "old_name"."n_enable_supp_stock_sale" = 1 then
        if "old_name"."n_enable_supp_stock_sale" = 1 then
          delete from "Stock_inward_outwad" where "c_item_code" = "old_name"."c_item_code" and "c_batch_no" = "old_name"."c_batch_no"
            and "n_tran_no" = "old_name"."n_srno" and "c_supp_code" = "old_name"."c_code_supp" and "c_br_code" = "old_name"."c_br_code"
        end if;
        if "new_name"."n_enable_supp_stock_sale" = 1 then
          insert into "Stock_inward_outwad"( "c_item_code","c_batch_no","n_tran_no","c_supp_code","n_qty","n_schm_qty","d_date","n_flag","c_br_code" ) values
            ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_srno","new_name"."c_code_supp","new_name"."n_qty","new_name"."n_scheme_qty","new_name"."d_date",6,"new_name"."c_br_code" ) 
        end if end if;
      if "new_name"."n_retu_supp" = 1 then
        select "stock_eb"."c_item_code"
          into "c_tmp_code" from "stock_eb"
          where "stock_eb"."c_item_code" = "new_name"."c_item_code"
          and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
        if sqlcode <> 0 then
          insert into "stock_eb"( "c_item_code","c_batch_no","n_qty" ) values
            ( "new_name"."c_item_code","new_name"."c_batch_no",
            -1*"new_name"."n_qty" ) 
        else
          update "stock_eb" set "stock_eb"."n_qty" = "stock_eb"."n_qty"-"new_name"."n_qty"
            where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no"
        end if end if end if;
    if "old_name"."n_cancel_flag" <> 1 and "old_name"."n_post" = 1 and "old_name"."n_qty" > 0 then
      update "stock" set "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty"
        where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
      update "stock" set "d_ldate" = "new_name"."d_ldate","t_ltime" = "new_name"."t_ltime"
        where "stock"."c_item_code" = "new_name"."c_item_code"
        and "stock"."c_batch_no" = "new_name"."c_batch_no"
        and("stock"."d_ldate" is null or "stock"."d_ldate" < "new_name"."d_ldate" or "stock"."t_ltime" is null or "stock"."t_ltime" < "new_name"."t_ltime");
      if "old_name"."n_retu_supp" = 1 then
        update "stock_eb" set "stock_eb"."n_oqty" = "stock_eb"."n_oqty"+"old_name"."n_qty"
          where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
      end if
    end if
  else if "new_name"."n_cancel_flag" <> 1 and "old_name"."n_post" = 1 and "new_name"."n_post" = 1 then
      insert into "stock_ledger"
        ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
        "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_prefix" ) values
        ( "new_name"."n_srno","new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_date",
        "new_name"."n_qty","old_name"."n_scheme_qty",0,"new_name"."n_sale_rate",0,0,0,
        0,0,0,0,0,0,0,0,"new_name"."c_hsn_sac_code",@c_prefix ) ;
      if "old_name"."n_pur_godown_flag" = 1 then
        set "d_old_godown_qty" = "old_name"."n_qty"
      else
        set "d_old_godown_qty" = 0
      end if;
      if "new_name"."n_pur_godown_flag" = 1 then
        set "d_new_godown_qty" = "new_name"."n_qty"
      else
        set "d_new_godown_qty" = 0
      end if;
      if "old_name"."n_qty" < 0 then
        update "stock" set "stock"."n_adjustment_qty" = "stock"."n_adjustment_qty"-"old_name"."n_qty",
          "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty",
          "stock"."n_godown_qty" = "stock"."n_godown_qty"-"d_old_godown_qty",
          "stock"."t_ltime" = "now"()
          where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no"
      end if;
      ---jagamohan
      if "old_name"."n_scheme_qty" < 0 then
        update "stock"
          set "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"old_name"."n_scheme_qty",
          "stock"."t_ltime" = "now"()
          where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no"
      end if;
      update "stock" set "stock"."n_adjustment_qty" = "stock"."n_adjustment_qty"+"new_name"."n_qty",
        "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty",
        "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"new_name"."n_scheme_qty",
        "stock"."n_godown_qty" = "stock"."n_godown_qty"+"d_new_godown_qty",
        "stock"."t_ltime" = "now"()
        where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
      if "old_name"."n_qty" > 0 then
        update "stock" set "stock"."n_adjustment_qty" = "stock"."n_adjustment_qty"-"old_name"."n_qty",
          "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty",
          "stock"."n_godown_qty" = "stock"."n_godown_qty"-"d_old_godown_qty",
          "stock"."t_ltime" = "now"()
          where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no"
      end if;
      ---jagamohan
      if "old_name"."n_scheme_qty" > 0 then
        update "stock"
          set "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"old_name"."n_scheme_qty",
          "stock"."t_ltime" = "now"()
          where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no"
      end if;
      if "new_name"."n_enable_supp_stock_sale" = 1 or "old_name"."n_enable_supp_stock_sale" = 1 then
        if "old_name"."n_enable_supp_stock_sale" = 1 then
          delete from "Stock_inward_outwad" where "c_item_code" = "old_name"."c_item_code" and "c_batch_no" = "old_name"."c_batch_no"
            and "n_tran_no" = "old_name"."n_srno" and "c_supp_code" = "old_name"."c_code_supp" and "c_br_code" = "old_name"."c_br_code"
        end if;
        if "new_name"."n_enable_supp_stock_sale" = 1 then
          insert into "Stock_inward_outwad"( "c_item_code","c_batch_no","n_tran_no","c_supp_code","n_qty","n_schm_qty","d_date","n_flag","c_br_code" ) values
            ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_srno","new_name"."c_code_supp","new_name"."n_qty","new_name"."n_scheme_qty","new_name"."d_date",6,"new_name"."c_br_code" ) 
        end if end if;
      if "new_name"."n_qty" < 0 and "new_name"."n_retu_supp" = 1 then
        select "c_item_code" into "c_tmp_code" from "stock_eb" where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
        if sqlcode = 100 then
          insert into "stock_eb"( "c_item_code","c_batch_no","n_eqty","n_bqty","n_oqty","n_rqty" ) values
            ( "new_name"."c_item_code","new_name"."c_batch_no",
            if "new_name"."n_adj_type" = 2 then-"new_name"."n_qty" else 0 endif,
            if "new_name"."n_adj_type" = 1 then-"new_name"."n_qty" else 0 endif,
            if "new_name"."n_adj_type" <> 1 and "new_name"."n_adj_type" <> 2 and "new_name"."n_adj_type" <> 5 then-"new_name"."n_qty" else 0 endif,
            if "new_name"."n_adj_type" = 5 then-"new_name"."n_qty" else 0 endif ) 
        else
          update "stock_eb"
            set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "new_name"."n_adj_type" = 2 then-"new_name"."n_qty" else 0 endif,
            "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "new_name"."n_adj_type" = 1 then-"new_name"."n_qty" else 0 endif,
            "stock_eb"."n_oqty" = "stock_eb"."n_oqty"+if "new_name"."n_adj_type" <> 1 and "new_name"."n_adj_type" <> 2 and "new_name"."n_adj_type" <> 5 then-"new_name"."n_qty" else 0 endif,
            "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "new_name"."n_adj_type" = 5 then-"new_name"."n_qty" else 0 endif
            where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no"
        end if;
        if "new_name"."n_adj_type" = 3 then
          if(select "isnull"("n_update_item_status_from_stk_adj",1) from "System_Parameter") = 1 then
            update "item_mst" set "n_old_flag" = 2,"d_ldate" = "uf_default_date"() where "c_code" = "new_name"."c_item_code"
          end if end if end if; //if new_name.n_qty < 0 and new_name.n_retu_supp = 1 then
      if "old_name"."n_qty" < 0 and "old_name"."n_retu_supp" = 1 then
        update "stock_eb"
          set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "old_name"."n_adj_type" = 2 then "old_name"."n_qty" else 0 endif,
          "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "old_name"."n_adj_type" = 1 then "old_name"."n_qty" else 0 endif,
          "stock_eb"."n_oqty" = "stock_eb"."n_oqty"+if "old_name"."n_adj_type" <> 1 and "old_name"."n_adj_type" <> 2 and "old_name"."n_adj_type" <> 5 then "old_name"."n_qty" else 0 endif,
          "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "old_name"."n_adj_type" = 5 then "old_name"."n_qty" else 0 endif
          where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
      //EOF old_name.n_cancel_flag <> 1 and old_name.n_post = 1
      end if
    elseif "old_name"."n_cancel_flag" <> 1 and "old_name"."n_post" = 0 and "new_name"."n_post" = 1 then
      if "new_name"."n_pur_godown_flag" = 1 then
        set "d_new_godown_qty" = "new_name"."n_qty"
      else
        set "d_new_godown_qty" = 0
      end if;
      insert into "stock_ledger"
        ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
        "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_prefix" ) values
        ( "new_name"."n_srno","new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_date",
        "new_name"."n_qty","old_name"."n_scheme_qty",0,"new_name"."n_sale_rate",0,0,0,
        0,0,0,0,0,0,0,0,"new_name"."c_hsn_sac_code",@c_prefix ) ;
      update "stock" set "stock"."n_adjustment_qty" = "stock"."n_adjustment_qty"+"new_name"."n_qty",
        "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty",
        "stock"."n_godown_qty" = "stock"."n_godown_qty"+"d_new_godown_qty",
        "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"new_name"."n_scheme_qty",
        "stock"."t_ltime" = "now"()
        where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
      if "new_name"."n_enable_supp_stock_sale" = 1 or "old_name"."n_enable_supp_stock_sale" = 1 then
        if "old_name"."n_enable_supp_stock_sale" = 1 then
          delete from "Stock_inward_outwad" where "c_item_code" = "old_name"."c_item_code" and "c_batch_no" = "old_name"."c_batch_no"
            and "n_tran_no" = "old_name"."n_srno" and "c_supp_code" = "old_name"."c_code_supp" and "c_br_code" = "old_name"."c_br_code"
        end if;
        if "new_name"."n_enable_supp_stock_sale" = 1 then
          insert into "Stock_inward_outwad"( "c_item_code","c_batch_no","n_tran_no","c_supp_code","n_qty","n_schm_qty","d_date","n_flag","c_br_code" ) values
            ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_srno","new_name"."c_code_supp","new_name"."n_qty","new_name"."n_scheme_qty","new_name"."d_date",6,"new_name"."c_br_code" ) 
        end if end if;
      if "new_name"."n_qty" < 0 and "new_name"."n_retu_supp" = 1 then
        select "c_item_code" into "c_tmp_code" from "stock_eb" where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
        if sqlcode = 100 then
          insert into "stock_eb"( "c_item_code","c_batch_no","n_eqty","n_bqty","n_oqty","n_rqty" ) values
            ( "new_name"."c_item_code","new_name"."c_batch_no",
            if "new_name"."n_adj_type" = 2 then(-"new_name"."n_qty") else 0 endif,
            if "new_name"."n_adj_type" = 1 then-"new_name"."n_qty" else 0 endif,
            if "new_name"."n_adj_type" <> 1 and "new_name"."n_adj_type" <> 2 and "new_name"."n_adj_type" <> 5 then-"new_name"."n_qty" else 0 endif,
            if "new_name"."n_adj_type" = 5 then-"new_name"."n_qty" else 0 endif ) 
        else
          update "stock_eb"
            set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "new_name"."n_adj_type" = 2 then-"new_name"."n_qty" else 0 endif,
            "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "new_name"."n_adj_type" = 1 then-"new_name"."n_qty" else 0 endif,
            "stock_eb"."n_oqty" = "stock_eb"."n_oqty"+if "new_name"."n_adj_type" <> 1 and "new_name"."n_adj_type" > 2 and "new_name"."n_adj_type" <> 5 then(-"new_name"."n_qty") else 0 endif,
            "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "new_name"."n_adj_type" = 5 then-"new_name"."n_qty" else 0 endif
            where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no"
        end if;
        if "new_name"."n_adj_type" = 3 then
          if(select "isnull"("n_update_item_status_from_stk_adj",1) from "System_Parameter") = 1 then
            update "item_mst" set "n_old_flag" = 2,"d_ldate" = "uf_default_date"() where "c_code" = "new_name"."c_item_code"
          end if //if new_name.n_qty < 0 and new_name.n_retu_supp = 1 then
        end if //EOF if old_name.n_tran_type = 0 then //batch adjustment    
      end if
    end if
  end if
end;
CREATE TRIGGER "update_stock_from_crnt_det" after insert order 1 on
------------------------
----------------------insert crnt det
--------------crnt det insert trigger
"DBA"."crnt_det"
referencing new as "new_name"
for each row
begin
  declare "d_def_date" date;
  declare "c_tmp_code" char(6);
  declare @d_sale_rate numeric(14,3);
  declare @year char(2);
  declare "c_rak" char(6);
  declare "rack_grp_code" char(10);
  declare @pk,@limitcheck,@existance_check numeric(18);
  declare @brcode char(6);
  declare "cprefix" char(2);
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  select "right"("db_name"(),2) into @year;
  -- if len(string(new_name.n_srno)) < 8 then
  --   set @pk = uf_pk(@brcode,@year,'CR',new_name.n_srno,0,'')
  -- else
  set @pk = "new_name"."n_srno";
  set @existance_check = 0;
  -- end if;
  set "cprefix" = "uf_get_pk_component"(@pk,3);
  set @year = "uf_get_pk_component"(@pk,1);
  set "d_def_date" = "uf_default_date"();
  --
  if "new_name"."n_post" <> 1 then
    return
  end if;
  if "new_name"."n_crnt_tmp_no" > 0 then
    update "crnt_tmp_det" set "crnt_tmp_det"."n_crnt_no" = "new_name"."n_srno"
      where "crnt_tmp_det"."n_srno" = "new_name"."n_srno"
      and "crnt_tmp_det"."c_item_code" = "new_name"."c_item_code"
      and "crnt_tmp_det"."c_batch_no" = "new_name"."c_batch_no"
  end if;
  if("new_name"."n_type_of_ret" = 1 or "new_name"."n_type_of_ret" = 2 or "new_name"."n_type_of_ret" = 5) and "new_name"."n_supp_ret" = 1 then
    select "count"() into @existance_check from "stock_eb" where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
    if @existance_check is null then
      set @existance_check = 0
    end if;
    if @existance_check = 0 then
      insert into "stock_eb"( "c_item_code","c_batch_no","n_eqty","n_bqty","n_oqty","n_loose_eqty","n_loose_bqty","n_loose_oqty","n_rqty","n_loose_rqty" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no",
        if "new_name"."n_type_of_ret" = 2 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        if "new_name"."n_type_of_ret" = 1 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,0,
        if "new_name"."n_type_of_ret" = 2 then "new_name"."n_loose_qty" else 0 endif,
        if "new_name"."n_type_of_ret" = 1 then "new_name"."n_loose_qty" else 0 endif,
        0,
        if "new_name"."n_type_of_ret" = 5 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        if "new_name"."n_type_of_ret" = 5 then "new_name"."n_loose_qty" else 0 endif ) 
    else
      update "stock_eb"
        set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "new_name"."n_type_of_ret" = 2 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "new_name"."n_type_of_ret" = 1 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"+if "new_name"."n_type_of_ret" = 2 then "new_name"."n_loose_qty" else 0 endif,
        "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"+if "new_name"."n_type_of_ret" = 1 then "new_name"."n_loose_qty" else 0 endif,
        "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "new_name"."n_type_of_ret" = 5 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"+if "new_name"."n_type_of_ret" = 5 then "new_name"."n_loose_qty" else 0 endif
        where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no"
    end if end if; //EOF if(new_name.n_type_of_ret = 1 or new_name.n_type_of_ret = 2 or new_name.n_type_of_ret = 5) and new_name.n_supp_ret = 1 then
  if "new_name"."n_type_of_ret" = 3 or "new_name"."n_type_of_ret" = 4 then
    --select c_item_code into c_tmp_code from stock where stock.c_item_code = new_name.c_item_code and stock.c_batch_no = new_name.c_batch_no;
    update "stock" set "stock"."n_credit_note_qty" = "stock"."n_credit_note_qty"+"new_name"."n_qty",
      "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty",
      "stock"."n_credit_note_scheme_qty" = "stock"."n_credit_note_scheme_qty"+"new_name"."n_scheme_qty",
      "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"new_name"."n_scheme_qty",
      "stock"."t_ltime" = "now"(),
      "stock"."n_godown_qty" = if "new_name"."n_godown_flag" = 1 then "stock"."n_godown_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty" else "stock"."n_godown_qty" endif
      where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
    if sqlstate = '02000' then
      raiserror 18000 "Type of return is Sales Return or Non-moving but specified Item-batch is not found in stock."
    end if;
    if "new_name"."n_enable_supp_stock_sale" = 1 then
      call "usp_stock_supp_sale_crnt"("new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_qty","new_name"."n_scheme_qty","new_name"."n_srno","new_name"."d_crnt_date","new_name"."n_mrp","new_name"."n_sale_rate","new_name"."n_purchase_rate","new_name"."d_expiry_date","isnull"("new_name"."n_branch",0),"isnull"("new_name"."n_product_value",0),"isnull"("new_name"."n_ts_value",0),"new_name"."c_mfac_code","isnull"("new_name"."n_type_of_ret",0))
    end if
  else select "count"() into @existance_check from "stock" where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
    if @existance_check is null then
      set @existance_check = 0
    end if;
    if @existance_check = 0 then
      insert into "stock"( "c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty","n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty","n_mrp","n_purchase_rate","n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate","d_date","n_ptr","n_st_rate" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_expiry_date",0,0,0,0,0,0,0,0,0,"new_name"."n_mrp","new_name"."n_purchase_rate","new_name"."n_sale_rate",0,0,0,0,"new_name"."n_purchase_rate","d_def_date",0,"new_name"."n_st_per" ) 
    end if end if; //EOF if new_name.n_type_of_ret = 3 or new_name.n_type_of_ret = 4 then
  insert into "stock_ledger"
    ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
    "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_gst_code",
    "n_service_qty","n_scheme_disc","n_product_value","n_taxable_amt","n_ref_no","d_ref_date","n_service_chg","n_type_of_ret","n_eb_flag","c_prefix","n_add_cess_amt","n_add_cess" ) values
    ( @pk,"new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_crnt_date",
    "new_name"."n_qty","new_name"."n_scheme_qty",0,"new_name"."n_sale_rate","new_name"."n_disc_amt",0,0,
    "new_name"."n_cgst_per",(-1*"new_name"."n_cgst_amt"),"new_name"."n_sgst_per",(-1*"new_name"."n_sgst_amt"),"new_name"."n_igst_per",(-1*"new_name"."n_igst_amt"),"new_name"."n_gst_cess_per",
    (-1*"new_name"."n_gst_cess_amt"),"new_name"."c_hsn_sac_code","new_name"."c_gst_code","isnull"("new_name"."n_service_qty",0),"new_name"."n_scheme_disc","new_name"."n_product_value",
    (-1*"new_name"."n_taxable_amt"),"new_name"."n_inv_srno","new_name"."d_inv_date",(-1*"new_name"."n_service_chg"),"new_name"."n_type_of_ret",if "new_name"."n_type_of_ret" = 3 or "new_name"."n_type_of_ret" = 4 then 0 else 1 endif,"cprefix",
    (-1*"new_name"."n_add_cess_amt"),"new_name"."n_add_cess" ) ;
  --StoreTrack Insertion 
  if "new_name"."n_store_track" = 2 and "new_name"."n_post" = 1 then --insert 
    print 'CRNT DET INSERT';
    select "c_rack_code" into "c_rak" from "item_mst" where "item_mst"."c_code" = "new_name"."c_item_code";
    select "c_group" into "rack_grp_code" from "rack_mst" where "rack_mst"."c_code" = "c_rak";
    insert into "st_track_in"
      ( "c_doc_no",
      "n_seq","c_item_code","c_batch_no","n_qty",
      "c_tray_code","n_complete","t_time","c_godown_code","c_rack_code",
      "c_rack_grp_code",
      "c_user" ) 
      select "string"('000/'+"string"("crnt_mst"."c_year")+'/'+"string"("crnt_mst"."c_prefix")+'/'+"string"("new_name"."n_srno")),
        "new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_qty"+"isnull"("new_name"."n_scheme_qty",0),
        "new_name"."c_tray_code",0 as "n_complete","now"() as "t_time",'-' as "c_godown_code",
        "c_rak","rack_grp_code",null
        from "crnt_mst"
        where "crnt_mst"."n_srno" = "new_name"."n_srno";
    if sqlstate = '02000' then
      raiserror 18000 "Error, Cannot add item in sttrack table. Please restart the system."
    end if
  end if
end;
CREATE TRIGGER "update_stock_from_crnt_det_update" before update order 1 on
----------------------
-------------
--------------------------------------
---------------------update crnt_det
--------------------------crnt det update
----------------------------added bcoz d_def_date varble was missing-----on 17/05/2017
"DBA"."crnt_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "d_def_date" date;
  declare "b_old_stock_effect" decimal(1);
  declare "b_new_stock_effect" decimal(1);
  declare "c_tmp_code" char(6);
  declare @d_sale_rate numeric(14,3);
  declare @year char(2);
  declare "c_rak" char(6);
  declare "rack_grp_code" char(10);
  declare @brcode char(6);
  declare @pk,@limitcheck,@existance_check numeric(18);
  declare "cprefix" char(2);
  select "right"("db_name"(),2),"System_Parameter"."c_br_code" into @year,@brcode from "System_Parameter";
  if "old_name"."n_post"+"new_name"."n_post" = 0 then
    return
  end if;
  --  if len(string(new_name.n_srno)) < 8 then
  --    set @pk = uf_pk(@brcode,@year,'CR',new_name.n_srno,0,'')
  --  else
  set @existance_check = 0;
  set @pk = "new_name"."n_srno";
  --  end if;
  set "cprefix" = "uf_get_pk_component"(@pk,3);
  set @year = "uf_get_pk_component"(@pk,1);
  set "d_def_date" = "uf_default_date"();
  delete from "stock_ledger"
    where "stock_ledger"."n_srno" = @pk
    and "stock_ledger"."n_seq" >= 0
    and "stock_ledger"."c_item_code" = "old_name"."c_item_code"
    and "stock_ledger"."c_batch_no" = "old_name"."c_batch_no";
  insert into "stock_ledger"
    ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
    "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_gst_code",
    "n_service_qty","n_scheme_disc","n_product_value","n_taxable_amt","n_ref_no","d_ref_date","n_service_chg","n_type_of_ret","n_eb_flag","c_prefix","n_add_cess_amt","n_add_cess" ) values
    ( @pk,"new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_crnt_date",
    "new_name"."n_qty","new_name"."n_scheme_qty",0,"new_name"."n_sale_rate","new_name"."n_disc_amt",0,0,
    "new_name"."n_cgst_per",(-1*"new_name"."n_cgst_amt"),"new_name"."n_sgst_per",(-1*"new_name"."n_sgst_amt"),"new_name"."n_igst_per",(-1*"new_name"."n_igst_amt"),"new_name"."n_gst_cess_per",
    (-1*"new_name"."n_gst_cess_amt"),"new_name"."c_hsn_sac_code","new_name"."c_gst_code","isnull"("new_name"."n_service_qty",0),"new_name"."n_scheme_disc","new_name"."n_product_value",
    (-1*"new_name"."n_taxable_amt"),"new_name"."n_inv_srno","new_name"."d_inv_date",(-1*"new_name"."n_service_chg"),"new_name"."n_type_of_ret",if "new_name"."n_type_of_ret" = 3 or "new_name"."n_type_of_ret" = 4 then 0 else 1 endif,"cprefix",
    (-1*"new_name"."n_add_cess_amt"),"new_name"."n_add_cess" ) ;
  --
  //-----Aftrer post change of type and supplier retrun not allowed so commented
  /*    
if(old_name.n_type_of_ret = 1 or old_name.n_type_of_ret = 2 or old_name.n_type_of_ret = 5) and old_name.n_supp_ret = 1 and old_name.n_post = 1 then
update stock_eb
set stock_eb.n_eqty = stock_eb.n_eqty-if old_name.n_type_of_ret = 2 then old_name.n_qty+old_name.n_scheme_qty else 0 endif,
stock_eb.n_bqty = stock_eb.n_bqty-if old_name.n_type_of_ret = 1 then old_name.n_qty+old_name.n_scheme_qty else 0 endif,
stock_eb.n_loose_eqty = stock_eb.n_loose_eqty-if old_name.n_type_of_ret = 2 then old_name.n_loose_qty else 0 endif,
stock_eb.n_loose_bqty = stock_eb.n_loose_bqty-if old_name.n_type_of_ret = 1 then old_name.n_loose_qty else 0 endif,
stock_eb.n_rqty = stock_eb.n_rqty-if old_name.n_type_of_ret = 5 then old_name.n_qty+old_name.n_scheme_qty else 0 endif,
stock_eb.n_loose_rqty = stock_eb.n_loose_rqty-if old_name.n_type_of_ret = 5 then old_name.n_loose_qty else 0 endif
where stock_eb.c_item_code = old_name.c_item_code and stock_eb.c_batch_no = old_name.c_batch_no
end if;
*/
  if "new_name"."n_crnt_tmp_no" > 0 then
    update "crnt_tmp_det" set "crnt_tmp_det"."n_crnt_no" = "new_name"."n_srno"
      where "crnt_tmp_det"."n_srno" = "new_name"."n_srno"
      and "crnt_tmp_det"."c_item_code" = "new_name"."c_item_code"
      and "crnt_tmp_det"."c_batch_no" = "new_name"."c_batch_no"
  end if;
  if("new_name"."n_type_of_ret" = 1 or "new_name"."n_type_of_ret" = 2 or "old_name"."n_type_of_ret" = 5) and "new_name"."n_supp_ret" = 1 then
    select "count"() into @existance_check from "stock" where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
    if @existance_check is null then
      set @existance_check = 0
    end if;
    if @existance_check = 0 then
      insert into "stock"( "c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty","n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty","n_mrp","n_purchase_rate","n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate","d_date","n_ptr" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_expiry_date",0,0,0,0,0,0,0,0,0,"new_name"."n_mrp","new_name"."n_purchase_rate","new_name"."n_sale_rate",0,0,0,0,"new_name"."n_purchase_rate","d_def_date",0 ) ;
      if sqlstate = '02000' then
        raiserror 18000 "Error, Cannot add item in stock table. Please restart the system."
      end if end if;
    set @existance_check = 0;
    select "count"() into @existance_check from "stock_eb" where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
    if @existance_check is null then
      set @existance_check = 0
    end if;
    if @existance_check = 0 then
      insert into "stock_eb"( "c_item_code","c_batch_no","n_eqty","n_bqty","n_oqty","n_loose_eqty","n_loose_bqty","n_loose_oqty","n_rqty","n_loose_rqty" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no",
        if "new_name"."n_type_of_ret" = 2 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        if "new_name"."n_type_of_ret" = 1 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,0,
        if "new_name"."n_type_of_ret" = 2 then "new_name"."n_loose_qty" else 0 endif,
        if "new_name"."n_type_of_ret" = 1 then "new_name"."n_loose_qty" else 0 endif,
        0,
        if "new_name"."n_type_of_ret" = 5 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        if "new_name"."n_type_of_ret" = 5 then "new_name"."n_loose_qty" else 0 endif ) 
    else
      update "stock_eb"
        set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "new_name"."n_type_of_ret" = 2 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "new_name"."n_type_of_ret" = 1 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"+if "new_name"."n_type_of_ret" = 2 then "new_name"."n_loose_qty" else 0 endif,
        "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"+if "new_name"."n_type_of_ret" = 1 then "new_name"."n_loose_qty" else 0 endif,
        "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "new_name"."n_type_of_ret" = 5 then "new_name"."n_qty"+"new_name"."n_scheme_qty" else 0 endif,
        "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"+if "new_name"."n_type_of_ret" = 5 then "new_name"."n_loose_qty" else 0 endif
        where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
      if "old_name"."n_post" = 1 then
        update "stock_eb"
          set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"-if "old_name"."n_type_of_ret" = 2 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
          "stock_eb"."n_bqty" = "stock_eb"."n_bqty"-if "old_name"."n_type_of_ret" = 1 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
          "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"-if "old_name"."n_type_of_ret" = 2 then "old_name"."n_loose_qty" else 0 endif,
          "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"-if "old_name"."n_type_of_ret" = 1 then "old_name"."n_loose_qty" else 0 endif,
          "stock_eb"."n_rqty" = "stock_eb"."n_rqty"-if "old_name"."n_type_of_ret" = 5 then "old_name"."n_qty"+"old_name"."n_scheme_qty" else 0 endif,
          "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"-if "old_name"."n_type_of_ret" = 5 then "old_name"."n_loose_qty" else 0 endif
          where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
      //EOF @existance_check 
      end if end if end if; //EOFif(new_name.n_type_of_ret = 1 or new_name.n_type_of_ret = 2 or old_name.n_type_of_ret = 5) and new_name.n_supp_ret = 1 then
  if "new_name"."n_type_of_ret" = 3 or "new_name"."n_type_of_ret" = 4 then
    update "stock" set "stock"."n_credit_note_qty" = "stock"."n_credit_note_qty"+"new_name"."n_qty",
      "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty",
      "stock"."n_credit_note_scheme_qty" = "stock"."n_credit_note_scheme_qty"+"new_name"."n_scheme_qty",
      "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"new_name"."n_scheme_qty",
      "stock"."t_ltime" = "now"(),
      "stock"."n_godown_qty" = if "new_name"."n_godown_flag" = 1 then "stock"."n_godown_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty" else "stock"."n_godown_qty" endif
      where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
    if "old_name"."n_post" = 1 then
      update "stock" set "stock"."n_credit_note_qty" = "stock"."n_credit_note_qty"-"old_name"."n_qty",
        "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty"-"old_name"."n_scheme_qty",
        "stock"."n_credit_note_scheme_qty" = "stock"."n_credit_note_scheme_qty"-"old_name"."n_scheme_qty",
        "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"old_name"."n_scheme_qty",
        "stock"."t_ltime" = "now"(),
        "stock"."n_godown_qty" = if "old_name"."n_godown_flag" = 1 then "stock"."n_godown_qty"-"old_name"."n_qty"-"old_name"."n_scheme_qty" else "stock"."n_godown_qty" endif
        where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no"
    end if;
    if sqlstate = '02000' then
      raiserror 18000 "Type of return is Sales Return or Non-moving but specified Item-batch is not found in stock."
    end if;
    if "old_name"."n_enable_supp_stock_sale" = 1 then
      delete from "invoice_det_stk_sale"
        where "c_item_code" = "old_name"."c_item_code" and "c_batch_no" = "old_name"."c_batch_no" and "n_tran_no" = "old_name"."n_srno";
      if "new_name"."n_enable_supp_stock_sale" = 1 then
        call "usp_stock_supp_sale_crnt"("new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_qty","new_name"."n_scheme_qty","new_name"."n_srno","new_name"."d_crnt_date","new_name"."n_mrp","new_name"."n_sale_rate","new_name"."n_purchase_rate","new_name"."d_expiry_date","isnull"("new_name"."n_branch",0),"isnull"("new_name"."n_product_value",0),"isnull"("new_name"."n_ts_value",0),"new_name"."c_mfac_code","isnull"("new_name"."n_type_of_ret",0))
      end if end if;
    select "n_sale_rate" into @d_sale_rate from "stock" where "c_item_code" = "new_name"."c_item_code" and "c_batch_no" = "new_name"."c_batch_no";
    //New Entry	
    if "new_name"."n_scheme_qty" <> 0 then
      delete from "scheme_ledger_det"
        where "c_prefix" = 'CR'
        and "c_year" = @year
        and "n_srno" = "old_name"."n_srno"
        and "c_item_code" = "old_name"."c_item_code"
        and "c_batch_no" = "old_name"."c_batch_no"
        and "n_seq" = "old_name"."n_seq";
      insert into "scheme_ledger_det"
        ( "c_prefix","c_year","n_srno","c_item_code","c_batch_no","n_seq","d_date_time","c_remark","n_qty","n_rate","n_value","n_qty_disc_flag" ) values
        ( 'CR',@year,"new_name"."n_srno","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_seq","GETDATE"(),'CRNT',"new_name"."n_scheme_qty",@d_sale_rate,(@d_sale_rate*"new_name"."n_scheme_qty"),1 ) ;
      update "scheme_mst" set "n_used_sch_qty" = "n_used_sch_qty"-"new_name"."n_scheme_qty" where "c_item_code" = "new_name"."c_item_code" and "c_batch_no" = "new_name"."c_batch_no"
    end if;
    if "new_name"."n_scheme_disc" <> 0 then
      delete from "scheme_ledger_det"
        where "c_prefix" = 'CR'
        and "c_year" = @year
        and "n_srno" = "old_name"."n_srno"
        and "c_item_code" = "old_name"."c_item_code"
        and "c_batch_no" = "old_name"."c_batch_no"
        and "n_seq" = "old_name"."n_seq";
      insert into "scheme_ledger_det"
        ( "c_prefix","c_year","n_srno","c_item_code","c_batch_no","n_seq","d_date_time","c_remark","n_qty","n_rate","n_value","n_qty_disc_flag" ) values
        ( 'CR',@year,"new_name"."n_srno","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_seq","GETDATE"(),'CRNT',1,"new_name"."n_scheme_disc","new_name"."n_scheme_disc",2 ) 
    end if end if; //EOF if new_name.n_type_of_ret = 3 or new_name.n_type_of_ret = 4 then
  return;
  -- storetrack insertion
  if "new_name"."n_store_track" = 2 and "old_name"."n_post" = 0 and "new_name"."n_post" = 1 then --insert 
    select "c_rack_code" into "c_rak" from "item_mst" where "item_mst"."c_code" = "new_name"."c_item_code";
    select "c_group" into "rack_grp_code" from "rack_mst" where "rack_mst"."c_code" = "c_rak";
    insert into "st_track_in"
      ( "c_doc_no",
      "n_seq","c_item_code","c_batch_no","n_qty",
      "c_tray_code","n_complete","t_time","c_godown_code","c_rack_code",
      "c_rack_grp_code",
      "c_user" ) 
      select "string"('000/'+"string"("crnt_mst"."c_year")+'/'+"string"("crnt_mst"."c_prefix")+'/'+"string"("new_name"."n_srno")),
        "new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_qty"+"isnull"("new_name"."n_scheme_qty",0),
        "new_name"."c_tray_code",0 as "n_complete","now"() as "t_time",'-' as "c_godown_code",
        "c_rak","rack_grp_code",null
        from "crnt_mst"
        where "crnt_mst"."n_srno" = "new_name"."n_srno"
  end if
end;
CREATE TRIGGER "update_stock_from_crnt_repl_issue" after insert order 1 on
-----------sales invoice det insert
---Inv Insert Trigger Start
"DBA"."crnt_repl_issue_det"
referencing new as "new_name"
for each row
begin
  declare @year char(2);
  declare @brcode char(6);
  declare @pk numeric(16);
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  if "len"("string"("new_name"."n_srno")) < 8 then
    set @pk = "uf_pk"(@brcode,@year,'CI',"new_name"."n_srno",0,'')
  else
    set @pk = "new_name"."n_srno"
  end if;
  /*
if new_name.n_post <> 1 then
return
end if;
*/
  update "stock"
    set "stock"."n_scheme_sale_qty" = "stock"."n_scheme_sale_qty"+"new_name"."n_qty",
    "stock"."n_balance_qty" = "stock"."n_balance_qty"-"new_name"."n_qty",
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "new_name"."c_item_code"
    and "stock"."c_batch_no" = "new_name"."c_batch_no";
  insert into "stock_ledger"
    ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
    "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_gst_code","n_service_qty","n_scheme_disc","n_product_value","n_taxable_amt","n_ref_no","d_ref_date","n_service_chg" ) values
    ( @pk,"new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_crnt_repl_date",
    -1*"new_name"."n_qty",-1*"new_name"."n_scheme_qty",0,"new_name"."n_sale_rate","new_name"."n_disc_amt",0,0,
    "new_name"."n_cgst_per","new_name"."n_cgst_amt","new_name"."n_sgst_per","new_name"."n_sgst_amt","new_name"."n_igst_per","new_name"."n_igst_amt","new_name"."n_gst_cess_per","new_name"."n_gst_cess_amt","new_name"."c_hsn_sac_code","new_name"."c_gst_code","new_name"."n_service_qty","new_name"."n_scheme_disc","new_name"."n_product_value","new_name"."n_taxable_amt","new_name"."n_ref_srno","new_name"."d_ref_date","new_name"."n_service_chg" ) 
end;
CREATE TRIGGER "update_stock_from_dbnt_det_delete" after delete order 3 on
"DBA"."dbnt_det"
referencing old as "old_name"
for each row
begin
  update "stock" set "stock"."n_balance_qty" = "stock"."n_balance_qty"+"old_name"."n_qty",
    "stock"."n_debit_note_qty" = "stock"."n_debit_note_qty"-"old_name"."n_qty",
    "stock"."t_ltime" = "now"(),"stock"."d_ldate" = "today"()
    where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
  if "old_name"."n_enable_supp_stock_sale" = 1 then
    delete from "Stock_inward_outwad" where "c_item_code" = "old_name"."c_item_code" and "c_batch_no" = "old_name"."c_batch_no" and "n_tran_no" = "old_name"."n_srno" and "c_supp_code" = "old_name"."c_code_supp"
  end if
end;
CREATE TRIGGER "update_stock_from_dc_det" after insert order 1 on
"DBA"."dc_det"
referencing new as "new_name"
for each row
begin
  declare "d_cnd" numeric(10);
  declare "l_cnt" numeric(10);
  declare "cprefix" char(6);
  declare @year char(2);
  declare "ld_pend_qty" numeric(10);
  declare "l_pend_item" numeric(6);
  declare "d_pend_det_item" numeric(6);
  declare "c_ref_doc_no" char(25);
  declare "n_ref_seq_no" numeric(11);
  declare @brcode char(6);
  select "c_br_code" into @brcode from "System_Parameter";
  select "right"("db_name"(),2) into @year;
  select "c_prefix"
    into "cprefix" from "dc_mst" where "dc_mst"."n_srno" = "new_name"."n_srno" and "c_year" = @year;
  if "new_name"."n_store_track" = 9 then
    select "count"() into "d_cnd" from "st_track_mst" where "st_track_mst"."c_doc_no"
       = @brcode+'/'+"new_name"."c_ord_year"+'/'+"new_name"."c_ord_prefix"+'/'+"string"("new_name"."n_ord_srno") and "st_track_mst"."n_inout" = 0;
    if "d_cnd" is null then set "d_cnd" = 0 end if;
    if "d_cnd" <> 0 then //Processing from Order ,Rels Hold qty
      update "stock" set "stock"."n_store_track_qty" = "stock"."n_store_track_qty"-("new_name"."n_qty"+"new_name"."n_scheme_qty"),
        "stock"."n_hold_qty" = "stock"."n_hold_qty"-("new_name"."n_qty"+"new_name"."n_scheme_qty")
        where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no"
    end if;
    --need to update st_track_pick confirm qty 
    if "new_name"."c_ord_year" is not null then
      --So 
      set "c_ref_doc_no" = @brcode+'/'+"new_name"."c_ord_year"+'/'+"new_name"."c_ord_prefix"+'/'+"string"("new_name"."n_ord_srno");
      set "n_ref_seq_no" = "new_name"."n_ord_seq"
    else --inv 
      set "c_ref_doc_no" = @brcode+'/'+@year+'/'+"cprefix"+'/'+"string"("new_name"."n_srno");
      set "n_ref_seq_no" = "new_name"."n_seq"
    end if;
    update "st_track_pick" set "st_track_pick"."n_confirm_qty" = "st_track_pick"."n_confirm_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty"
      where "c_doc_no" = "c_ref_doc_no"
      and "st_track_pick"."c_item_code" = "new_name"."c_item_code"
      and "st_track_pick"."c_tray_code" = "new_name"."c_tray_code"
      and "st_track_pick"."n_seq" = "new_name"."n_pick_seq" and "n_inout" = 0;
    select "sum"("n_qty")-"isnull"("sum"("n_confirm_qty"),0)-"isnull"("sum"("n_reject_qty"),0)
      into "ld_pend_qty" from "st_track_pick"
      where "c_doc_no" = "c_ref_doc_no"
      and "st_track_pick"."c_item_code" = "new_name"."c_item_code"
      and "st_track_pick"."n_org_seq" = "n_ref_seq_no" and "n_inout" = 0;
    if "ld_pend_qty" <= 0 then
      select "n_bal_qty"
        into "d_pend_det_item" from "st_track_det"
        where "c_doc_no" = "c_ref_doc_no"
        and "c_item_code" = "new_name"."c_item_code"
        and "n_seq" = "n_ref_seq_no" and "n_inout" = 0;
      if "d_pend_det_item" <= 0 then
        update "st_track_det" set "n_complete" = 9
          where "c_doc_no" = "c_ref_doc_no"
          and "c_item_code" = "new_name"."c_item_code"
          and "n_seq" = "n_ref_seq_no" and "n_inout" = 0
      end if end if;
    select "count"() into "l_cnt" from "st_track_det" where "c_doc_no" = "c_ref_doc_no" and("n_complete" not in( 9,2 ) );
    if "l_cnt" = 0 then
      update "st_track_mst" set "n_complete" = 9
        where "c_doc_no" = "c_ref_doc_no"
        and "st_track_mst"."n_inout" = 0
    end if;
    --  //Will giv u the pend item from pick table 
    select "count"() into "l_pend_item" from "st_track_pick"
      where "c_tray_code" = "new_name"."c_tray_code"
      and "c_doc_no" = "c_ref_doc_no"
      and "n_qty"-("n_confirm_qty"+"n_reject_qty") > 0;
    if "l_pend_item" is null then set "l_pend_item" = 0 end if;
    if "l_cnt" > 0 then //items pend
    else
      if "l_pend_item" >= 1 then //Dont Rels
      else
        delete from "st_track_tray_move"
          where "st_track_tray_move"."c_doc_no" = "c_ref_doc_no"
          and "st_track_tray_move"."c_tray_code" = "new_name"."c_tray_code" and "n_inout" = 9
      end if end if end if;
  update "stock" set "stock"."n_dc_qty" = "stock"."n_dc_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty"-"new_name"."n_bill_qty"-"new_name"."n_bill_scheme_qty"-"new_name"."n_ret_qty"-"new_name"."n_ret_scheme_qty",
    "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"new_name"."n_scheme_qty"+"new_name"."n_bill_scheme_qty"+"new_name"."n_ret_scheme_qty",
    "stock"."t_ltime" = "now"(),
    "stock"."n_godown_qty" = if "new_name"."n_godown_flag" = 1 then "stock"."n_godown_qty"-"new_name"."n_qty"-"new_name"."n_scheme_qty"+"new_name"."n_bill_qty"+"new_name"."n_bill_scheme_qty"+"new_name"."n_ret_qty"+"new_name"."n_ret_scheme_qty" else "stock"."n_godown_qty" endif
    where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
  update "scheme_mst" set "scheme_mst"."n_used_sch_qty" = "scheme_mst"."n_used_sch_qty"+"new_name"."n_scheme_qty"-"new_name"."n_bill_scheme_qty"-"new_name"."n_ret_scheme_qty"
    where "scheme_mst"."c_item_code" = "new_name"."c_item_code" and "scheme_mst"."c_batch_no" = "new_name"."c_batch_no";
  if "new_name"."n_ord_srno" > 0 then
    update "ord_det" set "n_issue_qty" = "n_issue_qty"+"new_name"."n_qty"
      where "ord_det"."c_year" = "new_name"."c_ord_year"
      and "ord_det"."c_prefix" = "new_name"."c_ord_prefix"
      and "ord_det"."n_srno" = "new_name"."n_ord_srno"
      and "ord_det"."c_item_code" = "new_name"."c_item_code"
  end if
end;
CREATE TRIGGER "update_stock_from_dc_detail" before delete order 1 on
"DBA"."dc_det"
referencing old as "old_name"
for each row
begin
  update "stock" set "stock"."n_dc_qty" = "stock"."n_dc_qty"-"old_name"."n_qty"-"old_name"."n_scheme_qty"+"old_name"."n_bill_qty"+"old_name"."n_bill_scheme_qty"+"old_name"."n_ret_qty"+"old_name"."n_ret_scheme_qty",
    "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"old_name"."n_scheme_qty"-"old_name"."n_bill_scheme_qty"-"old_name"."n_ret_scheme_qty",
    "stock"."t_ltime" = "now"(),
    "stock"."n_godown_qty" = if "old_name"."n_godown_flag" = 1 then "stock"."n_godown_qty"+"old_name"."n_qty"+"old_name"."n_scheme_qty"-"old_name"."n_bill_qty"-"old_name"."n_bill_scheme_qty"-"old_name"."n_ret_qty"-"old_name"."n_ret_scheme_qty" else "stock"."n_godown_qty" endif
    where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
  update "scheme_mst" set "scheme_mst"."n_used_sch_qty" = "scheme_mst"."n_used_sch_qty"-"old_name"."n_scheme_qty"+"old_name"."n_bill_scheme_qty"+"old_name"."n_ret_scheme_qty"
    where "scheme_mst"."c_item_code" = "old_name"."c_item_code" and "scheme_mst"."c_batch_no" = "old_name"."c_batch_no"
end;
CREATE TRIGGER "update_stock_from_delete_crnt_repl_issue" before delete order 1 on
----Inv insert End
"DBA"."crnt_repl_issue_det"
referencing old as "old_name"
for each row
begin
  declare @d_sale_rate numeric(14,3);
  declare @year char(2);
  declare @brcode char(6);
  declare @pk numeric(16);
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  if "len"("string"("old_name"."n_srno")) < 8 then
    set @pk = "uf_pk"(@brcode,@year,'CI',"old_name"."n_srno",0,'')
  else
    set @pk = "old_name"."n_srno"
  end if;
  delete from "stock_ledger"
    where "stock_ledger"."n_srno" = @pk
    and "stock_ledger"."n_seq" = "old_name"."n_seq"
    and "stock_ledger"."c_item_code" = "old_name"."c_item_code"
    and "stock_ledger"."c_batch_no" = "old_name"."c_batch_no";
  update "stock"
    set "stock"."n_scheme_sale_qty" = "stock"."n_scheme_sale_qty"-"old_name"."n_qty",
    "stock"."n_balance_qty" = "stock"."n_balance_qty"+"old_name"."n_qty",
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no"
end;
CREATE TRIGGER "update_stock_from_invoice_det" after insert order 1 on
"DBA"."invoice_det"
referencing new as "new_name"
for each row
begin
  declare @d_sale_rate numeric(14,3);
  declare @year char(2);
  declare "cprefix" char(6);
  declare @n_blockso numeric(1);
  declare @n_hold_pending numeric(10);
  declare @brcode char(6);
  declare @pk numeric(18);
  declare @limitcheck numeric(10);
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  --StoreTrack Stock Unhold
  if "len"("string"("new_name"."n_srno")) < 8 then
    set @pk = "uf_pk"(@brcode,@year,'I',"new_name"."n_srno",0,'')
  else
    set @pk = "new_name"."n_srno"
  end if;
  set "cprefix" = "uf_get_pk_component"(@pk,3);
  update "dc_det"
    set "dc_det"."n_bill_qty" = "dc_det"."n_bill_qty"+"new_name"."n_qty",
    "dc_det"."n_bill_scheme_qty" = "dc_det"."n_bill_scheme_qty"+"new_name"."n_scheme_qty",
    "dc_det"."n_inv_no" = "new_name"."n_srno"
    where "dc_det"."n_srno" = "new_name"."n_dc_no"
    and "dc_det"."c_item_code" = "new_name"."c_item_code"
    and "dc_det"."c_batch_no" = "new_name"."c_batch_no";
  update "stock"
    set "stock"."n_sale_qty" = "stock"."n_sale_qty"+"new_name"."n_qty",
    "stock"."n_scheme_sale_qty" = "stock"."n_scheme_sale_qty"+"new_name"."n_scheme_qty",
    "stock"."n_balance_qty" = "stock"."n_balance_qty"-"new_name"."n_qty"-"new_name"."n_scheme_qty",
    "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"new_name"."n_scheme_qty",
    "stock"."n_godown_qty" = if "new_name"."n_godown_flag" = 1 and "isnull"("new_name"."n_dc_no",0) = 0 then "stock"."n_godown_qty"-"new_name"."n_qty"-"new_name"."n_scheme_qty" else "stock"."n_godown_qty" endif,
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "new_name"."c_item_code"
    and "stock"."c_batch_no" = "new_name"."c_batch_no";
  if "new_name"."n_ord_srno" > 0 then
    select "n_block_stock" into @n_blockso from "system_parameter";
    select "n_hold_pending" into @n_hold_pending from "ord_mst" where "ord_mst"."n_srno" = "new_name"."n_ord_srno" and "ord_mst"."c_prefix" = "new_name"."c_ord_prefix" and "ord_mst"."c_year" = "new_name"."c_ord_year";
    if "new_name"."n_block_stock" = 0 and @n_blockso = 1 then
    else
      update "ord_det"
        set "n_issue_qty" = "n_issue_qty"+"new_name"."n_qty"
        where "ord_det"."c_year" = "new_name"."c_ord_year"
        and "ord_det"."c_prefix" = "new_name"."c_ord_prefix"
        and "ord_det"."n_srno" = "new_name"."n_ord_srno"
        and "ord_det"."c_item_code" = "new_name"."c_item_code"
    end if;
    if "new_name"."n_block_stock" = 1 then
      -- if @n_hold_pending = 1 then  --if keep pending is on
      update "item_stock_block" set "n_qty" = "n_qty"-("new_name"."n_qty"+"isnull"("new_name"."n_scheme_qty",0)) where "item_stock_block"."c_item_code" = "new_name"."c_item_code"
    --else  
    --	update item_stock_block set n_qty = n_qty-(isnull(@n_ordqty,0)+isnull(@n_ordschqty,0)) where item_stock_block.c_item_code = new_name.c_item_code ;           
    --end if  
    end if;
    if "new_name"."n_multi_ord" > 0 then
      update "ord_mst"
        set "ord_mst"."n_invno" = "new_name"."n_srno"
        where "ord_mst"."n_srno" = "new_name"."n_ord_srno"
    end if end if;
  if "new_name"."n_repl" = 0 then
    update "scheme_mst" set "scheme_mst"."n_used_sch_qty" = "scheme_mst"."n_used_sch_qty"+"new_name"."n_scheme_qty"
      where "scheme_mst"."c_item_code" = "new_name"."c_item_code" and "scheme_mst"."c_batch_no" = "new_name"."c_batch_no"
  end if;
  insert into "stock_ledger"
    ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
    "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_gst_code","n_service_qty","n_scheme_disc","n_product_value",
    "n_taxable_amt","n_ref_no","d_ref_date","n_service_chg","c_prefix","n_add_cess_amt","n_add_cess" ) values
    ( @pk,"new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_inv_date",
    -1*"new_name"."n_qty",-1*"new_name"."n_scheme_qty",0,"new_name"."n_sale_rate","new_name"."n_disc_amt",0,0,
    "new_name"."n_cgst_per","new_name"."n_cgst_amt","new_name"."n_sgst_per","new_name"."n_sgst_amt","new_name"."n_igst_per","new_name"."n_igst_amt","new_name"."n_gst_cess_per","new_name"."n_gst_cess_amt","new_name"."c_hsn_sac_code","new_name"."c_gst_code",
    "new_name"."n_service_qty","new_name"."n_scheme_disc","new_name"."n_product_value","new_name"."n_taxable_amt","new_name"."n_ref_no","new_name"."d_ref_date","new_name"."n_service_chg","cprefix","new_name"."n_add_cess_amt","new_name"."n_add_cess" ) ;
  select "isnull"("n_enable_cust_item_limit_chk",0) into @limitcheck from "System_Parameter";
  if("new_name"."n_dc_no" = 0 or "new_name"."n_dc_no" is null) and @limitcheck = 1 then
    set @limitcheck = 0;
    select "count"() into @limitcheck from "cust_item_billed"
      where "c_cust_code" = "new_name"."c_cust_code_det"
      and "c_item_code" = "new_name"."c_item_code"
      and "d_date" = "new_name"."d_inv_date";
    if @limitcheck = 0 then
      insert into "cust_item_billed"( "c_cust_code","c_item_code","d_date","n_qty","n_schm_qty","n_scheme_disc" ) values
        ( "new_name"."c_cust_code_det","new_name"."c_item_code","new_name"."d_inv_date","new_name"."n_qty","new_name"."n_scheme_qty","new_name"."n_scheme_disc" ) 
    else
      update "cust_item_billed"
        set "n_qty" = "n_qty"+"new_name"."n_qty","n_schm_qty" = "n_schm_qty"+"new_name"."n_scheme_qty","n_scheme_disc" = "n_scheme_disc"+"new_name"."n_scheme_disc"
        where "c_cust_code" = "new_name"."c_cust_code_det"
        and "c_item_code" = "new_name"."c_item_code"
        and "d_date" = "new_name"."d_inv_date"
    end if end if;
  if "new_name"."n_enable_supp_stock_sale" = 1 then
    call "usp_stock_supp_sale_inv"("new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_qty","new_name"."n_scheme_qty","new_name"."n_srno","new_name"."d_inv_date","isnull"("new_name"."n_dc_no",0),"isnull"("new_name"."n_repl",0),"isnull"("new_name"."n_ord_srno",0),"isnull"("new_name"."n_branch",0),"isnull"("new_name"."n_product_value",0),"isnull"("new_name"."n_ts_value",0),"new_name"."c_mfac_code")
  end if
end;
CREATE TRIGGER "update_stock_from_invoice_detail" before delete order 1 on
------------------
----Inv insert End
"DBA"."invoice_det"
referencing old as "old_name"
for each row
begin
  declare @d_sale_rate numeric(14,3);
  declare @year char(2);
  declare @brcode char(6);
  declare @pk numeric(16);
  declare @limitcheck numeric(10);
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  if "len"("string"("old_name"."n_srno")) < 8 then
    set @pk = "uf_pk"(@brcode,@year,'I',"old_name"."n_srno",0,'')
  else
    set @pk = "old_name"."n_srno"
  end if;
  delete from "stock_ledger"
    where "stock_ledger"."n_srno" = @pk
    and "stock_ledger"."n_seq" >= 0
    and "stock_ledger"."c_item_code" = "old_name"."c_item_code"
    and "stock_ledger"."c_batch_no" = "old_name"."c_batch_no";
  update "stock" set "stock"."n_sale_qty" = "stock"."n_sale_qty"-"old_name"."n_qty",
    "stock"."n_scheme_sale_qty" = "stock"."n_scheme_sale_qty"-"old_name"."n_scheme_qty",
    "stock"."n_balance_qty" = "stock"."n_balance_qty"+"old_name"."n_qty"+"old_name"."n_scheme_qty",
    "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"old_name"."n_scheme_qty",
    "stock"."n_godown_qty" = if "old_name"."n_godown_flag" = 1 then "stock"."n_godown_qty"+"old_name"."n_qty"+"old_name"."n_scheme_qty" else "stock"."n_godown_qty" endif,
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
  update "dc_det" set "dc_det"."n_bill_qty" = "dc_det"."n_bill_qty"-"old_name"."n_qty",
    "dc_det"."n_bill_scheme_qty" = "dc_det"."n_bill_scheme_qty"-"old_name"."n_scheme_qty"
    where "dc_det"."n_srno" = "old_name"."n_dc_no"
    and "dc_det"."c_item_code" = "old_name"."c_item_code"
    and "dc_det"."c_batch_no" = "old_name"."c_batch_no";
  if "old_name"."n_repl" = 0 then
    update "scheme_mst" set "scheme_mst"."n_used_sch_qty" = "scheme_mst"."n_used_sch_qty"-"old_name"."n_scheme_qty"
      where "scheme_mst"."c_item_code" = "old_name"."c_item_code" and "scheme_mst"."c_batch_no" = "old_name"."c_batch_no"
  end if;
  select "isnull"("n_enable_cust_item_limit_chk",0) into @limitcheck from "System_Parameter";
  if("old_name"."n_dc_no" = 0 or "old_name"."n_dc_no" is null) and @limitcheck = 1 then
    update "cust_item_billed"
      set "n_qty" = if "n_qty"-"old_name"."n_qty" < 0 then "n_qty"-0 else "n_qty"-"old_name"."n_qty" endif,
      "n_schm_qty" = if "n_schm_qty"-"old_name"."n_scheme_qty" < 0 then "n_schm_qty"-0 else "n_schm_qty"-"old_name"."n_scheme_qty" endif,
      "n_scheme_disc" = if "n_scheme_disc"-"old_name"."n_scheme_disc" < 0 then "n_scheme_disc"-0 else "n_scheme_disc"-"old_name"."n_scheme_disc" endif
      where "c_cust_code" = "old_name"."c_cust_code_det"
      and "c_item_code" = "old_name"."c_item_code"
      and "d_date" = "old_name"."d_inv_date"
  end if
end;
CREATE TRIGGER "update_stock_from_pur_det_delete" before delete order 3 on
"DBA"."purchase_det"
referencing old as "old_name"
for each row
begin
  declare "cprefix" char(2);
  declare @tran_type numeric(18);
  declare "d_old_godown_qty","n_tmp_sch_bal_qty_old" numeric(8);
  declare "c_tran_year" char(6);
  if "old_name"."n_post" <> 1 then
    return
  end if;
  set "c_tran_year" = "uf_get_pk_component"("old_name"."n_srno",1);
  set "cprefix" = "uf_get_pk_component"("old_name"."n_srno",3);
  set @tran_type = 1;
  if "cprefix" = 'PR' then
    set @tran_type = -1
  end if;
  delete from "stock_ledger"
    where "n_srno" = "old_name"."n_srno"
    and "n_seq" = "old_name"."n_seq"
    and "c_item_code" = "old_name"."c_item_code"
    and "c_batch_no" = "old_name"."c_batch_no";
  if "old_name"."n_pur_godown_flag" = 1 then
    set "d_old_godown_qty" = "old_name"."n_qty"+"old_name"."n_scheme_qty"
  else
    set "d_old_godown_qty" = 0
  end if;
  if "old_name"."n_repl" = 1 then
    set "n_tmp_sch_bal_qty_old" = 0
  else
    set "n_tmp_sch_bal_qty_old" = "old_name"."n_scheme_qty"
  end if;
  update "stock" set "stock"."n_purchase_qty" = "stock"."n_purchase_qty"-"old_name"."n_qty",
    "stock"."n_scheme_purchase_qty" = "stock"."n_scheme_purchase_qty"-"old_name"."n_scheme_qty",
    "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty"-"old_name"."n_scheme_qty",
    "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"n_tmp_sch_bal_qty_old",
    "stock"."n_godown_qty" = "stock"."n_godown_qty"-"d_old_godown_qty",
    "stock"."n_hold_qty" = "stock"."n_hold_qty"-"old_name"."n_hold_qty",
    "stock"."n_repl_qty" = "isnull"("stock"."n_repl_qty",0)-if "old_name"."n_repl" = 1 then "old_name"."n_scheme_qty" else 0 endif
    where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
  if "old_name"."n_pur_tmp_no" > 0 and "old_name"."n_pur_tmp_seq" > 0 then
    update "purchase_tmp_det"
      set "purchase_tmp_det"."n_pur_no" = 0
      --,purchase_tmp_det.n_pur_seq = old_name.n_seq
      where "purchase_tmp_det"."n_srno" = "old_name"."n_pur_tmp_no"
      and "purchase_tmp_det"."c_item_code" = "old_name"."c_item_code"
      and "purchase_tmp_det"."c_batch_no" = "old_name"."c_batch_no"
      and "purchase_tmp_det"."n_seq" = "old_name"."n_pur_tmp_seq"
  end if;
  if "old_name"."c_order_year" is not null and "old_name"."n_order_no" > 0 and "old_name"."n_seq" > 0 and "old_name"."n_order_slab_no" > 0 then
    if "old_name"."n_order_slab_no" = 1 then
      update "order_ledger"
        set "n_receipt_o1" = "n_receipt_o1"-"old_name"."n_qty"
        where "order_ledger"."c_year" = "old_name"."c_order_year"
        and "order_ledger"."n_srno" = "old_name"."n_order_no"
        and "order_ledger"."n_seq" = "old_name"."n_order_seq"
    end if;
    if "old_name"."n_order_slab_no" = 2 then
      update "order_ledger"
        set "n_receipt_o2" = "n_receipt_o2"-"old_name"."n_qty"
        where "order_ledger"."c_year" = "old_name"."c_order_year"
        and "order_ledger"."n_srno" = "old_name"."n_order_no"
        and "order_ledger"."n_seq" = "old_name"."n_order_seq"
    end if;
    if "old_name"."n_order_slab_no" = 3 then
      update "order_ledger"
        set "n_receipt_o3" = "n_receipt_o3"-"old_name"."n_qty"
        where "order_ledger"."c_year" = "old_name"."c_order_year"
        and "order_ledger"."n_srno" = "old_name"."n_order_no"
        and "order_ledger"."n_seq" = "old_name"."n_order_seq"
    end if;
    if "old_name"."n_order_slab_no" = 4 then
      update "order_ledger"
        set "n_receipt_o4" = "n_receipt_o4"-"old_name"."n_qty"
        where "order_ledger"."c_year" = "old_name"."c_order_year"
        and "order_ledger"."n_srno" = "old_name"."n_order_no"
        and "order_ledger"."n_seq" = "old_name"."n_order_seq"
    end if end if;
  delete from "scheme_ledger_det"
    where "c_prefix" = 'P'
    and "c_year" = "c_tran_year"
    and "n_srno" = "old_name"."n_srno"
    and "c_item_code" = "old_name"."c_item_code"
    and "c_batch_no" = "old_name"."c_batch_no"
    and "n_seq" = "old_name"."n_seq";
  delete from "goods_rec_ledger"
    where "n_srno" = "old_name"."n_srno"
    and "n_seq" = "old_name"."n_seq";
  if "old_name"."n_enable_supp_stock_sale" = 1 then
    update "Stock_inward_outwad" set "Stock_inward_outwad"."n_qty" = "Stock_inward_outwad"."n_qty"-"old_name"."n_qty",
      "Stock_inward_outwad"."n_schm_qty" = "Stock_inward_outwad"."n_schm_qty"-"old_name"."n_scheme_qty",
      "Stock_inward_outwad"."n_schm_disc" = "Stock_inward_outwad"."n_schm_disc"-"old_name"."n_scheme_disc"
      where "Stock_inward_outwad"."c_item_code" = "old_name"."c_item_code" and "Stock_inward_outwad"."c_batch_no" = "old_name"."c_batch_no"
      and "Stock_inward_outwad"."c_supp_code" = "old_name"."c_code_supp" and "Stock_inward_outwad"."n_tran_no" = "old_name"."n_srno"
  end if
end;
CREATE TRIGGER "update_stock_from_pur_det_insert" after insert order 1 on
"DBA"."purchase_det"
referencing new as "new_name"
for each row
begin
  declare "d_def_date" date;
  declare "c_prefix_temp" char(2);
  declare "n_post_temp" decimal(1);
  declare "d_excise_per_qty" decimal(10,2);
  declare "d_margin_wholesaler" decimal(6,2);
  declare "d_margin_retailer" decimal(6,2);
  declare "d_st_rate" decimal(6,2);
  declare "d_cst_rate" decimal(6,2);
  declare "n_tmp_bal_qty","n_tmp_bal_qty_supp" decimal;
  declare "d_new_godown_qty" decimal(8);
  declare "n_tmp_sch_bal_qty" decimal;
  declare "c_tran_year" char(2);
  declare "c_tran_prefix" char(2);
  declare "n_consider_excise_from" decimal(1);
  declare "c_rak","s_supp" char(6);
  declare "rack_grp_code" char(10);
  declare @pk numeric(16);
  declare @brcode char(6);
  declare @year char(2);
  declare "cprefix" char(2);
  declare "d_gate_pass_no" numeric(18);
  set "cprefix" = "uf_get_pk_component"("new_name"."n_srno",3);
  select "right"("db_name"(),2) into @year;
  if "new_name"."n_post" <> 1 then
    return
  end if;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  if "len"("string"("new_name"."n_srno")) < 8 then
    set @pk = "uf_pk"(@brcode,@year,'P',"new_name"."n_srno",0,'')
  else
    set @pk = "new_name"."n_srno"
  end if;
  insert into "stock_ledger"
    ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
    "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_gst_code","n_service_qty","n_scheme_disc","n_product_value","n_taxable_amt","n_ref_no","d_ref_date","n_service_chg","c_prefix" ) values
    ( @pk,"new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_purchase_date",
    "new_name"."n_qty","new_name"."n_scheme_qty",0,"isnull"("new_name"."n_effective_purchase_rate","isnull"("new_name"."n_purchase_rate",0)),"new_name"."n_disc_amt"+"new_name"."n_cash_discount",0,0,
    "new_name"."n_cgst_per","new_name"."n_cgst_amt","new_name"."n_sgst_per","new_name"."n_sgst_amt","new_name"."n_igst_per","new_name"."n_igst_amt","new_name"."n_gst_cess_per","new_name"."n_gst_cess_amt","new_name"."c_hsn_sac_code","new_name"."c_gst_code","new_name"."n_service_qty","new_name"."n_scheme_disc","new_name"."n_product_value","new_name"."n_taxable_amt","new_name"."n_ref_no","new_name"."d_ref_date","new_name"."n_service_chg","cprefix" ) ;
  insert into "item_rate"( "c_item_code","n_rate_type","n_rate","t_time","n_ref_srno" ) on existing update defaults off values
    ( "new_name"."c_item_code",0,"new_name"."n_sale_rate","now"(),"new_name"."n_srno" ) ;
  select "max"("purchase_mst"."c_year"),
    "max"("purchase_mst"."c_prefix")
    into "c_tran_year","c_tran_prefix"
    from "purchase_mst" where "purchase_mst"."n_srno" = "new_name"."n_srno";
  if "new_name"."n_pur_godown_flag" = 1 then
    set "d_new_godown_qty" = "new_name"."n_qty"+"new_name"."n_scheme_qty"
  else
    set "d_new_godown_qty" = 0
  end if;
  if "new_name"."n_effective_purchase_rate" = 0 or "new_name"."n_sale_rate" = 0 then
    set "d_margin_wholesaler" = 0
  else
    set "d_margin_wholesaler" = (("new_name"."n_sale_rate"-"new_name"."n_effective_purchase_rate")/"new_name"."n_sale_rate")*100
  end if;
  if "new_name"."n_repl" = 1 then
    set "n_tmp_sch_bal_qty" = 0
  else
    set "n_tmp_sch_bal_qty" = "new_name"."n_scheme_qty"
  end if;
  if "new_name"."n_vat_mrp" = 0 or "new_name"."n_sale_rate" = 0 then
    set "d_margin_retailer" = 0
  else
    set "d_margin_retailer" = (("new_name"."n_vat_mrp"-"new_name"."n_sale_rate")/"new_name"."n_vat_mrp")*100
  end if;
  if "new_name"."n_exice_amt" <> 0 and "new_name"."n_qty" <> 0 then
    set "d_excise_per_qty" = "new_name"."n_exice_amt"/"new_name"."n_qty"
  else
    set "d_excise_per_qty" = 0
  end if;
  if "new_name"."n_inter_state" = 1 then
    select "n_st_rate" into "d_st_rate" from "item_mst" where "item_mst"."c_code" = "new_name"."c_item_code"
  else
    if "new_name"."n_branch" = 1 then
      set "d_st_rate" = "new_name"."n_br_st_per"
    else
      set "d_st_rate" = "new_name"."n_st"
    end if end if;
  if "new_name"."n_inter_state" = 1 then
    set "d_cst_rate" = 0
  else
    if "new_name"."n_branch" = 1 then
      set "d_cst_rate" = "new_name"."n_br_cst_per"
    else
      set "d_cst_rate" = "new_name"."n_cst"
    end if end if;
  /*  select c_prefix into c_prefix_temp from prefix_sr_numbers where c_trans='PURCH';
select n_post into n_post_temp from purchase_mst
where purchase_mst.c_prefix=c_prefix_temp
and purchase_mst.n_srno=new_name.n_srno;
if n_post_temp<>1 then
return
end if
; */
  select "n_balance_qty" into "n_tmp_bal_qty" from "stock" where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
  if sqlcode = 0 then
    if "n_tmp_bal_qty" <> 0 then
      update "stock" set "stock"."n_purchase_qty" = "stock"."n_purchase_qty"+"new_name"."n_qty",
        "stock"."n_scheme_purchase_qty" = "stock"."n_scheme_purchase_qty"+"new_name"."n_scheme_qty",
        "stock"."n_purchase_rate" = "new_name"."n_purchase_rate",
        "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty",
        "stock"."n_sale_rate" = "new_name"."n_sale_rate","stock"."n_mrp" = "new_name"."n_mrp",
        "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"n_tmp_sch_bal_qty",
        "stock"."n_effective_purchase_rate" = "new_name"."n_effective_purchase_rate",
        "stock"."n_ptr" = "new_name"."n_ptr",
        "stock"."n_ptr_1" = "new_name"."n_ptr_1",
        "stock"."c_mfac_sh_name" = "new_name"."c_mfac_sh_name",
        "stock"."n_lock" = "new_name"."n_lock",
        "stock"."n_incl" = "new_name"."n_incl",
        "stock"."n_godown_qty" = "stock"."n_godown_qty"+"d_new_godown_qty",
        "stock"."d_last_pur_date" = "new_name"."d_purchase_date",
        "stock"."n_st_rate" = "d_st_rate",
        "stock"."n_hold_qty" = "stock"."n_hold_qty"+"new_name"."n_hold_qty",
        "stock"."c_hold_remark" = "isnull"("new_name"."c_hold_remark","stock"."c_hold_remark"),
        "stock"."n_cst_rate" = "d_cst_rate",
        "stock"."t_ltime" = "now"(),
        "stock"."c_ref_year" = "c_tran_year",
        "stock"."c_ref_prefix" = "c_tran_prefix",
        "stock"."n_ref_srno" = "new_name"."n_srno",
        "stock"."n_repl_qty" = "isnull"("stock"."n_repl_qty",0)+if "new_name"."n_repl" = 1 then "new_name"."n_scheme_qty" else 0 endif,
        "stock"."n_retail_disc" = "new_name"."n_retail_disc"
        where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no"
    else
      set "d_def_date" = "uf_default_date"();
      update "stock" set "stock"."n_purchase_qty" = "stock"."n_purchase_qty"+"new_name"."n_qty",
        "stock"."n_scheme_purchase_qty" = "stock"."n_scheme_purchase_qty"+"new_name"."n_scheme_qty",
        "stock"."n_purchase_rate" = "new_name"."n_purchase_rate",
        "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty","stock"."n_sale_rate" = "new_name"."n_sale_rate","stock"."n_mrp" = "new_name"."n_mrp",
        "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"n_tmp_sch_bal_qty",
        "stock"."n_effective_purchase_rate" = "new_name"."n_effective_purchase_rate",
        "stock"."n_ptr" = "new_name"."n_ptr",
        "stock"."n_ptr_1" = "new_name"."n_ptr_1",
        "stock"."c_mfac_sh_name" = "new_name"."c_mfac_sh_name",
        "stock"."n_lock" = "new_name"."n_lock",
        "stock"."d_date" = "d_def_date",
        "stock"."n_incl" = "new_name"."n_incl",
        "stock"."n_godown_qty" = "stock"."n_godown_qty"+"d_new_godown_qty",
        "stock"."d_last_pur_date" = "new_name"."d_purchase_date",
        "stock"."n_st_rate" = "d_st_rate",
        "stock"."n_hold_qty" = "stock"."n_hold_qty"+"new_name"."n_hold_qty",
        "stock"."c_hold_remark" = "isnull"("new_name"."c_hold_remark","stock"."c_hold_remark"),
        "stock"."n_cst_rate" = "d_cst_rate",
        "stock"."t_ltime" = "now"(),
        "stock"."c_ref_year" = "c_tran_year",
        "stock"."c_ref_prefix" = "c_tran_prefix",
        "stock"."n_ref_srno" = "new_name"."n_srno",
        "stock"."n_repl_qty" = "isnull"("stock"."n_repl_qty",0)+if "new_name"."n_repl" = 1 then "new_name"."n_scheme_qty" else 0 endif,
        "stock"."n_retail_disc" = "new_name"."n_retail_disc"
        where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no"
    end if;
    if sqlstate = '02000' then
      raiserror 18000 "Error, Cannot update item in stock table. Please restart the system."
    end if
  else set "d_def_date" = "uf_default_date"();
    insert into "stock"
      ( "c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty",
      "n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty","n_mrp","n_purchase_rate",
      "n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate",
      "d_date","n_ptr","c_mfac_sh_name","n_incl","c_prn_batch","n_godown_qty","d_last_pur_date","n_st_rate","n_hold_qty",
      "c_hold_remark","n_cst_rate","c_ref_year","c_ref_prefix","n_ref_srno","n_contolled_product","n_tax_on_sch_qty","n_excise","n_repl_qty","n_ptr_1","n_retail_disc" ) values
      ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_expiry_date",0,"new_name"."n_qty","new_name"."n_scheme_qty",
      0,0,0,0,0,"new_name"."n_qty"+"new_name"."n_scheme_qty","new_name"."n_mrp","new_name"."n_purchase_rate","new_name"."n_sale_rate",0,
      "new_name"."n_lock",0,"n_tmp_sch_bal_qty","new_name"."n_effective_purchase_rate","d_def_date","new_name"."n_ptr","new_name"."c_mfac_sh_name",
      "new_name"."n_incl","new_name"."c_prn_batch","d_new_godown_qty","new_name"."d_purchase_date","d_st_rate","new_name"."n_hold_qty","new_name"."c_hold_remark",
      "d_cst_rate","c_tran_year","c_tran_prefix","new_name"."n_srno","new_name"."n_contolled_product","new_name"."n_tax_on_sch_qty","new_name"."n_excise",
      if "new_name"."n_repl" = 1 then "new_name"."n_scheme_qty" else 0 endif,"new_name"."n_ptr_1","new_name"."n_retail_disc" ) ;
    if sqlstate = '02000' then
      raiserror 18000 "Error, Cannot add item in stock table. Please restart the system."
    end if end if;
  select "n_excise_from"
    into "n_consider_excise_from" from "system_parameter";
  if "n_consider_excise_from" = 0 then
    update "item_mst" set "n_margin_wholesaler" = "d_margin_wholesaler",
      "n_margin_retailer" = "d_margin_retailer","n_excise" = "d_excise_per_qty",
      "d_launch_date" = "isnull"("d_launch_date","new_name"."d_purchase_date") where "item_mst"."c_code" = "new_name"."c_item_code"
  else
    update "item_mst" set "n_margin_wholesaler" = "d_margin_wholesaler",
      "n_margin_retailer" = "d_margin_retailer",
      "d_launch_date" = "isnull"("d_launch_date","new_name"."d_purchase_date") where "item_mst"."c_code" = "new_name"."c_item_code"
  end if;
  update "item_out_of_stock" set "d_recd_date" = "new_name"."d_purchase_date","d_ldate" = "now"() where "item_out_of_stock"."d_recd_date" is null;
  if "new_name"."n_pur_tmp_no" > 0 and "new_name"."n_pur_tmp_seq" > 0 then
    update "purchase_tmp_det"
      set "purchase_tmp_det"."n_pur_no" = "new_name"."n_srno","purchase_tmp_det"."n_pur_seq" = "new_name"."n_seq"
      where "purchase_tmp_det"."n_srno" = "new_name"."n_pur_tmp_no"
      and "purchase_tmp_det"."c_item_code" = "new_name"."c_item_code"
      and "purchase_tmp_det"."c_batch_no" = "new_name"."c_batch_no"
      and "purchase_tmp_det"."n_seq" = "new_name"."n_pur_tmp_seq"
  end if;
  if "new_name"."c_order_year" is not null and "new_name"."n_order_no" > 0 and "new_name"."n_seq" > 0 and "new_name"."n_order_slab_no" > 0 then
    if "new_name"."n_order_slab_no" = 1 then
      update "order_ledger"
        set "n_receipt_o1" = "n_receipt_o1"+"new_name"."n_qty"
        where "order_ledger"."c_year" = "new_name"."c_order_year"
        and "order_ledger"."n_srno" = "new_name"."n_order_no"
        and "order_ledger"."n_seq" = "new_name"."n_order_seq"
    end if;
    if "new_name"."n_order_slab_no" = 2 then
      update "order_ledger"
        set "n_receipt_o2" = "n_receipt_o2"+"new_name"."n_qty"
        where "order_ledger"."c_year" = "new_name"."c_order_year"
        and "order_ledger"."n_srno" = "new_name"."n_order_no"
        and "order_ledger"."n_seq" = "new_name"."n_order_seq"
    end if;
    if "new_name"."n_order_slab_no" = 3 then
      update "order_ledger"
        set "n_receipt_o3" = "n_receipt_o3"+"new_name"."n_qty"
        where "order_ledger"."c_year" = "new_name"."c_order_year"
        and "order_ledger"."n_srno" = "new_name"."n_order_no"
        and "order_ledger"."n_seq" = "new_name"."n_order_seq"
    end if;
    if "new_name"."n_order_slab_no" = 4 then
      update "order_ledger"
        set "n_receipt_o4" = "n_receipt_o4"+"new_name"."n_qty"
        where "order_ledger"."c_year" = "new_name"."c_order_year"
        and "order_ledger"."n_srno" = "new_name"."n_order_no"
        and "order_ledger"."n_seq" = "new_name"."n_order_seq"
    end if end if;
  if "new_name"."n_scheme_qty" <> 0 then
    insert into "scheme_ledger_det"
      ( "c_prefix","c_year","n_srno","c_item_code","c_batch_no","n_seq","d_date_time","c_remark","n_qty","n_rate","n_value","n_qty_disc_flag" ) values
      ( 'P',"c_tran_year","new_name"."n_srno","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_seq","GETDATE"(),'PURCHASE',"new_name"."n_scheme_qty","new_name"."n_sale_rate",("new_name"."n_sale_rate"*"new_name"."n_scheme_qty"),1 ) 
  end if;
  if "new_name"."n_scheme_disc" <> 0 then
    insert into "scheme_ledger_det"
      ( "c_prefix","c_year","n_srno","c_item_code","c_batch_no","n_seq","d_date_time","c_remark","n_qty","n_rate","n_value","n_qty_disc_flag" ) values
      ( 'P',"c_tran_year","new_name"."n_srno","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_seq","GETDATE"(),'PURCHASE',1,"new_name"."n_scheme_disc","new_name"."n_scheme_disc",2 ) 
  end if;
  update "item_mst" set "item_mst"."c_hsn_sac_code" = "new_name"."c_hsn_sac_code","d_ldate" = "uf_default_date"() where "item_mst"."c_code" = "new_name"."c_item_code" and "isnull"("item_mst"."c_hsn_sac_code",'') = '' and "isnull"("new_name"."c_hsn_sac_code",'') <> '';
  if "new_name"."n_store_track" = 2 and "new_name"."n_post" = 1 then --insert 
    if "new_name"."n_pur_godown_flag" = 1 then --godown
      select "c_godown_rack_code" into "c_rak" from "item_mst" where "item_mst"."c_code" = "new_name"."c_item_code"
    else --Nornmal; 
      select "c_rack_code" into "c_rak" from "item_mst" where "item_mst"."c_code" = "new_name"."c_item_code"
    end if;
    select "c_group" into "rack_grp_code" from "rack_mst" where "rack_mst"."c_code" = "c_rak";
    insert into "st_track_in"
      ( "c_doc_no",
      "n_seq","c_item_code","c_batch_no","n_qty",
      "c_tray_code","n_complete","t_time","c_godown_code","c_rack_code",
      "c_rack_grp_code",
      "c_user" ) 
      select "string"('000/'+"string"("Purchase_mst"."c_year")+'/'+"string"("Purchase_mst"."c_prefix")+'/'+"string"("new_name"."n_srno")),
        "new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_qty"+"isnull"("new_name"."n_scheme_qty",0),
        "new_name"."c_tray_code",0 as "n_complete","now"() as "t_time",'-' as "c_godown_code",
        "c_rak","rack_grp_code",null
        from "Purchase_mst"
        where "Purchase_mst"."n_srno" = "new_name"."n_srno"
  end if;
  if "new_name"."n_post" = 1 then
    if "new_name"."n_gr_check" = 1 then
      select "max"("purchase_mst"."c_supp_code"),"max"("n_ref_gatepass_no")
        into "s_supp","d_gate_pass_no" from "purchase_mst"
        where "purchase_mst"."n_srno" = "new_name"."n_srno";
      insert into "goods_rec_ledger"( "n_srno","n_seq","c_supp_code","c_item_code","c_batch_no","d_exp_dt","n_qty","n_mrp","n_cancel_flag","d_ldate","t_ltime","n_gate_pass_no" ) values
        ( "new_name"."n_srno","new_name"."n_seq","s_supp","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_expiry_date",-1*("new_name"."n_qty"+"new_name"."n_scheme_qty"),"new_name"."n_mrp",0,"uf_default_date"(),"now"(),"d_gate_pass_no" ) 
    end if end if;
  if "new_name"."n_enable_supp_stock_sale" = 1 then
    select "n_qty" into "n_tmp_bal_qty_supp" from "Stock_inward_outwad"
      where "Stock_inward_outwad"."c_item_code" = "new_name"."c_item_code" and "Stock_inward_outwad"."c_batch_no" = "new_name"."c_batch_no"
      and "Stock_inward_outwad"."c_supp_code" = "new_name"."c_code_supp" and "Stock_inward_outwad"."n_tran_no" = "new_name"."n_srno";
    if sqlcode = 0 then
      if "n_tmp_bal_qty_supp" <> 0 then
        update "Stock_inward_outwad" set "Stock_inward_outwad"."n_qty" = "Stock_inward_outwad"."n_qty"+"old_name"."n_qty",
          "Stock_inward_outwad"."n_schm_qty" = "Stock_inward_outwad"."n_schm_qty"+"old_name"."n_scheme_qty",
          "Stock_inward_outwad"."n_schm_disc" = "Stock_inward_outwad"."n_schm_disc"-"old_name"."n_scheme_disc",
          "Stock_inward_outwad"."n_sale_rate" = "new_name"."n_sale_rate","Stock_inward_outwad"."n_mrp" = "new_name"."n_mrp",
          "Stock_inward_outwad"."n_pur_rate" = "new_name"."n_purchase_rate",
          "Stock_inward_outwad"."n_eff_pur_rate" = "new_name"."n_effective_purchase_rate",
          "Stock_inward_outwad"."n_ptr_1" = "new_name"."n_ptr_1",
          "Stock_inward_outwad"."d_ldate" = "now"(),
          "Stock_inward_outwad"."n_retail_disc" = "new_name"."n_retail_disc"
          where "Stock_inward_outwad"."c_item_code" = "new_name"."c_item_code" and "Stock_inward_outwad"."c_batch_no" = "new_name"."c_batch_no" and "Stock_inward_outwad"."c_supp_code" = "new_name"."c_code_supp"
      else
        set "d_def_date" = "uf_default_date"();
        update "Stock_inward_outwad" set "Stock_inward_outwad"."n_qty" = "Stock_inward_outwad"."n_qty"+"old_name"."n_qty",
          "Stock_inward_outwad"."n_schm_qty" = "Stock_inward_outwad"."n_schm_qty"+"old_name"."n_scheme_qty",
          "Stock_inward_outwad"."n_schm_disc" = "Stock_inward_outwad"."n_schm_disc"-"old_name"."n_scheme_disc",
          "Stock_inward_outwad"."n_sale_rate" = "new_name"."n_sale_rate","Stock_inward_outwad"."n_mrp" = "new_name"."n_mrp",
          "Stock_inward_outwad"."n_pur_rate" = "new_name"."n_purchase_rate",
          "Stock_inward_outwad"."n_eff_pur_rate" = "new_name"."n_effective_purchase_rate",
          "Stock_inward_outwad"."n_ptr_1" = "new_name"."n_ptr_1",
          "Stock_inward_outwad"."d_ldate" = "now"(),
          "Stock_inward_outwad"."n_retail_disc" = "new_name"."n_retail_disc"
          where "Stock_inward_outwad"."c_item_code" = "new_name"."c_item_code" and "Stock_inward_outwad"."c_batch_no" = "new_name"."c_batch_no" and "Stock_inward_outwad"."c_supp_code" = "new_name"."c_code_supp"
      end if;
      if sqlstate = '02000' then
        raiserror 18000 "Error, Cannot update item in stock inward outward table. Please restart the system."
      end if
    else
      set "d_def_date" = "uf_default_date"();
      insert into "Stock_inward_outwad"
        ( "c_item_code","c_batch_no","c_supp_code","n_tran_no","n_qty","n_schm_qty","n_schm_disc","n_sale_rate","n_pur_rate","n_eff_pur_rate","n_mrp","d_exp_date","d_date","d_ldate","n_flag","n_branch","n_ptr_1","n_retail_disc" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."c_code_supp","new_name"."n_srno","new_name"."n_qty","new_name"."n_scheme_qty","new_name"."n_scheme_disc","new_name"."n_sale_rate",
        "new_name"."n_purchase_rate","new_name"."n_effective_purchase_rate","new_name"."n_mrp","new_name"."d_expiry_date","new_name"."d_purchase_date","now"(),1,"new_name"."n_branch","new_name"."n_ptr_1","new_name"."n_retail_disc" ) ;
      if sqlstate = '02000' then
        raiserror 18000 "Error, Cannot add item in Stock_inward_outwad supplier table. Please restart the system."
      end if
    end if //if sqlcode = 0 then
  end if //if new_name.n_enable_supp_stock_sale = 1 then   
end;
CREATE TRIGGER "update_stock_from_reset_det" after insert order 1 on "DBA".reset_det
referencing new as new_name
for each row begin
  update stock set n_reset_qty=n_reset_qty+new_name.n_reset_qty,n_sch_bal_qty=n_sch_bal_qty+new_name.n_reset_qty where stock.c_item_code=new_name.c_item_code and stock.c_batch_no=new_name.c_batch_no
end;
CREATE TRIGGER "update_stock_from_rtn_invoice_det" after insert order 1 on
------------------------------
-----------------------------------------------------
-------------------
-------------------
-------------------
-----------sales invoice det insert
---Inv Insert Trigger Start
"DBA"."rtn_invoice_det"
referencing new as "new_name"
for each row
begin
  declare "c_tmp_code" char(6);
  declare @d_sale_rate numeric(14,3);
  declare @year,"cprefix" char(2);
  declare @n_blockso numeric(1);
  declare @n_hold_pending numeric(10);
  declare "d_cnd" numeric(10);
  declare "l_cnt" numeric(10);
  declare "ld_pend_qty" numeric(10);
  declare "l_pend_item" numeric(6);
  declare "d_pend_det_item" numeric(6);
  declare "c_ref_doc_no" char(25);
  declare "n_ref_seq_no" numeric(11);
  declare @brcode char(6);
  declare @pk numeric(16);
  declare "d_def_date" date;
  set "d_def_date" = "uf_default_date"();
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  --StoreTrack Stock Unhold
  if "len"("string"("new_name"."n_srno")) < 8 then
    set @pk = "uf_pk"(@brcode,@year,'RI',"new_name"."n_srno",0,'')
  else
    set @pk = "new_name"."n_srno"
  end if;
  set "cprefix" = "uf_get_pk_component"(@pk,3);
  if "new_name"."n_stock_ledger_effect" = 1 then
    if "isnull"("new_name"."n_ref_no",0) > 0 then
      insert into "dbnt_ledger"
        ( "n_srno","c_prefix","c_type","c_item_code","c_batch_no","n_srno1","c_prefix1","c_type1","n_qty","n_loose_qty","n_qty_actual","n_loose_qty_actual","n_rate",
        "n_pack_conv","n_debit_per","n_igst_per","n_cgst_per","n_sgst_per","n_cess_per","c_gst_code","n_schm_qty","n_scheme_disc","n_schm_qty_actual","n_schm_disc_actual" ) values
        ( "new_name"."n_srno",'RI',"new_name"."c_ret_type","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_ref_no",'DB',"new_name"."c_ret_type",-1*("isnull"("new_name"."n_qty",0)+"isnull"("new_name"."n_scheme_qty",0)+"isnull"("new_name"."n_adj_qty",0)+"isnull"("new_name"."n_manual_qty",0)),
        -1*("isnull"("new_name"."n_loose_qty",0)+"isnull"("new_name"."n_adj_loose_qty",0)),-1*("isnull"("new_name"."n_qty",0)+"isnull"("new_name"."n_scheme_qty",0)+"isnull"("new_name"."n_adj_qty",0)+"isnull"("new_name"."n_manual_qty",0)),-1*("isnull"("new_name"."n_loose_qty",0)+"isnull"("new_name"."n_adj_loose_qty",0)),"new_name"."n_sale_rate",
        "isnull"("new_name"."n_pack_conv",1),0,0,0,0,0,null,-1*"isnull"("new_name"."n_scheme_qty",0),-1*"isnull"("new_name"."n_scheme_disc",0),-1*"isnull"("new_name"."n_scheme_qty",0),-1*"isnull"("new_name"."n_scheme_disc",0) ) 
    end if;
    insert into "stock_ledger"
      ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
      "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_gst_code","n_service_qty","n_scheme_disc",
      "n_product_value","n_taxable_amt","c_ref_no","d_ref_date","n_service_chg","n_eb_flag","c_ret_type","c_prefix" ) values
      ( "new_name"."n_srno","new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_inv_date",
      -1*("new_name"."n_qty"),-1*"new_name"."n_scheme_qty",0,"new_name"."n_sale_rate","new_name"."n_disc_amt",0,0,
      "new_name"."n_cgst_per","new_name"."n_cgst_amt","new_name"."n_sgst_per","new_name"."n_sgst_amt","new_name"."n_igst_per","new_name"."n_igst_amt","new_name"."n_gst_cess_per","new_name"."n_gst_cess_amt",
      "new_name"."c_hsn_sac_code","new_name"."c_gst_code","new_name"."n_service_qty","new_name"."n_scheme_disc","new_name"."n_product_value","new_name"."n_taxable_amt",
      "new_name"."c_ref_bill_no","new_name"."d_ref_bill_dt","new_name"."n_service_chg",1,"new_name"."c_ret_type","cprefix" ) ;
    return
  end if;
  if "new_name"."n_store_track" = 9 then
    select "count"() into "d_cnd" from "st_track_mst" where "st_track_mst"."c_doc_no" = '000/'+"new_name"."c_ord_year"+'/'+"new_name"."c_ord_prefix"+'/'+"string"("new_name"."n_ord_srno") and "st_track_mst"."n_inout" = 0;
    if "d_cnd" is null then set "d_cnd" = 0 end if;
    --code by saneesh 
    if "d_cnd" <> 0 then //Processing from Order ,Rels Hold qty
      update "stock" set "stock"."n_store_track_qty" = "stock"."n_store_track_qty"-("new_name"."n_qty"+"new_name"."n_scheme_qty"),
        "stock"."n_hold_qty" = "stock"."n_hold_qty"-("new_name"."n_qty"+"new_name"."n_scheme_qty")
        where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no"
    end if;
    --need to update st_track_pick confirm qty 
    if "new_name"."c_ord_year" is not null then
      --So 
      set "c_ref_doc_no" = '000/'+"new_name"."c_ord_year"+'/'+"new_name"."c_ord_prefix"+'/'+"string"("new_name"."n_ord_srno");
      set "n_ref_seq_no" = "new_name"."n_ord_seq"
    else --inv 
      set "c_ref_doc_no" = '000/'+@year+'/'+"cprefix"+'/'+"string"("new_name"."n_srno");
      set "n_ref_seq_no" = "new_name"."n_seq"
    end if;
    update "st_track_pick" set "st_track_pick"."n_confirm_qty" = "st_track_pick"."n_confirm_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty"
      where "c_doc_no" = "c_ref_doc_no"
      and "st_track_pick"."c_item_code" = "new_name"."c_item_code"
      and "st_track_pick"."c_tray_code" = "new_name"."c_tray_code"
      and "st_track_pick"."n_seq" = "new_name"."n_pick_seq" and "n_inout" = 0;
    select "sum"("n_qty")-"isnull"("sum"("n_confirm_qty"),0)-"isnull"("sum"("n_reject_qty"),0)
      into "ld_pend_qty" from "st_track_pick"
      where "c_doc_no" = "c_ref_doc_no"
      and "st_track_pick"."c_item_code" = "new_name"."c_item_code"
      and "st_track_pick"."n_org_seq" = "n_ref_seq_no" and "n_inout" = 0;
    if "ld_pend_qty" <= 0 then
      select "n_bal_qty"
        into "d_pend_det_item" from "st_track_det"
        where "c_doc_no" = "c_ref_doc_no"
        and "c_item_code" = "new_name"."c_item_code"
        and "n_seq" = "n_ref_seq_no" and "n_inout" = 0;
      if "d_pend_det_item" <= 0 then
        update "st_track_det" set "n_complete" = 9
          where "c_doc_no" = "c_ref_doc_no"
          and "c_item_code" = "new_name"."c_item_code"
          and "n_seq" = "n_ref_seq_no" and "n_inout" = 0
      end if end if;
    select "count"() into "l_cnt" from "st_track_det" where "c_doc_no" = "c_ref_doc_no" and("n_complete" not in( 9,2 ) );
    if "l_cnt" = 0 then
      update "st_track_mst" set "n_complete" = 9
        where "c_doc_no" = "c_ref_doc_no"
        and "st_track_mst"."n_inout" = 0
    end if;
    --	//Will giv u the pend item from pick table 
    select "count"() into "l_pend_item" from "st_track_pick"
      where "c_tray_code" = "new_name"."c_tray_code"
      and "c_doc_no" = "c_ref_doc_no"
      and "n_qty"-("n_confirm_qty"+"n_reject_qty") > 0;
    if "d_cnd" is null then set "d_cnd" = 0 end if;
    if "l_pend_item" is null then set "l_pend_item" = 0 end if;
    if "l_cnt" > 0 then //items pend
    else
      if "l_pend_item" >= 1 then //Dont Rels
      else
        delete from "st_track_tray_move"
          where "st_track_tray_move"."c_doc_no" = "c_ref_doc_no"
          and "st_track_tray_move"."c_tray_code" = "new_name"."c_tray_code" and "n_inout" = 9
      end if end if end if;
  update "dc_det"
    set "dc_det"."n_bill_qty" = "dc_det"."n_bill_qty"+"new_name"."n_qty",
    "dc_det"."n_bill_scheme_qty" = "dc_det"."n_bill_scheme_qty"+"new_name"."n_scheme_qty"
    where "dc_det"."n_srno" = "new_name"."n_dc_no"
    and "dc_det"."c_item_code" = "new_name"."c_item_code"
    and "dc_det"."c_batch_no" = "new_name"."c_batch_no";
  update "stock"
    set "stock"."n_sale_qty" = "stock"."n_sale_qty"+"new_name"."n_qty",
    "stock"."n_scheme_sale_qty" = "stock"."n_scheme_sale_qty"+"new_name"."n_scheme_qty",
    "stock"."n_balance_qty" = "stock"."n_balance_qty"-"new_name"."n_qty"-"new_name"."n_scheme_qty",
    "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"new_name"."n_scheme_qty",
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "new_name"."c_item_code"
    and "stock"."c_batch_no" = "new_name"."c_batch_no";
  if "new_name"."n_enable_supp_stock_sale" = 1 then
    insert into "Stock_inward_outwad"( "c_item_code","c_batch_no","n_tran_no","c_supp_code","n_qty","n_schm_qty","d_date","n_flag","n_branch","n_tran_seq" ) values
      ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_srno","new_name"."c_code_supp",-1*"new_name"."n_qty","new_name"."n_scheme_qty","new_name"."d_inv_date",7,"new_name"."n_branch","new_name"."n_seq" ) 
  end if;
  if "new_name"."n_ord_srno" > 0 then
    select "n_block_stock" into @n_blockso from "system_parameter";
    select "n_hold_pending" into @n_hold_pending from "ord_mst" where "ord_mst"."n_srno" = "new_name"."n_ord_srno" and "ord_mst"."c_prefix" = "new_name"."c_ord_prefix" and "ord_mst"."c_year" = "new_name"."c_ord_year";
    if "new_name"."n_block_stock" = 0 and @n_blockso = 1 then
    else
      update "ord_det"
        set "n_issue_qty" = "n_issue_qty"+"new_name"."n_qty"
        where "ord_det"."c_year" = "new_name"."c_ord_year"
        and "ord_det"."c_prefix" = "new_name"."c_ord_prefix"
        and "ord_det"."n_srno" = "new_name"."n_ord_srno"
        and "ord_det"."c_item_code" = "new_name"."c_item_code"
    end if;
    if "new_name"."n_block_stock" = 1 then
      -- if @n_hold_pending = 1 then  --if keep pending is on
      update "item_stock_block" set "n_qty" = "n_qty"-("new_name"."n_qty"+"isnull"("new_name"."n_scheme_qty",0)) where "item_stock_block"."c_item_code" = "new_name"."c_item_code"
    --else  
    --	update item_stock_block set n_qty = n_qty-(isnull(@n_ordqty,0)+isnull(@n_ordschqty,0)) where item_stock_block.c_item_code = new_name.c_item_code ;           
    --end if  
    end if;
    if "new_name"."n_multi_ord" > 0 then
      update "ord_mst"
        set "ord_mst"."n_invno" = "new_name"."n_srno"
        where "ord_mst"."n_srno" = "new_name"."n_ord_srno"
    end if end if;
  if "new_name"."n_repl" = 0 then
    update "scheme_mst" set "scheme_mst"."n_used_sch_qty" = "scheme_mst"."n_used_sch_qty"+"new_name"."n_scheme_qty"
      where "scheme_mst"."c_item_code" = "new_name"."c_item_code" and "scheme_mst"."c_batch_no" = "new_name"."c_batch_no"
  end if;
  insert into "stock_ledger"
    ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
    "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_gst_code","n_service_qty","n_scheme_disc",
    "n_product_value","n_taxable_amt","c_ref_no","d_ref_date","n_service_chg","c_ret_type","c_prefix" ) values
    ( @pk,"new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_inv_date",
    -1*("new_name"."n_qty"),-1*"new_name"."n_scheme_qty",0,"new_name"."n_sale_rate","new_name"."n_disc_amt",0,0,
    "new_name"."n_cgst_per","new_name"."n_cgst_amt","new_name"."n_sgst_per","new_name"."n_sgst_amt","new_name"."n_igst_per","new_name"."n_igst_amt","new_name"."n_gst_cess_per","new_name"."n_gst_cess_amt",
    "new_name"."c_hsn_sac_code","new_name"."c_gst_code","new_name"."n_service_qty","new_name"."n_scheme_disc","new_name"."n_product_value","new_name"."n_taxable_amt",
    "new_name"."c_ref_bill_no","new_name"."d_ref_bill_dt","new_name"."n_service_chg","new_name"."c_ret_type","cprefix" ) ;
  ---------------------
  if "new_name"."c_ret_type" <> 'S' then
    select "c_item_code" into "c_tmp_code" from "stock" where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
    if sqlcode = 100 then
      insert into "stock"( "c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty","n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty",
        "n_mrp","n_purchase_rate","n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate","d_date","n_ptr","n_st_rate" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_exp_date",0,0,0,0,0,0,0,0,0,
        "new_name"."n_mrp","isnull"("new_name"."n_sale_rate",0),"isnull"("new_name"."n_sale_rate",0),0,0,0,0,"isnull"("new_name"."n_sale_rate",0),"d_def_date",0,0 ) ;
      if sqlstate = '02000' then
        raiserror 18000 "Error, Cannot add item in stock table. Please restart the system."
      end if end if;
    select "c_item_code" into "c_tmp_code" from "stock_eb" where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
    if sqlcode = 100 then
      insert into "stock_eb"( "c_item_code","c_batch_no","n_eqty","n_bqty","n_oqty","n_loose_eqty","n_loose_bqty","n_loose_oqty","n_rqty","n_loose_rqty" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no",
        if "new_name"."c_ret_type" = 'E' then-1*("new_name"."n_adj_qty") else 0 endif,
        if "new_name"."c_ret_type" = 'B' then-1*("new_name"."n_adj_qty") else 0 endif,
        if "new_name"."c_ret_type" <> 'E' and "new_name"."c_ret_type" <> 'B' and "new_name"."c_ret_type" <> 'C' then-1*("new_name"."n_adj_qty") else 0 endif,
        if "new_name"."c_ret_type" = 'E' then-1*"new_name"."n_adj_loose_qty" else 0 endif,
        if "new_name"."c_ret_type" = 'B' then-1*"new_name"."n_adj_loose_qty" else 0 endif,
        0,
        if "new_name"."c_ret_type" = 'C' then-1*("new_name"."n_adj_qty") else 0 endif,
        if "new_name"."c_ret_type" = 'c' then-1*"new_name"."n_adj_loose_qty" else 0 endif ) 
    else
      update "stock_eb"
        set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"-if "new_name"."c_ret_type" = 'E' then "new_name"."n_adj_qty" else 0 endif,
        "stock_eb"."n_bqty" = "stock_eb"."n_bqty"-if "new_name"."c_ret_type" = 'B' then "new_name"."n_adj_qty" else 0 endif,
        "stock_eb"."n_oqty" = "stock_eb"."n_oqty"-if "new_name"."c_ret_type" <> 'E' and "new_name"."c_ret_type" <> 'B' and "new_name"."c_ret_type" <> 'C' then "new_name"."n_adj_qty" else 0 endif,
        "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"-if "new_name"."c_ret_type" = 'E' then "new_name"."n_adj_loose_qty" else 0 endif,
        "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"-if "new_name"."c_ret_type" = 'B' then "new_name"."n_adj_loose_qty" else 0 endif,
        "stock_eb"."n_rqty" = "stock_eb"."n_rqty"-if "new_name"."c_ret_type" = 'C' then "new_name"."n_adj_qty" else 0 endif,
        "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"-if "new_name"."c_ret_type" = 'C' then "new_name"."n_adj_loose_qty" else 0 endif
        where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no"
    end if
  end if
end;
CREATE TRIGGER "update_stock_from_rtn_invoice_detail" before delete order 1 on
--------------------------------------
--------------------------------
--------------------------------
--------------------------------
----Inv insert End
"DBA"."rtn_invoice_det"
referencing old as "old_name"
for each row
begin
  declare @d_sale_rate numeric(14,3);
  declare @year char(2);
  declare @brcode char(6);
  declare @pk numeric(16);
  delete from "stock_ledger"
    where "stock_ledger"."n_srno" = "old_name"."n_srno"
    and "stock_ledger"."n_seq" = "old_name"."n_seq"
    and "stock_ledger"."c_item_code" = "old_name"."c_item_code"
    and "stock_ledger"."c_batch_no" = "old_name"."c_batch_no";
  if "old_name"."n_stock_ledger_effect" = 1 then
    if "isnull"("old_name"."n_ref_no",0) > 0 then
      delete from "dbnt_ledger"
        where "dbnt_ledger"."n_srno" = "old_name"."n_srno"
        and "dbnt_ledger"."c_item_code" = "old_name"."c_item_code"
        and "dbnt_ledger"."c_batch_no" = "old_name"."c_batch_no"
        and "dbnt_ledger"."c_type" = "old_name"."c_ret_type"
        and "dbnt_ledger"."c_prefix" = 'RI'
    end if;
    return
  end if;
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  if "len"("string"("old_name"."n_srno")) < 8 then
    set @pk = "uf_pk"(@brcode,@year,'RI',"old_name"."n_srno",0,'')
  else
    set @pk = "old_name"."n_srno"
  end if;
  update "stock" set "stock"."n_sale_qty" = "stock"."n_sale_qty"-"old_name"."n_qty",
    "stock"."n_scheme_sale_qty" = "stock"."n_scheme_sale_qty"-"old_name"."n_scheme_qty",
    "stock"."n_balance_qty" = "stock"."n_balance_qty"+"old_name"."n_qty"+"old_name"."n_scheme_qty",
    "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"old_name"."n_scheme_qty",
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
  if "old_name"."n_enable_supp_stock_sale" = 1 then
    delete from "Stock_inward_outwad" where "c_item_code" = "old_name"."c_item_code" and "c_batch_no" = "old_name"."c_batch_no" and "n_tran_no" = "old_name"."n_srno" and "n_tran_seq" = "old_name"."n_seq"
  end if;
  update "dc_det" set "dc_det"."n_bill_qty" = "dc_det"."n_bill_qty"-"old_name"."n_qty",
    "dc_det"."n_bill_scheme_qty" = "dc_det"."n_bill_scheme_qty"-"old_name"."n_scheme_qty"
    where "dc_det"."n_srno" = "old_name"."n_dc_no"
    and "dc_det"."c_item_code" = "old_name"."c_item_code"
    and "dc_det"."c_batch_no" = "old_name"."c_batch_no";
  if "old_name"."n_repl" = 0 then
    update "scheme_mst" set "scheme_mst"."n_used_sch_qty" = "scheme_mst"."n_used_sch_qty"-"old_name"."n_scheme_qty"
      where "scheme_mst"."c_item_code" = "old_name"."c_item_code" and "scheme_mst"."c_batch_no" = "old_name"."c_batch_no"
  end if;
  if "old_name"."c_ret_type" <> 'S' then
    update "stock_eb"
      set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "old_name"."c_ret_type" = 'E' then "old_name"."n_adj_qty" else 0 endif,
      "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "old_name"."c_ret_type" = 'B' then "old_name"."n_adj_qty" else 0 endif,
      "stock_eb"."n_oqty" = "stock_eb"."n_oqty"+if "old_name"."c_ret_type" <> 'E' and "old_name"."c_ret_type" <> 'B' and "old_name"."c_ret_type" <> 'C' then "old_name"."n_adj_qty" else 0 endif,
      "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"+if "old_name"."c_ret_type" = 'E' then "old_name"."n_adj_loose_qty" else 0 endif,
      "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"+if "old_name"."c_ret_type" = 'B' then "old_name"."n_adj_loose_qty" else 0 endif,
      "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "old_name"."c_ret_type" = 'C' then "old_name"."n_adj_qty" else 0 endif,
      "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"+if "old_name"."c_ret_type" = 'C' then "old_name"."n_adj_loose_qty" else 0 endif
      where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
  end if
end;
CREATE TRIGGER "update_stock_from_st_track_pick_insert" before insert order 1 on
"DBA"."st_track_pick"
referencing new as "new_name"
for each row
begin
  declare @ret_string char(100);
  if "new_name"."n_hold_flag" = 1 then
    update "stock" set "stock"."n_hold_qty" = "stock"."n_hold_qty"+"new_name"."n_qty",
      "stock"."n_store_track_qty" = "stock"."n_store_track_qty"+"new_name"."n_qty"
      where "stock"."c_item_code" = "new_name"."c_item_code"
      and "stock"."c_batch_no" = "new_name"."c_batch_no"
  end if;
  insert into "st_track_pick_history"
    ( "c_doc_no","n_inout","n_seq","n_org_seq","c_item_code",
    "c_batch_no","n_qty","c_tray_code",
    "c_rack","c_rack_grp_code","c_stage_code","n_hold_flag",
    "c_reason_code","c_note","t_time","c_device_id","c_godown_code",
    "t_time_out","c_user","c_user_2","n_err","c_chk_user",
    "c_phase_code","c_err_mark_user","c_barcode_user","c_pick_err_confirm_user","c_system_ip",
    "c_system_name" ) on existing skip values
    ( "new_name"."c_doc_no","new_name"."n_inout","new_name"."n_seq","new_name"."n_org_seq","new_name"."c_item_code",
    "new_name"."c_batch_no","new_name"."n_qty","new_name"."c_tray_code",
    "new_name"."c_rack","new_name"."c_rack_grp_code","new_name"."c_stage_code","new_name"."n_hold_flag",
    "new_name"."c_reason_code","new_name"."c_note","new_name"."t_time","new_name"."c_device_id","new_name"."c_godown_code",
    "now"(),"new_name"."c_user","new_name"."c_user_2","new_name"."n_err","new_name"."c_chk_user",
    "new_name"."c_phase_code","new_name"."c_err_mark_user","new_name"."c_barcode_user","new_name"."c_pick_err_confirm_user","new_name"."c_system_ip",
    "new_name"."c_system_name" ) 
end;
CREATE TRIGGER "update_stock_from_st_track_pick_update" before update order 1 on
"DBA"."st_track_pick"
referencing old as "old_name" new as "new_name"
for each row
begin
  if "new_name"."n_hold_flag" <> "old_name"."n_hold_flag" then
    if "new_name"."n_hold_flag" = 1 then
      update "stock" set "stock"."n_hold_qty" = "stock"."n_hold_qty"+"new_name"."n_qty",
        "stock"."n_store_track_qty" = "stock"."n_store_track_qty"+"new_name"."n_qty"
        where "stock"."c_item_code" = "new_name"."c_item_code"
        and "stock"."c_batch_no" = "new_name"."c_batch_no"
    end if;
    if "old_name"."n_hold_flag" = 1 then
      update "stock" set "stock"."n_hold_qty" = "stock"."n_hold_qty"-"old_name"."n_qty",
        "stock"."n_store_track_qty" = "stock"."n_store_track_qty"-"old_name"."n_qty"
        where "stock"."c_item_code" = "old_name"."c_item_code"
        and "stock"."c_batch_no" = "old_name"."c_batch_no"
    end if end if;
  insert into "st_track_pick_history"
    ( "c_doc_no","n_inout","n_seq","n_org_seq","c_item_code",
    "c_batch_no","n_qty","c_tray_code",
    "c_rack","c_rack_grp_code","c_stage_code","n_hold_flag",
    "c_reason_code","c_note","t_time","c_device_id","c_godown_code",
    "t_time_out","c_user","c_user_2","n_err","c_chk_user",
    "c_phase_code","c_err_mark_user","c_barcode_user","c_pick_err_confirm_user","c_system_ip",
    "c_system_name" ) on existing skip values
    ( "new_name"."c_doc_no","new_name"."n_inout","new_name"."n_seq","new_name"."n_org_seq","new_name"."c_item_code",
    "new_name"."c_batch_no","new_name"."n_qty","new_name"."c_tray_code",
    "new_name"."c_rack","new_name"."c_rack_grp_code","new_name"."c_stage_code","new_name"."n_hold_flag",
    "new_name"."c_reason_code","new_name"."c_note","new_name"."t_time","new_name"."c_device_id","new_name"."c_godown_code",
    "now"(),"new_name"."c_user","new_name"."c_user_2","new_name"."n_err","new_name"."c_chk_user",
    "new_name"."c_phase_code","new_name"."c_err_mark_user","new_name"."c_barcode_user","new_name"."c_pick_err_confirm_user","new_name"."c_system_ip",
    "new_name"."c_system_name" ) 
end;
CREATE TRIGGER "update_stock_from_stk_adj_delete" before delete order 2 on
----------------------------------------------------------
"DBA"."stock_adj_det"
referencing old as "old_name"
for each row
begin
  declare @pk,"d_old_godown_qty" numeric(18);
  declare @brcode char(6);
  declare @year char(2);
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  if "old_name"."n_cancel_flag" <> 1 and "old_name"."n_post" = 1 then
    delete from "stock_ledger"
      where "stock_ledger"."n_srno" = "old_name"."n_srno"
      and "stock_ledger"."n_seq" = "old_name"."n_seq";
    if "old_name"."n_enable_supp_stock_sale" = 1 then
      delete from "Stock_inward_outwad" where "c_item_code" = "old_name"."c_item_code" and "c_batch_no" = "old_name"."c_batch_no"
        and "n_tran_no" = "old_name"."n_srno" and "c_supp_code" = "old_name"."c_code_supp" and "c_br_code" = "old_name"."c_br_code"
    end if;
    if "old_name"."n_tran_type" = 0 then
      update "stock" set "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty"
        where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
      if "old_name"."n_retu_supp" = 1 then
        update "stock_eb" set "stock_eb"."n_oqty" = "stock_eb"."n_oqty"+"old_name"."n_qty"
          where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
      end if
    else if "old_name"."n_pur_godown_flag" = 1 then
        set "d_old_godown_qty" = "old_name"."n_qty"
      else
        set "d_old_godown_qty" = 0
      end if;
      update "stock" set "stock"."n_adjustment_qty" = "stock"."n_adjustment_qty"-"old_name"."n_qty",
        "stock"."n_balance_qty" = "stock"."n_balance_qty"-"old_name"."n_qty",
        "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"old_name"."n_scheme_qty",
        "stock"."n_godown_qty" = "stock"."n_godown_qty"-"d_old_godown_qty",
        "stock"."t_ltime" = "now"()
        where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
      if "old_name"."n_qty" < 0 and "old_name"."n_retu_supp" = 1 then
        update "stock_eb"
          set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "old_name"."n_adj_type" = 2 then "old_name"."n_qty" else 0 endif,
          "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "old_name"."n_adj_type" = 1 then "old_name"."n_qty" else 0 endif,
          "stock_eb"."n_oqty" = "stock_eb"."n_oqty"+if "old_name"."n_adj_type" <> 1 and "old_name"."n_adj_type" <> 2 and "old_name"."n_adj_type" <> 5 then "old_name"."n_qty" else 0 endif,
          "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "old_name"."n_adj_type" = 5 then "old_name"."n_qty" else 0 endif
          where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
      //EOF n_tran_type=0
      end if
    end if
  end if
end;
CREATE TRIGGER "update_stock_from_stk_adj_insert" after insert order 1 on
-------------------------------------------------------------------
"DBA"."stock_adj_det"
referencing new as "new_name"
for each row
begin
  declare "c_tmp_code" char(6);
  declare @pk,@count,"d_new_godown_qty" numeric(18);
  declare @brcode char(6);
  declare @year,@c_prefix char(2);
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  set @c_prefix = "uf_get_pk_component"("new_name"."n_srno",3);
  if "new_name"."n_cancel_flag" <> 1 and "new_name"."n_post" = 1 then
    select "count"()
      into @count from "stock"
      where "stock"."c_item_code" = "new_name"."c_item_code"
      and "stock"."c_batch_no" = "new_name"."c_batch_no";
    if @count is null then
      set @count = 0
    end if;
    if "new_name"."n_pur_godown_flag" = 1 then
      set "d_new_godown_qty" = "new_name"."n_qty"
    else
      set "d_new_godown_qty" = 0
    end if;
    if @count = 0 then
      insert into "stock"( "c_item_code","c_batch_no","n_balance_qty","n_sch_bal_qty" ) values
        ( "new_name"."c_br_code","new_name"."c_item_code","new_name"."c_batch_no",
        "new_name"."n_qty","new_name"."n_scheme_qty" ) 
    else
      if "new_name"."n_tran_type" = 0 then //batch adjustment 
        update "stock"
          set "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty",
          "d_ldate" = "new_name"."d_ldate",
          "t_ltime" = "now"()
          where "stock"."c_item_code" = "new_name"."c_item_code"
          and "stock"."c_batch_no" = "new_name"."c_batch_no"
      else
        update "stock" set "stock"."n_adjustment_qty" = "stock"."n_adjustment_qty"+"new_name"."n_qty",
          "stock"."n_balance_qty" = "stock"."n_balance_qty"+"new_name"."n_qty",
          "stock"."n_godown_qty" = "stock"."n_godown_qty"+"d_new_godown_qty",
          "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"new_name"."n_scheme_qty",
          "stock"."t_ltime" = "now"()
          where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no"
      end if end if;
    if "new_name"."n_enable_supp_stock_sale" = 1 then
      insert into "Stock_inward_outwad"( "c_item_code","c_batch_no","n_tran_no","c_supp_code","n_qty","n_schm_qty","d_date","n_flag","c_br_code" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_srno","new_name"."c_code_supp","new_name"."n_qty","new_name"."n_scheme_qty","new_name"."d_date",6,"new_name"."c_br_code" ) 
    end if;
    insert into "stock_ledger"
      ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
      "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_prefix" ) values
      ( "new_name"."n_srno","new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_date",
      "new_name"."n_qty","new_name"."n_scheme_qty",0,"new_name"."n_sale_rate",0,0,0,
      0,0,0,0,0,0,0,0,"new_name"."c_hsn_sac_code",@c_prefix ) ;
    set @count = 0;
    if "new_name"."n_tran_type" = 0 then //batch adjustment  
      if "new_name"."n_retu_supp" = 1 then
        select "count"()
          into @count from "stock_eb"
          where "stock_eb"."c_item_code" = "new_name"."c_item_code"
          and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
        if @count is null then
          set @count = 0
        end if;
        if @count = 0 then
          insert into "stock_eb"( "c_item_code","c_batch_no","n_oqty" ) values
            ( "new_name"."c_item_code","new_name"."c_batch_no",
            -1*"new_name"."n_qty" ) 
        else
          update "stock_eb" set "stock_eb"."n_qty" = "stock_eb"."n_oqty"-"new_name"."n_qty"
            where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no"
        end if
      end if
    else if "new_name"."n_qty" < 0 and "new_name"."n_retu_supp" = 1 then
        select "count"()
          into @count from "stock_eb"
          where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
        if @count is null then
          set @count = 0
        end if;
        if @count = 0 then
          insert into "stock_eb"( "c_item_code","c_batch_no","n_eqty","n_bqty","n_oqty","n_rqty" ) values
            ( "new_name"."c_item_code","new_name"."c_batch_no",
            if "new_name"."n_adj_type" = 2 then(-"new_name"."n_qty") else 0 endif,
            if "new_name"."n_adj_type" = 1 then-"new_name"."n_qty" else 0 endif,
            if "new_name"."n_adj_type" <> 1 and "new_name"."n_adj_type" <> 2 and "new_name"."n_adj_type" <> 5 then-"new_name"."n_qty" else 0 endif,
            if "new_name"."n_adj_type" = 5 then-"new_name"."n_qty" else 0 endif ) 
        else
          update "stock_eb"
            set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "new_name"."n_adj_type" = 2 then-"new_name"."n_qty" else 0 endif,
            "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "new_name"."n_adj_type" = 1 then-"new_name"."n_qty" else 0 endif,
            "stock_eb"."n_oqty" = "stock_eb"."n_oqty"+if "new_name"."n_adj_type" <> 1 and "new_name"."n_adj_type" > 2 and "new_name"."n_adj_type" <> 5 then(-"new_name"."n_qty") else 0 endif,
            "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "new_name"."n_adj_type" = 5 then-"new_name"."n_qty" else 0 endif
            where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no"
        end if;
        if "new_name"."n_adj_type" = 3 then
          if(select "isnull"("n_update_item_status_from_stk_adj",1) from "System_Parameter") = 1 then
            update "item_mst" set "n_old_flag" = 2,"d_ldate" = "uf_default_date"() where "c_code" = "new_name"."c_item_code"
          //EOF if new_name.n_qty < 0 and new_name.n_supp_return = 1 then
          end if //EOF new_name.n_tran_type = 0 then //batch adjustment
        //EOF if new_name.n_cancel_flag <> 1 and new_name.n_post = 1 then
        end if
      end if
    end if
  end if
end;
CREATE TRIGGER "update_stock_from_stk_tran_delete" before delete order 1 on
"DBA"."stock_tran_det"
referencing old as "old_name"
for each row
begin
  declare @approval_process numeric(1);
  set @approval_process = 0;
  select cast("uf_sys_para_setup"('S00202','W00071','0',1) as numeric(1)) into @approval_process;
  if @approval_process is null then
    set @approval_process = 0
  end if;
  if @approval_process = 1 then
    if "old_name"."n_approve" <> 1 then
      return
    end if end if;
  update "stock" set "stock"."n_godown_qty" = "stock"."n_godown_qty"-"old_name"."n_rqty"+"old_name"."n_qty",
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no"
end;
CREATE TRIGGER "update_stock_from_stk_tran_insert" after insert order 1 on
"DBA"."stock_tran_det"
referencing new as "new_name"
for each row
begin
  if "new_name"."n_approve" = 0 then
    return
  end if;
  update "stock" set "stock"."n_godown_qty" = "stock"."n_godown_qty"+"new_name"."n_rqty"-"new_name"."n_qty",
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no"
end;
CREATE TRIGGER "update_stock_from_stk_tran_update" before update order 1 on
"DBA"."stock_tran_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @approval_process numeric(1);
  set @approval_process = 0;
  select cast("uf_sys_para_setup"('S00202','W00071','0',1) as numeric(1)) into @approval_process;
  if @approval_process is null then
    set @approval_process = 0
  end if;
  if @approval_process = 1 then
    if "new_name"."n_approve" <> 1 then
      return
    else
      update "stock" set "stock"."n_godown_qty" = "stock"."n_godown_qty"+"new_name"."n_rqty"-"new_name"."n_qty",
        "stock"."t_ltime" = "now"()
        where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no"
    end if
  else update "stock" set "stock"."n_godown_qty" = "stock"."n_godown_qty"-"old_name"."n_rqty"+"old_name"."n_qty",
      "stock"."t_ltime" = "now"()
      where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
    update "stock" set "stock"."n_godown_qty" = "stock"."n_godown_qty"+"new_name"."n_rqty"-"new_name"."n_qty",
      "stock"."t_ltime" = "now"()
      where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no"
  end if
end;
CREATE TRIGGER "update_stock_from_stock_batch_cr_insert"
----------------------------------------------------------------
 after insert order 1 on
"DBA"."stock_batch_cr"
referencing new as "new_name"
for each row
begin
  declare "s_tmp_no" char(6);
  declare "li_cnt" numeric(1);
  select "c_item_code" into "s_tmp_no" from "stock" where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
  if sqlcode = 0 then
  else
    insert into "stock"( "c_item_code","c_batch_no","d_expiry_date","n_mrp","n_purchase_rate","n_sale_rate","n_effective_purchase_rate","n_excise","n_lock","n_balance_qty","n_sch_bal_qty","c_ref_year","c_ref_prefix","n_ref_srno","d_date","c_user" ) values
      ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_exp_dt","new_name"."n_mrp","new_name"."n_pur_rate","new_name"."n_sale_rate","new_name"."n_eff_pur_rate","new_name"."n_excise","new_name"."n_lock",0,0,null,null,0,"new_name"."d_adate","new_name"."c_createuser" ) 
  end if
end;
CREATE TRIGGER "update_stock_from_update_crnt_repl_issue" after update order 2 on
----------------sales invoice_det update
"DBA"."crnt_repl_issue_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @year char(2);
  declare @brcode char(6);
  declare @pk numeric(16);
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  if "len"("string"("new_name"."n_srno")) < 8 then
    set @pk = "uf_pk"(@brcode,@year,'CI',"new_name"."n_srno",0,'')
  else
    set @pk = "new_name"."n_srno"
  end if;
  delete from "stock_ledger"
    where "stock_ledger"."n_srno" = @pk
    and "stock_ledger"."n_seq" = "old_name"."n_seq"
    and "stock_ledger"."c_item_code" = "old_name"."c_item_code"
    and "stock_ledger"."c_batch_no" = "old_name"."c_batch_no";
  insert into "stock_ledger"
    ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
    "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_gst_code","n_service_qty","n_scheme_disc","n_product_value","n_taxable_amt","n_ref_no","d_ref_date","n_service_chg" ) values
    ( @pk,"new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_crnt_repl_date",
    -1*"new_name"."n_qty",-1*"new_name"."n_scheme_qty",0,"new_name"."n_sale_rate","new_name"."n_disc_amt",0,0,
    "new_name"."n_cgst_per","new_name"."n_cgst_amt","new_name"."n_sgst_per","new_name"."n_sgst_amt","new_name"."n_igst_per","new_name"."n_igst_amt","new_name"."n_gst_cess_per","new_name"."n_gst_cess_amt","new_name"."c_hsn_sac_code","new_name"."c_gst_code","new_name"."n_service_qty","new_name"."n_scheme_disc","new_name"."n_product_value","new_name"."n_taxable_amt","new_name"."n_ref_srno","new_name"."d_ref_date","new_name"."n_service_chg" ) ;
  update "stock"
    set "stock"."n_scheme_sale_qty" = "stock"."n_scheme_sale_qty"-"old_name"."n_qty",
    "stock"."n_balance_qty" = "stock"."n_balance_qty"+"old_name"."n_qty",
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
  update "stock"
    set "stock"."n_scheme_sale_qty" = "stock"."n_scheme_sale_qty"+"new_name"."n_qty",
    "stock"."n_balance_qty" = "stock"."n_balance_qty"-"new_name"."n_qty",
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "new_name"."c_item_code"
    and "stock"."c_batch_no" = "new_name"."c_batch_no"
end;
CREATE TRIGGER "update_stock_from_update_dc_det" after update order 2 on
"DBA"."dc_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  update "stock" set "stock"."n_dc_qty" = "stock"."n_dc_qty"-"old_name"."n_qty"-"old_name"."n_scheme_qty"+"old_name"."n_bill_qty"+"old_name"."n_bill_scheme_qty"+"old_name"."n_ret_qty"+"old_name"."n_ret_scheme_qty",
    "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"old_name"."n_scheme_qty"-"old_name"."n_bill_scheme_qty"-"old_name"."n_ret_scheme_qty",
    "stock"."t_ltime" = "now"(),
    "stock"."n_godown_qty" = if "old_name"."n_godown_flag" = 1 and("new_name"."n_bill_qty"+"new_name"."n_bill_scheme_qty") = 0 then "stock"."n_godown_qty"+"old_name"."n_qty"+"old_name"."n_scheme_qty"-"old_name"."n_bill_qty"-"old_name"."n_bill_scheme_qty"-"old_name"."n_ret_qty"-"old_name"."n_ret_scheme_qty" else "stock"."n_godown_qty" endif
    where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
  update "stock" set "stock"."n_dc_qty" = "stock"."n_dc_qty"+"new_name"."n_qty"+"new_name"."n_scheme_qty"-"new_name"."n_bill_qty"-"new_name"."n_bill_scheme_qty"-"new_name"."n_ret_qty"-"new_name"."n_ret_scheme_qty",
    "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"new_name"."n_scheme_qty"+"new_name"."n_bill_scheme_qty"+"new_name"."n_ret_scheme_qty",
    "stock"."t_ltime" = "now"(),
    "stock"."n_godown_qty" = if "new_name"."n_godown_flag" = 1 and("new_name"."n_bill_qty"+"new_name"."n_bill_scheme_qty") = 0 then "stock"."n_godown_qty"-"new_name"."n_qty"-"new_name"."n_scheme_qty"+"new_name"."n_bill_qty"+"new_name"."n_bill_scheme_qty"+"new_name"."n_ret_qty"+"new_name"."n_ret_scheme_qty" else "stock"."n_godown_qty" endif
    where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
  update "scheme_mst" set "scheme_mst"."n_used_sch_qty" = "scheme_mst"."n_used_sch_qty"-"old_name"."n_scheme_qty"+"old_name"."n_bill_scheme_qty"+"old_name"."n_ret_scheme_qty"
    where "scheme_mst"."c_item_code" = "old_name"."c_item_code" and "scheme_mst"."c_batch_no" = "old_name"."c_batch_no";
  update "scheme_mst" set "scheme_mst"."n_used_sch_qty" = "scheme_mst"."n_used_sch_qty"+"new_name"."n_scheme_qty"-"new_name"."n_bill_scheme_qty"-"new_name"."n_ret_scheme_qty"
    where "scheme_mst"."c_item_code" = "new_name"."c_item_code" and "scheme_mst"."c_batch_no" = "new_name"."c_batch_no"
end;
CREATE TRIGGER "update_stock_from_update_invoice_det" after update order 2 on
------------------------------
--------------------------------------------
----------------sales invoice_det update
"DBA"."invoice_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @d_sale_rate numeric(14,3);
  declare @year char(2);
  declare @brcode char(6);
  declare @pk numeric(18);
  declare "cprefix" char(2);
  declare @limitcheck numeric(10);
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  if "len"("string"("new_name"."n_srno")) < 8 then
    set @pk = "uf_pk"(@brcode,@year,'I',"new_name"."n_srno",0,'')
  else
    set @pk = "new_name"."n_srno"
  end if;
  set "cprefix" = "uf_get_pk_component"(@pk,3);
  delete from "stock_ledger"
    where "stock_ledger"."n_srno" = @pk
    and "stock_ledger"."n_seq" = "old_name"."n_seq"
    and "stock_ledger"."c_item_code" = "old_name"."c_item_code"
    and "stock_ledger"."c_batch_no" = "old_name"."c_batch_no";
  insert into "stock_ledger"
    ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
    "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_gst_code","n_service_qty","n_scheme_disc","n_product_value",
    "n_taxable_amt","n_ref_no","d_ref_date","n_service_chg","c_prefix","n_add_cess_amt","n_add_cess" ) values
    ( @pk,"new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_inv_date",
    -1*"new_name"."n_qty",-1*"new_name"."n_scheme_qty",0,"new_name"."n_sale_rate","new_name"."n_disc_amt",0,0,
    "new_name"."n_cgst_per","new_name"."n_cgst_amt","new_name"."n_sgst_per","new_name"."n_sgst_amt","new_name"."n_igst_per","new_name"."n_igst_amt","new_name"."n_gst_cess_per","new_name"."n_gst_cess_amt","new_name"."c_hsn_sac_code","new_name"."c_gst_code",
    "new_name"."n_service_qty","new_name"."n_scheme_disc","new_name"."n_product_value","new_name"."n_taxable_amt","new_name"."n_ref_no","new_name"."d_ref_date","new_name"."n_service_chg","cprefix","new_name"."n_add_cess_amt","new_name"."n_add_cess" ) ;
  update "stock" set "stock"."n_sale_qty" = "stock"."n_sale_qty"-"old_name"."n_qty",
    "stock"."n_scheme_sale_qty" = "stock"."n_scheme_sale_qty"-"old_name"."n_scheme_qty",
    "stock"."n_balance_qty" = "stock"."n_balance_qty"+"old_name"."n_qty"+"old_name"."n_scheme_qty",
    "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"old_name"."n_scheme_qty",
    "stock"."n_godown_qty" = if "old_name"."n_godown_flag" = 1 then "stock"."n_godown_qty"+"old_name"."n_qty"+"old_name"."n_scheme_qty" else "stock"."n_godown_qty" endif,
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
  update "dc_det" set "dc_det"."n_bill_qty" = "dc_det"."n_bill_qty"-"old_name"."n_qty",
    "dc_det"."n_bill_scheme_qty" = "dc_det"."n_bill_scheme_qty"-"old_name"."n_scheme_qty"
    where "dc_det"."n_srno" = "old_name"."n_dc_no"
    and "dc_det"."c_item_code" = "old_name"."c_item_code"
    and "dc_det"."c_batch_no" = "old_name"."c_batch_no";
  update "dc_det" set "dc_det"."n_bill_qty" = "dc_det"."n_bill_qty"+"new_name"."n_qty",
    "dc_det"."n_bill_scheme_qty" = "dc_det"."n_bill_scheme_qty"+"new_name"."n_scheme_qty"
    where "dc_det"."n_srno" = "new_name"."n_dc_no"
    and "dc_det"."c_item_code" = "new_name"."c_item_code"
    and "dc_det"."c_batch_no" = "new_name"."c_batch_no";
  update "stock" set "stock"."n_sale_qty" = "stock"."n_sale_qty"+"new_name"."n_qty",
    "stock"."n_scheme_sale_qty" = "stock"."n_scheme_sale_qty"+"new_name"."n_scheme_qty",
    "stock"."n_balance_qty" = "stock"."n_balance_qty"-"new_name"."n_qty"-"new_name"."n_scheme_qty",
    "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"new_name"."n_scheme_qty",
    "stock"."n_godown_qty" = if "new_name"."n_godown_flag" = 1 then "stock"."n_godown_qty"-"new_name"."n_qty"-"new_name"."n_scheme_qty" else "stock"."n_godown_qty" endif,
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
  if "old_name"."n_repl" = 0 then
    update "scheme_mst" set "scheme_mst"."n_used_sch_qty" = "scheme_mst"."n_used_sch_qty"-"old_name"."n_scheme_qty"
      where "scheme_mst"."c_item_code" = "old_name"."c_item_code" and "scheme_mst"."c_batch_no" = "old_name"."c_batch_no"
  end if;
  if "new_name"."n_repl" = 0 then
    update "scheme_mst" set "scheme_mst"."n_used_sch_qty" = "scheme_mst"."n_used_sch_qty"+"new_name"."n_scheme_qty"
      where "scheme_mst"."c_item_code" = "new_name"."c_item_code" and "scheme_mst"."c_batch_no" = "new_name"."c_batch_no"
  end if;
  select "isnull"("n_enable_cust_item_limit_chk",0) into @limitcheck from "System_Parameter";
  if("old_name"."n_dc_no" = 0 or "old_name"."n_dc_no" is null) and @limitcheck = 1 then
    set @limitcheck = 0;
    update "cust_item_billed"
      set "n_qty" = if "n_qty"-"old_name"."n_qty" < 0 then "n_qty"-0 else "n_qty"-"old_name"."n_qty" endif,
      "n_schm_qty" = if "n_schm_qty"-"old_name"."n_scheme_qty" < 0 then "n_schm_qty"-0 else "n_schm_qty"-"old_name"."n_scheme_qty" endif,
      "n_scheme_disc" = if "n_scheme_disc"-"old_name"."n_scheme_disc" < 0 then "n_scheme_disc"-0 else "n_scheme_disc"-"old_name"."n_scheme_disc" endif
      where "c_cust_code" = "old_name"."c_cust_code_det"
      and "c_item_code" = "old_name"."c_item_code"
      and "d_date" = "old_name"."d_inv_date";
    update "cust_item_billed"
      set "n_qty" = "n_qty"+"new_name"."n_qty","n_schm_qty" = "n_schm_qty"+"new_name"."n_scheme_qty","n_scheme_disc" = "n_scheme_disc"+"new_name"."n_scheme_disc"
      where "c_cust_code" = "new_name"."c_cust_code_det"
      and "c_item_code" = "new_name"."c_item_code"
      and "d_date" = "new_name"."d_inv_date"
  end if;
  if "old_name"."n_enable_supp_stock_sale" = 1 and("new_name"."n_qty" <> "old_name"."n_qty" or "new_name"."n_scheme_qty" <> "new_name"."n_scheme_qty") then
    delete from "invoice_det_stk_sale"
      where "c_item_code" = "old_name"."c_item_code" and "c_batch_no" = "old_name"."c_batch_no" and "n_tran_no" = "old_name"."n_srno"
      and "n_dc_no" = "old_name"."n_dc_no" and "n_repl" = "old_name"."n_repl" and "n_ord_srno" = "old_name"."n_ord_srno";
    if "new_name"."n_enable_supp_stock_sale" = 1 then
      call "usp_stock_supp_sale_inv"("new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_qty","new_name"."n_scheme_qty","new_name"."n_srno","new_name"."d_inv_date","isnull"("new_name"."n_dc_no",0),"isnull"("new_name"."n_repl",0),"isnull"("new_name"."n_ord_srno",0),"isnull"("new_name"."n_branch",0),"isnull"("new_name"."n_product_value",0),"isnull"("new_name"."n_ts_value",0),"new_name"."c_mfac_code")
    end if
  end if
end;
CREATE TRIGGER "update_stock_from_update_rtn_invoice_det" after update order 2 on
-----------------------------------------
------------------------------
--------------------------------------
--------------------------------------
----------------sales invoice_det update
"DBA"."rtn_invoice_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "c_tmp_code" char(6);
  declare @d_sale_rate numeric(14,3);
  declare @year,"cprefix" char(2);
  declare @brcode char(6);
  declare @pk numeric(16);
  declare "d_def_date" date;
  select "right"("db_name"(),2) into @year;
  select "System_Parameter"."c_br_code" into @brcode from "System_Parameter";
  if "len"("string"("new_name"."n_srno")) < 8 then
    set @pk = "uf_pk"(@brcode,@year,'RI',"new_name"."n_srno",0,'')
  else
    set @pk = "new_name"."n_srno"
  end if;
  set "cprefix" = "uf_get_pk_component"(@pk,3);
  set "d_def_date" = "uf_default_date"();
  delete from "stock_ledger"
    where "stock_ledger"."n_srno" = "old_name"."n_srno"
    and "stock_ledger"."n_seq" = "old_name"."n_seq"
    and "stock_ledger"."c_item_code" = "old_name"."c_item_code"
    and "stock_ledger"."c_batch_no" = "old_name"."c_batch_no";
  if "new_name"."n_stock_ledger_effect" = 1 and "old_name"."n_stock_ledger_effect" = 1 then
    if "isnull"("n_ref_no",0) > 0 then
      delete from "dbnt_ledger"
        where "dbnt_ledger"."n_srno" = "old_name"."n_srno"
        and "dbnt_ledger"."c_item_code" = "old_name"."c_item_code"
        and "dbnt_ledger"."c_batch_no" = "old_name"."c_batch_no"
        and "dbnt_ledger"."c_type" = "old_name"."c_ret_type"
        and "dbnt_ledger"."c_prefix" = 'RI';
      insert into "dbnt_ledger"
        ( "n_srno","c_prefix","c_type","c_item_code","c_batch_no","n_srno1","c_prefix1","c_type1","n_qty","n_loose_qty","n_qty_actual","n_loose_qty_actual","n_rate",
        "n_pack_conv","n_debit_per","n_igst_per","n_cgst_per","n_sgst_per","n_cess_per","c_gst_code","n_schm_qty","n_scheme_disc","n_schm_qty_actual","n_schm_disc_actual" ) values
        ( "new_name"."n_srno",'RI',"new_name"."c_ret_type","new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_ref_no",'DB',"new_name"."c_ret_type",-1*("isnull"("new_name"."n_qty",0)+"isnull"("new_name"."n_scheme_qty",0)+"isnull"("new_name"."n_adj_qty",0)+"isnull"("new_name"."n_manual_qty",0)),
        -1*("isnull"("new_name"."n_loose_qty",0)+"isnull"("new_name"."n_adj_loose_qty",0)),-1*("isnull"("new_name"."n_qty",0)+"isnull"("new_name"."n_scheme_qty",0)+"isnull"("new_name"."n_adj_qty",0)+"isnull"("new_name"."n_manual_qty",0)),-1*("isnull"("new_name"."n_loose_qty",0)+"isnull"("new_name"."n_adj_loose_qty",0)),"new_name"."n_sale_rate",
        "isnull"("new_name"."n_pack_conv",1),0,0,0,0,0,null,-1*"isnull"("new_name"."n_scheme_qty",0),-1*"isnull"("new_name"."n_scheme_disc",0),-1*"isnull"("new_name"."n_scheme_qty",0),-1*"isnull"("new_name"."n_scheme_disc",0) ) 
    end if;
    insert into "stock_ledger"
      ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
      "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_gst_code","n_service_qty","n_scheme_disc",
      "n_product_value","n_taxable_amt","c_ref_no","d_ref_date","n_service_chg","n_eb_flag","c_ret_type","c_prefix" ) values
      ( "new_name"."n_srno","new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_inv_date",
      -1*("new_name"."n_qty"),-1*"new_name"."n_scheme_qty",0,"new_name"."n_sale_rate","new_name"."n_disc_amt",0,0,
      "new_name"."n_cgst_per","new_name"."n_cgst_amt","new_name"."n_sgst_per","new_name"."n_sgst_amt","new_name"."n_igst_per","new_name"."n_igst_amt","new_name"."n_gst_cess_per","new_name"."n_gst_cess_amt",
      "new_name"."c_hsn_sac_code","new_name"."c_gst_code","new_name"."n_service_qty","new_name"."n_scheme_disc","new_name"."n_product_value","new_name"."n_taxable_amt",
      "new_name"."c_ref_bill_no","new_name"."d_ref_bill_dt","new_name"."n_service_chg",1,"new_name"."c_ret_type","cprefix" ) ;
    return
  end if;
  insert into "stock_ledger"
    ( "n_srno","n_seq","c_item_code","c_batch_no","d_date","n_qty","n_sch_qty","n_qty1","n_rate","n_disc","n_factor",
    "n_inward_flag","n_cgst_per","n_cgst_amt","n_sgst_per","n_sgst_amt","n_igst_per","n_igst_amt","n_gst_cess_per","n_gst_cess_amt","c_hsn_sac_code","c_gst_code","n_service_qty","n_scheme_disc",
    "n_product_value","n_taxable_amt","c_ref_no","d_ref_date","n_service_chg","c_ret_type","c_prefix" ) values
    ( @pk,"new_name"."n_seq","new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_inv_date",
    -1*("new_name"."n_qty"),-1*"new_name"."n_scheme_qty",0,"new_name"."n_sale_rate","new_name"."n_disc_amt",0,0,
    "new_name"."n_cgst_per","new_name"."n_cgst_amt","new_name"."n_sgst_per","new_name"."n_sgst_amt","new_name"."n_igst_per","new_name"."n_igst_amt","new_name"."n_gst_cess_per","new_name"."n_gst_cess_amt",
    "new_name"."c_hsn_sac_code","new_name"."c_gst_code","new_name"."n_service_qty","new_name"."n_scheme_disc","new_name"."n_product_value","new_name"."n_taxable_amt",
    "new_name"."c_ref_bill_no","new_name"."d_ref_bill_dt","new_name"."n_service_chg","new_name"."c_ret_type","cprefix" ) ;
  update "stock" set "stock"."n_sale_qty" = "stock"."n_sale_qty"-"old_name"."n_qty",
    "stock"."n_scheme_sale_qty" = "stock"."n_scheme_sale_qty"-"old_name"."n_scheme_qty",
    "stock"."n_balance_qty" = "stock"."n_balance_qty"+"old_name"."n_qty"+"old_name"."n_scheme_qty",
    "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"+"old_name"."n_scheme_qty",
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "old_name"."c_item_code" and "stock"."c_batch_no" = "old_name"."c_batch_no";
  update "dc_det" set "dc_det"."n_bill_qty" = "dc_det"."n_bill_qty"-"old_name"."n_qty",
    "dc_det"."n_bill_scheme_qty" = "dc_det"."n_bill_scheme_qty"-"old_name"."n_scheme_qty"
    where "dc_det"."n_srno" = "old_name"."n_dc_no"
    and "dc_det"."c_item_code" = "old_name"."c_item_code"
    and "dc_det"."c_batch_no" = "old_name"."c_batch_no";
  update "dc_det" set "dc_det"."n_bill_qty" = "dc_det"."n_bill_qty"+"new_name"."n_qty",
    "dc_det"."n_bill_scheme_qty" = "dc_det"."n_bill_scheme_qty"+"new_name"."n_scheme_qty"
    where "dc_det"."n_srno" = "new_name"."n_dc_no"
    and "dc_det"."c_item_code" = "new_name"."c_item_code"
    and "dc_det"."c_batch_no" = "new_name"."c_batch_no";
  update "stock" set "stock"."n_sale_qty" = "stock"."n_sale_qty"+"new_name"."n_qty",
    "stock"."n_scheme_sale_qty" = "stock"."n_scheme_sale_qty"+"new_name"."n_scheme_qty",
    "stock"."n_balance_qty" = "stock"."n_balance_qty"-"new_name"."n_qty"-"new_name"."n_scheme_qty",
    "stock"."n_sch_bal_qty" = "stock"."n_sch_bal_qty"-"new_name"."n_scheme_qty",
    "stock"."t_ltime" = "now"()
    where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
  if "old_name"."n_enable_supp_stock_sale" = 1 then
    delete from "Stock_inward_outwad" where "c_item_code" = "old_name"."c_item_code" and "c_batch_no" = "old_name"."c_batch_no" and "n_tran_no" = "old_name"."n_srno" and "n_tran_seq" = "old_name"."n_seq"
  end if;
  if "new_name"."n_enable_supp_stock_sale" = 1 then
    insert into "Stock_inward_outwad"( "c_item_code","c_batch_no","n_tran_no","c_supp_code","n_qty","n_schm_qty","d_date","n_flag","n_branch","n_tran_seq" ) values
      ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."n_srno","new_name"."c_code_supp",-1*"new_name"."n_qty","new_name"."n_scheme_qty","new_name"."d_inv_date",7,"new_name"."n_branch","new_name"."n_seq" ) 
  end if;
  if "old_name"."n_repl" = 0 then
    update "scheme_mst" set "scheme_mst"."n_used_sch_qty" = "scheme_mst"."n_used_sch_qty"-"old_name"."n_scheme_qty"
      where "scheme_mst"."c_item_code" = "old_name"."c_item_code" and "scheme_mst"."c_batch_no" = "old_name"."c_batch_no"
  end if;
  if "new_name"."n_repl" = 0 then
    update "scheme_mst" set "scheme_mst"."n_used_sch_qty" = "scheme_mst"."n_used_sch_qty"+"new_name"."n_scheme_qty"
      where "scheme_mst"."c_item_code" = "new_name"."c_item_code" and "scheme_mst"."c_batch_no" = "new_name"."c_batch_no"
  end if;
  ------------
  if "old_name"."c_ret_type" <> 'S' then
    update "stock_eb"
      set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"+if "old_name"."c_ret_type" = 'E' then "old_name"."n_adj_qty" else 0 endif,
      "stock_eb"."n_bqty" = "stock_eb"."n_bqty"+if "old_name"."c_ret_type" = 'B' then "old_name"."n_adj_qty" else 0 endif,
      "stock_eb"."n_oqty" = "stock_eb"."n_oqty"+if "old_name"."c_ret_type" <> 'E' and "old_name"."c_ret_type" <> 'B' and "old_name"."c_ret_type" <> 'C' then "old_name"."n_adj_qty" else 0 endif,
      "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"+if "old_name"."c_ret_type" = 'E' then "old_name"."n_adj_loose_qty" else 0 endif,
      "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"+if "old_name"."c_ret_type" = 'B' then "old_name"."n_adj_loose_qty" else 0 endif,
      "stock_eb"."n_rqty" = "stock_eb"."n_rqty"+if "old_name"."c_ret_type" = 'C' then "old_name"."n_adj_qty" else 0 endif,
      "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"+if "old_name"."c_ret_type" = 'C' then "old_name"."n_adj_loose_qty" else 0 endif
      where "stock_eb"."c_item_code" = "old_name"."c_item_code" and "stock_eb"."c_batch_no" = "old_name"."c_batch_no"
  end if;
  if "new_name"."c_ret_type" <> 'S' then
    select "c_item_code" into "c_tmp_code" from "stock" where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
    if sqlcode = 100 then
      insert into "stock"( "c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty","n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty",
        "n_mrp","n_purchase_rate","n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate","d_date","n_ptr","n_st_rate" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no","new_name"."d_exp_date",0,0,0,0,0,0,0,0,0,
        "new_name"."n_mrp","isnull"("new_name"."n_sale_rate",0),"isnull"("new_name"."n_sale_rate",0),0,0,0,0,"isnull"("new_name"."n_sale_rate",0),"d_def_date",0,0 ) ;
      if sqlstate = '02000' then
        raiserror 18000 "Error, Cannot add item in stock table. Please restart the system."
      end if end if;
    select "c_item_code" into "c_tmp_code" from "stock_eb" where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no";
    if sqlcode = 100 then
      insert into "stock_eb"( "c_item_code","c_batch_no","n_eqty","n_bqty","n_oqty","n_loose_eqty","n_loose_bqty","n_loose_oqty","n_rqty","n_loose_rqty" ) values
        ( "new_name"."c_item_code","new_name"."c_batch_no",
        if "new_name"."c_ret_type" = 'E' then-1*("new_name"."n_adj_qty") else 0 endif,
        if "new_name"."c_ret_type" = 'B' then-1*("new_name"."n_adj_qty") else 0 endif,
        if "new_name"."c_ret_type" <> 'E' and "new_name"."c_ret_type" <> 'B' and "new_name"."c_ret_type" <> 'C' then-1*("new_name"."n_adj_qty") else 0 endif,
        if "new_name"."c_ret_type" = 'E' then-1*"new_name"."n_adj_loose_qty" else 0 endif,
        if "new_name"."c_ret_type" = 'B' then-1*"new_name"."n_adj_loose_qty" else 0 endif,
        0,
        if "new_name"."c_ret_type" = 'C' then-1*("new_name"."n_adj_qty") else 0 endif,
        if "new_name"."c_ret_type" = 'C' then-1*"new_name"."n_adj_loose_qty" else 0 endif ) 
    else
      update "stock_eb"
        set "stock_eb"."n_eqty" = "stock_eb"."n_eqty"-if "new_name"."c_ret_type" = 'E' then "new_name"."n_adj_qty" else 0 endif,
        "stock_eb"."n_bqty" = "stock_eb"."n_bqty"-if "new_name"."c_ret_type" = 'B' then "new_name"."n_adj_qty" else 0 endif,
        "stock_eb"."n_oqty" = "stock_eb"."n_oqty"-if "new_name"."c_ret_type" <> 'E' and "new_name"."c_ret_type" <> 'B' and "new_name"."c_ret_type" <> 'C' then "new_name"."n_adj_qty" else 0 endif,
        "stock_eb"."n_loose_eqty" = "stock_eb"."n_loose_eqty"-if "new_name"."c_ret_type" = 'E' then "new_name"."n_adj_loose_qty" else 0 endif,
        "stock_eb"."n_loose_bqty" = "stock_eb"."n_loose_bqty"-if "new_name"."c_ret_type" = 'B' then "new_name"."n_adj_loose_qty" else 0 endif,
        "stock_eb"."n_rqty" = "stock_eb"."n_rqty"-if "new_name"."c_ret_type" = 'C' then "new_name"."n_adj_qty" else 0 endif,
        "stock_eb"."n_loose_rqty" = "stock_eb"."n_loose_rqty"-if "new_name"."c_ret_type" = 'C' then "new_name"."n_adj_loose_qty" else 0 endif
        where "stock_eb"."c_item_code" = "new_name"."c_item_code" and "stock_eb"."c_batch_no" = "new_name"."c_batch_no"
    end if
  end if
end;
CREATE TRIGGER "update_stock_supp_from_item_open_supp_delete" after delete order 1 on
"DBA"."item_open_supp"
referencing old as "old_name"
for each row
begin
  update "stock_supp"
    set "stock_supp"."n_balance_qty" = "stock_supp"."n_balance_qty"-"old_name"."n_qty",
    "stock_supp"."n_opening_qty" = "stock_supp"."n_opening_qty"-"old_name"."n_qty",
    "stock_supp"."n_opening_scheme_qty" = "stock_supp"."n_opening_scheme_qty"-"old_name"."n_sch_bal_qty",
    "stock_supp"."n_sch_bal_qty" = "stock_supp"."n_sch_bal_qty"-"old_name"."n_sch_bal_qty",
    "stock_supp"."n_op_godown_qty" = "stock_supp"."n_op_godown_qty"-"old_name"."n_godown_qty",
    "stock_supp"."n_godown_qty" = "stock_supp"."n_godown_qty"-"old_name"."n_godown_qty",
    "stock_supp"."n_hold_qty" = "stock_supp"."n_hold_qty"-"old_name"."n_hold_qty",
    "stock_supp"."t_ltime" = "now"()
    where "stock_supp"."c_item_code" = "old_name"."c_item_code"
    and "stock_supp"."c_batch_no" = "old_name"."c_batch_no"
    and "stock_supp"."c_supp_code" = "old_name"."c_supp_code"
end;
CREATE TRIGGER "update_stock_supp_from_item_open_supp_insert" after insert order 1 on
"DBA"."item_open_supp"
referencing new as "new_name"
for each row
begin
  declare "d_def_date" date;
  declare "ld_exp_date","ld_last_pur_date" date;
  declare "ld_lock","ld_incl","ld_controlled_prod","ld_tax_on_sch_qty","ll_count" decimal(1);
  declare "ld_ptr","ld_excise","ld_mrp","ld_sale_rate" decimal(12,2);
  declare "ls_mfac_sh_name","ls_prn_batch" char(15);
  declare "ld_godown_qty","ld_hold_qty","ld_repl_qty","ld_sch_bal_qty","ld_purchase_qty","ld_sch_purchase_qty" decimal(8);
  declare "ld_st_rate" decimal(5,2);
  declare "ls_hold_remark" char(50);
  declare "ld_cst_rate" decimal(4,2);
  declare "ls_ref_year","ls_ref_pfx" char(2);
  declare "ld_ref_srno" decimal(18);
  declare "ld_purchase_rate","ld_effective_purchase_rate" decimal(13,3);
  select "d_expiry_date","n_lock","n_sch_bal_qty","n_ptr","c_mfac_sh_name","n_incl","c_prn_batch","n_godown_qty","d_last_pur_date","n_st_rate","n_hold_qty",
    "c_hold_remark","n_cst_rate","c_ref_year","c_ref_prefix","n_ref_srno","n_contolled_product","n_tax_on_sch_qty","n_excise","n_repl_qty",
    "n_purchase_qty","n_scheme_purchase_qty","n_mrp","n_purchase_rate","n_sale_rate","n_effective_purchase_rate"
    into "ld_exp_date","ld_lock","ld_sch_bal_qty","ld_ptr","ls_mfac_sh_name","ld_incl","ls_prn_batch","ld_godown_qty","ld_last_pur_date","ld_st_rate","ld_hold_qty",
    "ls_hold_remark","ld_cst_rate","ls_ref_year","ls_ref_pfx","ld_ref_srno","ld_controlled_prod","ld_tax_on_sch_qty","ld_excise","ld_repl_qty",
    "ld_purchase_qty","ld_sch_purchase_qty","ld_mrp","ld_purchase_rate","ld_sale_rate",
    "ld_effective_purchase_rate"
    from "stock"
    where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
  select "count"() into "ll_count" from "stock_supp" where "stock_supp"."c_item_code" = "new_name"."c_item_code" and "stock_supp"."c_batch_no" = "new_name"."c_batch_no"
    and "stock_supp"."c_supp_code" = "new_name"."c_supp_code";
  if "ll_count" = 0 then
    set "d_def_date" = "uf_default_date"();
    insert into "stock_supp"
      ( "c_supp_code","c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty",
      "n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty","n_mrp","n_purchase_rate",
      "n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate",
      "d_date","n_ptr","c_mfac_sh_name","n_incl","c_prn_batch","n_godown_qty","d_last_pur_date","n_st_rate","n_hold_qty",
      "c_hold_remark","n_cst_rate","c_ref_year","c_ref_prefix","n_ref_srno","n_contolled_product","n_tax_on_sch_qty","n_excise","n_repl_qty","n_op_godown_qty","t_ltime" ) values
      ( "new_name"."c_supp_code","new_name"."c_item_code","new_name"."c_batch_no","ld_exp_date","new_name"."n_qty","ld_purchase_qty","ld_sch_purchase_qty",0,
      0,0,0,0,"new_name"."n_qty","ld_mrp","ld_purchase_rate",
      "ld_sale_rate","new_name"."n_sch_bal_qty","ld_lock",0,"new_name"."n_sch_bal_qty","ld_effective_purchase_rate",
      "d_def_date","ld_ptr","ls_mfac_sh_name","ld_incl","ls_prn_batch","new_name"."n_godown_qty","ld_last_pur_date","ld_st_rate","new_name"."n_hold_qty",
      "ls_hold_remark","ld_cst_rate","ls_ref_year","ls_ref_pfx","ld_ref_srno","ld_controlled_prod","ld_tax_on_sch_qty","ld_excise","ld_repl_qty","new_name"."n_godown_qty","new_name"."t_ltime" ) ;
    if sqlstate = '02000' then
      raiserror 18000 "Error, Cannot add item in stock_supp table. Please restart the system."
    end if
  else update "stock_supp"
      set "stock_supp"."n_balance_qty" = "stock_supp"."n_balance_qty"+"new_name"."n_qty",
      "stock_supp"."n_opening_qty" = "stock_supp"."n_opening_qty"+"new_name"."n_qty",
      "stock_supp"."n_opening_scheme_qty" = "stock_supp"."n_opening_scheme_qty"+"new_name"."n_sch_bal_qty",
      "stock_supp"."n_sch_bal_qty" = "stock_supp"."n_sch_bal_qty"+"new_name"."n_sch_bal_qty",
      "stock_supp"."n_op_godown_qty" = "stock_supp"."n_op_godown_qty"+"new_name"."n_godown_qty",
      "stock_supp"."n_godown_qty" = "stock_supp"."n_godown_qty"+"new_name"."n_godown_qty",
      "stock_supp"."n_hold_qty" = "stock_supp"."n_hold_qty"+"new_name"."n_hold_qty",
      "stock_supp"."t_ltime" = if "stock_supp"."t_ltime" > "new_name"."t_ltime" then "stock_supp"."t_ltime" else "new_name"."t_ltime" endif
      where "stock_supp"."c_item_code" = "new_name"."c_item_code"
      and "stock_supp"."c_batch_no" = "new_name"."c_batch_no"
      and "stock_supp"."c_supp_code" = "new_name"."c_supp_code"
  end if
end;
CREATE TRIGGER "update_stock_supp_from_item_open_supp_update" after update order 1 on
"DBA"."item_open_supp"
referencing old as "old_name" new as "new_name"
for each row
begin
  update "stock_supp"
    set "stock_supp"."n_balance_qty" = "stock_supp"."n_balance_qty"-"old_name"."n_qty",
    "stock_supp"."n_opening_qty" = "stock_supp"."n_opening_qty"-"old_name"."n_qty",
    "stock_supp"."n_opening_scheme_qty" = "stock_supp"."n_opening_scheme_qty"-"old_name"."n_sch_bal_qty",
    "stock_supp"."n_sch_bal_qty" = "stock_supp"."n_sch_bal_qty"-"old_name"."n_sch_bal_qty",
    "stock_supp"."n_op_godown_qty" = "stock_supp"."n_op_godown_qty"-"old_name"."n_godown_qty",
    "stock_supp"."n_godown_qty" = "stock_supp"."n_godown_qty"-"old_name"."n_godown_qty",
    "stock_supp"."n_hold_qty" = "stock_supp"."n_hold_qty"-"old_name"."n_hold_qty",
    "stock_supp"."t_ltime" = if "stock_supp"."t_ltime" > "new_name"."t_ltime" then "stock_supp"."t_ltime" else "new_name"."t_ltime" endif
    where "stock_supp"."c_item_code" = "old_name"."c_item_code"
    and "stock_supp"."c_batch_no" = "old_name"."c_batch_no"
    and "stock_supp"."c_supp_code" = "new_name"."c_supp_code";
  update "stock_supp"
    set "stock_supp"."n_balance_qty" = "stock_supp"."n_balance_qty"+"new_name"."n_qty",
    "stock_supp"."n_opening_qty" = "stock_supp"."n_opening_qty"+"new_name"."n_qty",
    "stock_supp"."n_opening_scheme_qty" = "stock_supp"."n_opening_scheme_qty"+"new_name"."n_sch_bal_qty",
    "stock_supp"."n_sch_bal_qty" = "stock_supp"."n_sch_bal_qty"+"new_name"."n_sch_bal_qty",
    "stock_supp"."n_op_godown_qty" = "stock_supp"."n_op_godown_qty"+"new_name"."n_godown_qty",
    "stock_supp"."n_godown_qty" = "stock_supp"."n_godown_qty"+"new_name"."n_godown_qty",
    "stock_supp"."n_hold_qty" = "stock_supp"."n_hold_qty"+"new_name"."n_hold_qty",
    "stock_supp"."t_ltime" = if "stock_supp"."t_ltime" > "new_name"."t_ltime" then "stock_supp"."t_ltime" else "new_name"."t_ltime" endif
    where "stock_supp"."c_item_code" = "new_name"."c_item_code"
    and "stock_supp"."c_supp_code" = "new_name"."c_supp_code"
end;
CREATE TRIGGER "update_stock_supp_from_stock_inward_outward_delete" before delete order 3 on
"DBA"."stock_inward_outwad"
referencing old as "old_name"
for each row
begin
  update "stock_supp" set "stock_supp"."n_balance_qty" = "stock_supp"."n_balance_qty"-"old_name"."n_qty"-"old_name"."n_schm_qty",
    "stock_supp"."n_sch_bal_qty" = "stock_supp"."n_sch_bal_qty"-"old_name"."n_schm_qty"
    where "stock_supp"."c_item_code" = "old_name"."c_item_code" and "stock_supp"."c_batch_no" = "old_name"."c_batch_no" and "stock_supp"."c_supp_code" = "old_name"."c_supp_code"
end;
CREATE TRIGGER "update_stock_supp_from_stock_inward_outward_insert" after insert order 1 on
------------------------------------------
-------------------
----------------------
"DBA"."stock_inward_outwad"
referencing new as "new_name"
for each row
begin
  declare "n_tmp_bal_qty" decimal;
  declare "d_def_date" date;
  declare "ld_exp_date","ld_last_pur_date" date;
  declare "ld_lock","ld_incl","ld_controlled_prod","ld_tax_on_sch_qty" decimal(1);
  declare "ld_ptr","ld_excise" decimal(12,2);
  declare "ls_mfac_sh_name","ls_prn_batch" char(15);
  declare "ld_godown_qty","ld_hold_qty","ld_repl_qty","ld_sch_bal_qty","ld_purchase_qty","ld_sch_purchase_qty" decimal(8);
  declare "ld_st_rate" decimal(5,2);
  declare "ls_hold_remark" char(50);
  declare "ld_cst_rate" decimal(4,2);
  declare "ls_ref_year","ls_ref_pfx" char(2);
  declare "ld_ref_srno" decimal(18);
  //Missed columns taking from Stock
  select "d_expiry_date","n_lock","n_sch_bal_qty","n_ptr","c_mfac_sh_name","n_incl","c_prn_batch","n_godown_qty","d_last_pur_date","n_st_rate","n_hold_qty",
    "c_hold_remark","n_cst_rate","c_ref_year","c_ref_prefix","n_ref_srno","n_contolled_product","n_tax_on_sch_qty","n_excise","n_repl_qty",
    "n_purchase_qty","n_scheme_purchase_qty"
    into "ld_exp_date","ld_lock","ld_sch_bal_qty","ld_ptr","ls_mfac_sh_name","ld_incl","ls_prn_batch","ld_godown_qty","ld_last_pur_date","ld_st_rate","ld_hold_qty",
    "ls_hold_remark","ld_cst_rate","ls_ref_year","ls_ref_pfx","ld_ref_srno","ld_controlled_prod","ld_tax_on_sch_qty","ld_excise","ld_repl_qty",
    "ld_purchase_qty",
    "ld_sch_purchase_qty"
    from "stock"
    where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
  select "n_balance_qty" into "n_tmp_bal_qty" from "stock_supp" where "stock_supp"."c_item_code" = "new_name"."c_item_code" and "stock_supp"."c_batch_no" = "new_name"."c_batch_no" and "stock_supp"."c_supp_code" = "new_name"."c_supp_code";
  if sqlcode = 0 then
    if "n_tmp_bal_qty" <> 0 then
      if "new_name"."n_flag" = 1 or "new_name"."n_flag" = 3 then //purchase
        update "stock_supp" set "stock_supp"."n_purchase_qty" = "ld_purchase_qty",
          "stock_supp"."n_scheme_purchase_qty" = "ld_sch_purchase_qty",
          "stock_supp"."n_purchase_rate" = "new_name"."n_pur_rate",
          "stock_supp"."n_balance_qty" = "stock_supp"."n_balance_qty"+"new_name"."n_qty"+"new_name"."n_schm_qty",
          "stock_supp"."n_sale_rate" = "new_name"."n_sale_rate","stock_supp"."n_mrp" = "new_name"."n_mrp",
          "stock_supp"."n_sch_bal_qty" = "stock_supp"."n_sch_bal_qty"+"new_name"."n_schm_qty",
          "stock_supp"."n_effective_purchase_rate" = "new_name"."n_eff_pur_rate",
          "stock_supp"."n_ptr" = "ld_ptr",
          "stock_supp"."c_mfac_sh_name" = "ls_mfac_sh_name",
          "stock_supp"."n_lock" = "ld_lock",
          "stock_supp"."n_incl" = "ld_incl",
          "stock_supp"."n_godown_qty" = "ld_godown_qty",
          "stock_supp"."d_last_pur_date" = "ld_last_pur_date",
          "stock_supp"."n_st_rate" = "ld_st_rate",
          "stock_supp"."n_hold_qty" = "ld_hold_qty",
          "stock_supp"."c_hold_remark" = "isnull"("ls_hold_remark","stock_supp"."c_hold_remark"),
          "stock_supp"."n_cst_rate" = "ld_cst_rate",
          "stock_supp"."t_ltime" = "now"(),
          "stock_supp"."c_ref_year" = "ls_ref_year",
          "stock_supp"."c_ref_prefix" = "ls_ref_pfx",
          "stock_supp"."n_ref_srno" = "ld_ref_srno",
          "stock_supp"."n_repl_qty" = "ld_repl_qty"
          where "stock_supp"."c_item_code" = "new_name"."c_item_code" and "stock_supp"."c_batch_no" = "new_name"."c_batch_no" and "stock_supp"."c_supp_code" = "new_name"."c_supp_code"
      else
        update "stock_supp"
          set "stock_supp"."n_balance_qty" = "stock_supp"."n_balance_qty"+"new_name"."n_qty"+"new_name"."n_schm_qty",
          "stock_supp"."n_sch_bal_qty" = "stock_supp"."n_sch_bal_qty"+"new_name"."n_schm_qty",
          "stock_supp"."t_ltime" = "now"()
          where "stock_supp"."c_item_code" = "new_name"."c_item_code" and "stock_supp"."c_batch_no" = "new_name"."c_batch_no" and "stock_supp"."c_supp_code" = "new_name"."c_supp_code"
      end if
    else set "d_def_date" = "uf_default_date"();
      if "new_name"."n_flag" = 1 or "new_name"."n_flag" = 3 then //purchase  
        update "stock_supp" set "stock_supp"."n_purchase_qty" = "ld_purchase_qty",
          "stock_supp"."n_scheme_purchase_qty" = "ld_sch_purchase_qty",
          "stock_supp"."n_purchase_rate" = "new_name"."n_pur_rate",
          "stock_supp"."n_balance_qty" = "stock_supp"."n_balance_qty"+"new_name"."n_qty"+"new_name"."n_schm_qty",
          "stock_supp"."n_sale_rate" = "new_name"."n_sale_rate","stock_supp"."n_mrp" = "new_name"."n_mrp",
          "stock_supp"."n_sch_bal_qty" = "stock_supp"."n_sch_bal_qty"+"new_name"."n_schm_qty",
          "stock_supp"."n_effective_purchase_rate" = "new_name"."n_eff_pur_rate",
          "stock_supp"."n_ptr" = "ld_ptr",
          "stock_supp"."c_mfac_sh_name" = "ls_mfac_sh_name",
          "stock_supp"."n_lock" = "ld_lock",
          "stock_supp"."d_date" = "d_def_date",
          "stock_supp"."n_incl" = "ld_incl",
          "stock_supp"."n_godown_qty" = "ld_godown_qty",
          "stock_supp"."d_last_pur_date" = "ld_last_pur_date",
          "stock_supp"."n_st_rate" = "ld_st_rate",
          "stock_supp"."n_hold_qty" = "ld_hold_qty",
          "stock_supp"."c_hold_remark" = "isnull"("ls_hold_remark","stock_supp"."c_hold_remark"),
          "stock_supp"."n_cst_rate" = "ld_cst_rate",
          "stock_supp"."t_ltime" = "now"(),
          "stock_supp"."c_ref_year" = "ls_ref_year",
          "stock_supp"."c_ref_prefix" = "ls_ref_pfx",
          "stock_supp"."n_ref_srno" = "ld_ref_srno",
          "stock_supp"."n_repl_qty" = "ld_repl_qty"
          where "stock_supp"."c_item_code" = "new_name"."c_item_code" and "stock_supp"."c_batch_no" = "new_name"."c_batch_no" and "stock_supp"."c_supp_code" = "new_name"."c_supp_code"
      else
        update "stock_supp"
          set "stock_supp"."n_balance_qty" = "stock_supp"."n_balance_qty"+"new_name"."n_qty"+"new_name"."n_schm_qty",
          "stock_supp"."n_sch_bal_qty" = "stock_supp"."n_sch_bal_qty"+"new_name"."n_schm_qty",
          "stock_supp"."t_ltime" = "now"()
          where "stock_supp"."c_item_code" = "new_name"."c_item_code" and "stock_supp"."c_batch_no" = "new_name"."c_batch_no" and "stock_supp"."c_supp_code" = "new_name"."c_supp_code"
      end if
    end if
  else set "d_def_date" = "uf_default_date"();
    insert into "stock_supp"
      ( "c_supp_code","c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty",
      "n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty","n_mrp","n_purchase_rate",
      "n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate",
      "d_date","n_ptr","c_mfac_sh_name","n_incl","c_prn_batch","n_godown_qty","d_last_pur_date","n_st_rate","n_hold_qty",
      "c_hold_remark","n_cst_rate","c_ref_year","c_ref_prefix","n_ref_srno","n_contolled_product","n_tax_on_sch_qty","n_excise","n_repl_qty" ) values
      ( "new_name"."c_supp_code","new_name"."c_item_code","new_name"."c_batch_no","ld_exp_date",0,"ld_purchase_qty","ld_sch_purchase_qty",0,
      0,0,0,0,"new_name"."n_qty"+"new_name"."n_schm_qty","new_name"."n_mrp","new_name"."n_pur_rate",
      "new_name"."n_sale_rate",0,"ld_lock",0,"new_name"."n_schm_qty","new_name"."n_eff_pur_rate","d_def_date","ld_ptr","ls_mfac_sh_name",
      "ld_incl","ls_prn_batch","ld_godown_qty","ld_last_pur_date","ld_st_rate","ld_hold_qty","ls_hold_remark",
      "ld_cst_rate","ls_ref_year","ls_ref_pfx","ld_ref_srno","ld_controlled_prod","ld_tax_on_sch_qty","ld_excise","ld_repl_qty" ) ;
    if sqlstate = '02000' then
      raiserror 18000 "Error, Cannot add item in stock_supp table. Please restart the system."
    end if
  end if
end;
CREATE TRIGGER "update_stock_supp_from_stock_inward_outward_update" before update order 1 on
-------------------------------
-------------------------------
"DBA"."stock_inward_outwad"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "d_def_date" date;
  declare "n_tmp_bal_qty" decimal;
  declare "ld_exp_date","ld_last_pur_date" date;
  declare "ld_lock","ld_incl","ld_controlled_prod","ld_tax_on_sch_qty" decimal(1);
  declare "ld_ptr","ld_excise" decimal(12,2);
  declare "ls_mfac_sh_name","ls_prn_batch" char(15);
  declare "ld_godown_qty","ld_hold_qty","ld_repl_qty","ld_sch_bal_qty","ld_purchase_qty","ld_sch_purchase_qty" decimal(8);
  declare "ld_st_rate" decimal(5,2);
  declare "ls_hold_remark" char(50);
  declare "ld_cst_rate" decimal(4,2);
  declare "ls_ref_year","ls_ref_pfx" char(2);
  declare "ld_ref_srno" decimal(18);
  //Missed columns taking from Stock
  select "d_expiry_date","n_lock","n_sch_bal_qty","n_ptr","c_mfac_sh_name","n_incl","c_prn_batch","n_godown_qty","d_last_pur_date","n_st_rate","n_hold_qty",
    "c_hold_remark","n_cst_rate","c_ref_year","c_ref_prefix","n_ref_srno","n_contolled_product","n_tax_on_sch_qty","n_excise","n_repl_qty",
    "n_purchase_qty","n_scheme_purchase_qty"
    into "ld_exp_date","ld_lock","ld_sch_bal_qty","ld_ptr","ls_mfac_sh_name","ld_incl","ls_prn_batch","ld_godown_qty","ld_last_pur_date","ld_st_rate","ld_hold_qty",
    "ls_hold_remark","ld_cst_rate","ls_ref_year","ls_ref_pfx","ld_ref_srno","ld_controlled_prod","ld_tax_on_sch_qty","ld_excise","ld_repl_qty",
    "ld_purchase_qty",
    "ld_sch_purchase_qty"
    from "stock"
    where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no";
  select "n_balance_qty" into "n_tmp_bal_qty" from "stock_supp" where "stock_supp"."c_item_code" = "new_name"."c_item_code" and "stock_supp"."c_batch_no" = "new_name"."c_batch_no" and "stock_supp"."c_supp_code" = "new_name"."c_supp_code";
  if sqlcode = 0 then
    if "n_tmp_bal_qty" <> 0 then
      if "new_name"."n_flag" = 1 or "new_name"."n_flag" = 3 then //purchase    
        update "stock_supp" set "stock_supp"."n_purchase_qty" = "ld_purchase_qty",
          "stock_supp"."n_scheme_purchase_qty" = "ld_sch_purchase_qty",
          "stock_supp"."n_purchase_rate" = "new_name"."n_pur_rate",
          "stock_supp"."n_balance_qty" = "stock_supp"."n_balance_qty"-"old_name"."n_qty"-"old_name"."n_schm_qty"+"new_name"."n_qty"+"new_name"."n_schm_qty",
          "stock_supp"."n_sale_rate" = "new_name"."n_sale_rate","stock_supp"."n_mrp" = "new_name"."n_mrp",
          "stock_supp"."n_sch_bal_qty" = "stock_supp"."n_sch_bal_qty"-"old_name"."n_schm_qty"+"new_name"."n_schm_qty",
          "stock_supp"."n_effective_purchase_rate" = "new_name"."n_eff_pur_rate",
          "stock_supp"."n_ptr" = "ld_ptr",
          "stock_supp"."c_mfac_sh_name" = "ls_mfac_sh_name",
          "stock_supp"."n_lock" = "ld_lock",
          "stock_supp"."n_incl" = "ld_incl",
          "stock_supp"."n_godown_qty" = "ld_godown_qty",
          "stock_supp"."d_last_pur_date" = "ld_last_pur_date",
          "stock_supp"."n_st_rate" = "ld_st_rate",
          "stock_supp"."n_hold_qty" = "ld_hold_qty",
          "stock_supp"."c_hold_remark" = "isnull"("ls_hold_remark","stock_supp"."c_hold_remark"),
          "stock_supp"."n_cst_rate" = "ld_cst_rate",
          "stock_supp"."t_ltime" = "now"(),
          "stock_supp"."c_ref_year" = "ls_ref_year",
          "stock_supp"."c_ref_prefix" = "ls_ref_pfx",
          "stock_supp"."n_ref_srno" = "ld_ref_srno",
          "stock_supp"."n_repl_qty" = "ld_repl_qty"
          where "stock_supp"."c_item_code" = "new_name"."c_item_code" and "stock_supp"."c_batch_no" = "new_name"."c_batch_no" and "stock_supp"."c_supp_code" = "new_name"."c_supp_code"
      else
        update "stock_supp"
          set "stock_supp"."n_balance_qty" = "stock_supp"."n_balance_qty"-"old_name"."n_qty"-"old_name"."n_schm_qty"+"new_name"."n_qty"+"new_name"."n_schm_qty",
          "stock_supp"."n_sch_bal_qty" = "stock_supp"."n_sch_bal_qty"-"old_name"."n_schm_qty"+"new_name"."n_schm_qty",
          "stock_supp"."t_ltime" = "now"()
          where "stock_supp"."c_item_code" = "new_name"."c_item_code" and "stock_supp"."c_batch_no" = "new_name"."c_batch_no" and "stock_supp"."c_supp_code" = "new_name"."c_supp_code"
      end if
    else set "d_def_date" = "uf_default_date"();
      if "new_name"."n_flag" = 1 or "new_name"."n_flag" = 3 then //purchase      
        update "stock_supp" set "stock_supp"."n_purchase_qty" = "ld_purchase_qty",
          "stock_supp"."n_scheme_purchase_qty" = "ld_sch_purchase_qty",
          "stock_supp"."n_purchase_rate" = "new_name"."n_pur_rate",
          "stock_supp"."n_balance_qty" = "stock_supp"."n_balance_qty"-"old_name"."n_qty"-"old_name"."n_schm_qty"+"new_name"."n_qty"+"new_name"."n_schm_qty",
          "stock_supp"."n_sale_rate" = "new_name"."n_sale_rate","stock_supp"."n_mrp" = "new_name"."n_mrp",
          "stock_supp"."n_sch_bal_qty" = "stock_supp"."n_sch_bal_qty"-"old_name"."n_schm_qty"+"new_name"."n_schm_qty",
          "stock_supp"."n_effective_purchase_rate" = "new_name"."n_eff_pur_rate",
          "stock_supp"."n_ptr" = "ld_ptr",
          "stock_supp"."c_mfac_sh_name" = "ls_mfac_sh_name",
          "stock_supp"."n_lock" = "ld_lock",
          "stock_supp"."d_date" = "d_def_date",
          "stock_supp"."n_incl" = "ld_incl",
          "stock_supp"."n_godown_qty" = "ld_godown_qty",
          "stock_supp"."d_last_pur_date" = "ld_last_pur_date",
          "stock_supp"."n_st_rate" = "ld_st_rate",
          "stock_supp"."n_hold_qty" = "ld_hold_qty",
          "stock_supp"."c_hold_remark" = "isnull"("ls_hold_remark","stock_supp"."c_hold_remark"),
          "stock_supp"."n_cst_rate" = "ld_cst_rate",
          "stock_supp"."t_ltime" = "now"(),
          "stock_supp"."c_ref_year" = "ls_ref_year",
          "stock_supp"."c_ref_prefix" = "ls_ref_pfx",
          "stock_supp"."n_ref_srno" = "ld_ref_srno",
          "stock_supp"."n_repl_qty" = "ld_repl_qty"
          where "stock_supp"."c_item_code" = "new_name"."c_item_code" and "stock_supp"."c_batch_no" = "new_name"."c_batch_no" and "stock_supp"."c_supp_code" = "new_name"."c_supp_code"
      else
        update "stock_supp"
          set "stock_supp"."n_balance_qty" = "stock_supp"."n_balance_qty"-"old_name"."n_qty"-"old_name"."n_schm_qty"+"new_name"."n_qty"+"new_name"."n_schm_qty",
          "stock_supp"."n_sch_bal_qty" = "stock_supp"."n_sch_bal_qty"-"old_name"."n_schm_qty"+"new_name"."n_schm_qty",
          "stock_supp"."t_ltime" = "now"()
          where "stock_supp"."c_item_code" = "new_name"."c_item_code" and "stock_supp"."c_batch_no" = "new_name"."c_batch_no" and "stock_supp"."c_supp_code" = "new_name"."c_supp_code"
      end if
    end if
  else set "d_def_date" = "uf_default_date"();
    insert into "stock_supp"
      ( "c_supp_code","c_item_code","c_batch_no","d_expiry_date","n_opening_qty","n_purchase_qty","n_scheme_purchase_qty","n_sale_qty",
      "n_scheme_sale_qty","n_adjustment_qty","n_credit_note_qty","n_debit_note_qty","n_balance_qty","n_mrp","n_purchase_rate",
      "n_sale_rate","n_opening_scheme_qty","n_lock","n_credit_note_scheme_qty","n_sch_bal_qty","n_effective_purchase_rate",
      "d_date","n_ptr","c_mfac_sh_name","n_incl","c_prn_batch","n_godown_qty","d_last_pur_date","n_st_rate","n_hold_qty",
      "c_hold_remark","n_cst_rate","c_ref_year","c_ref_prefix","n_ref_srno","n_contolled_product","n_tax_on_sch_qty","n_excise","n_repl_qty" ) values
      ( "new_name"."c_supp_code","new_name"."c_item_code","new_name"."c_batch_no","ld_exp_date",0,"ld_purchase_qty","ld_sch_purchase_qty",0,
      0,0,0,0,"new_name"."n_qty"+"new_name"."n_schm_qty","new_name"."n_mrp","new_name"."n_pur_rate",
      "new_name"."n_sale_rate",0,"ld_lock",0,"new_name"."n_schm_qty","new_name"."n_eff_pur_rate","d_def_date","ld_ptr","ls_mfac_sh_name",
      "ld_incl","ls_prn_batch","ld_godown_qty","ld_last_pur_date","ld_st_rate","ld_hold_qty","ls_hold_remark",
      "ld_cst_rate","ls_ref_year","ls_ref_pfx","ld_ref_srno","ld_controlled_prod","ld_tax_on_sch_qty","ld_excise","ld_repl_qty" ) ;
    if sqlstate = '02000' then
      raiserror 18000 "Error, Cannot add item in stock_supp table. Please restart the system."
    end if
  end if
end;
CREATE TRIGGER "update_store_track_from_carton_mst_insert" after insert order 1 on
--- trigger
-----4thstep---------------------------------------------------------------
"DBA"."carton_mst"
referencing new as "new_name"
for each row
begin
  declare @n_hold_pending numeric(10);
  declare "d_cnd" numeric(10);
  declare "l_cnt" numeric(10);
  declare "ld_pend_qty" numeric(10);
  declare "l_pend_item" numeric(6);
  declare "d_pend_det_item" numeric(6);
  declare "ref_doc_no" char(25);
  declare "n_ref_seq_no" numeric(11);
  declare "doc_srno" numeric(18);
  declare "d_hold" numeric(10);
  declare @doc_prefix char(6);
  declare @CONFIRM_QTY numeric(4);
  select "reverse"("left"("reverse"("new_name"."c_doc_no"),"charindex"('/',("reverse"("new_name"."c_doc_no")))-1)) as "doc" into "doc_srno";
  select "left"("substr"("substring"("left"("new_name"."c_ref_doc_no",("length"("new_name"."c_ref_doc_no")-("charindex"('/',"reverse"("new_name"."c_ref_doc_no"))-1))),"charindex"('/',"left"("new_name"."c_ref_doc_no",("length"("new_name"."c_ref_doc_no")-("charindex"('/',"reverse"("new_name"."c_ref_doc_no"))-1))))+1),"charindex"('/',"substring"("left"("new_name"."c_ref_doc_no",("length"("new_name"."c_ref_doc_no")-("charindex"('/',"reverse"("new_name"."c_ref_doc_no"))-1))),"charindex"('/',"left"("new_name"."c_ref_doc_no",("length"("new_name"."c_ref_doc_no")-("charindex"('/',"reverse"("new_name"."c_ref_doc_no"))-1))))+1))+1),"charindex"('/',"substr"("substring"("left"("new_name"."c_ref_doc_no",("length"("new_name"."c_ref_doc_no")-("charindex"('/',"reverse"("new_name"."c_ref_doc_no"))-1))),"charindex"('/',"left"("new_name"."c_ref_doc_no",("length"("new_name"."c_ref_doc_no")-("charindex"('/',"reverse"("new_name"."c_ref_doc_no"))-1))))+1),"charindex"('/',"substring"("left"("new_name"."c_ref_doc_no",("length"("new_name"."c_ref_doc_no")-("charindex"('/',"reverse"("new_name"."c_ref_doc_no"))-1))),"charindex"('/',"left"("new_name"."c_ref_doc_no",("length"("new_name"."c_ref_doc_no")-("charindex"('/',"reverse"("new_name"."c_ref_doc_no"))-1))))+1))+1))-1) as "srno" into @doc_prefix;
  if "new_name"."n_hold" = 1 then //Processing from Order ,Rels Hold qty
    update "stock" set "stock"."n_store_track_qty" = "stock"."n_store_track_qty"-"new_name"."n_qty",
      "stock"."n_hold_qty" = "stock"."n_hold_qty"-("new_name"."n_qty")
      where "stock"."c_item_code" = "new_name"."c_item_code" and "stock"."c_batch_no" = "new_name"."c_batch_no"
  end if;
  if @doc_prefix = 'IS' then
    set "ref_doc_no" = "new_name"."c_ref_doc_no"
  else
    set "ref_doc_no" = "new_name"."c_ref_doc_no";
    set "ref_doc_no" = "new_name"."c_doc_no"
  end if;
  set "n_ref_seq_no" = "new_name"."n_ref_seq";
  update "st_track_pick" set "st_track_pick"."n_confirm_qty" = "ISNULL"("st_track_pick"."n_confirm_qty",0)+"new_name"."n_qty"
    where "c_doc_no" = "ref_doc_no"
    and "st_track_pick"."c_item_code" = "new_name"."c_item_code"
    and "st_track_pick"."c_tray_code" = "new_name"."c_pick_tray"
    and "st_track_pick"."n_seq" = "new_name"."n_pick_seq" and "n_inout" = 0;
  select "sum"("n_qty")-"isnull"("sum"("n_confirm_qty"),0)-"isnull"("sum"("n_reject_qty"),0)
    into "ld_pend_qty" from "st_track_pick"
    where "c_doc_no" = "ref_doc_no"
    and "st_track_pick"."c_item_code" = "new_name"."c_item_code"
    and "st_track_pick"."n_org_seq" = "n_ref_seq_no" and "n_inout" = 0;
  if "ld_pend_qty" <= 0 then
    select "n_bal_qty"
      into "d_pend_det_item" from "st_track_det"
      where "c_doc_no" = "ref_doc_no"
      and "c_item_code" = "new_name"."c_item_code"
      and "n_seq" = "n_ref_seq_no" and "n_inout" = 0
      and "ST_TRACK_DET"."N_NON_PICK_FLAG" = 0;
    if "d_pend_det_item" <= 0 then
      update "st_track_det" set "n_complete" = 9
        where "c_doc_no" = "ref_doc_no"
        and "c_item_code" = "new_name"."c_item_code"
        and "n_seq" = "n_ref_seq_no" and "n_inout" = 0
    end if end if;
  select "count"() into "l_cnt" from "st_track_det" where "c_doc_no" = "ref_doc_no" and("n_complete" not in( 9,2 ) ) and "st_track_det"."n_non_pick_flag" = 0;
  if "l_cnt" = 0 then
    update "st_track_mst" set "n_complete" = 9
      where "c_doc_no" = "ref_doc_no"
      and "st_track_mst"."n_inout" = 0
  end if;
  select "count"() into "l_pend_item" from "st_track_pick"
    where "c_tray_code" = "new_name"."c_pick_tray"
    and "c_doc_no" = "ref_doc_no"
    and "n_qty"-("n_confirm_qty"+"n_reject_qty") > 0;
  if "l_pend_item" is null then set "l_pend_item" = 0 end if;
  if "l_pend_item" >= 1 then //Dont Rels
  else
    delete from "st_track_tray_move"
      where "st_track_tray_move"."c_doc_no" = "ref_doc_no"
      and "st_track_tray_move"."c_tray_code" = "new_name"."c_pick_tray" and "n_inout" = 9
  end if;
  if "new_name"."c_tray_code" <> '000000' then
    insert into "tray_ledger"( "c_br_code","c_year","c_prefix","n_srno","c_tray_code","n_qty","n_pk" ) on existing update defaults off values
      ( "new_name"."c_ref_br_code","new_name"."c_ref_year","new_name"."c_ref_prefix","new_name"."n_ref_srno","new_name"."c_tray_code","new_name"."n_flag","new_name"."n_pk" ) 
  end if
end;
CREATE TRIGGER "update_summary_stage_insert" before insert order 1 on
"DBA"."invoice_summary_track"
referencing new as "new_name"
for each row
begin
  insert into "invoice_summary_track_move"( "c_stage_code","c_inv_prefix","n_inv_no","c_dman_code","n_errors","c_note","c_user","d_date","t_time","c_rack_group","n_seq" ) on existing update defaults off values
    ( "new_name"."c_stage_code","new_name"."c_inv_prefix","new_name"."n_inv_no","new_name"."c_dman_code","new_name"."n_errors","new_name"."c_note","new_name"."c_user","new_name"."d_date","new_name"."t_time","new_name"."c_rack_group","new_name"."n_seq" ) 
end;
CREATE TRIGGER "update_tcs_flag_from_insert" after insert order 1 on
"DBA"."sale_till_date"
referencing new as "new_name"
for each row
begin
  declare @defined_limit,@sale_total,@defined_limit_tds,@pur_total numeric(14,2);
  declare @defa_date date;
  declare @consider_dc_sale,@chk_cnt numeric(1);
  declare @gstin char(50);
  set @defa_date = "uf_default_date"();
  select "n_tcs_limit","n_sale_consider_tcs","n_tds_limit" into @defined_limit,@consider_dc_sale,@defined_limit_tds from "system_parameter";
  if @defined_limit is null then
    set @defined_limit = 0
  end if;
  if @defined_limit_tds is null then
    set @defined_limit_tds = 0
  end if;
  if @consider_dc_sale is null then
    set @consider_dc_sale = 0
  end if;
  if @consider_dc_sale = 1 then
    set @sale_total = "new_name"."n_value_dc_sale"
  else
    set @sale_total = "new_name"."n_value"
  end if;
  if @sale_total is null then
    set @sale_total = 0
  end if;
  set @pur_total = "new_name"."n_pur_value";
  if @pur_total is null then
    set @pur_total = 0
  end if;
  if @defined_limit > 0 then
    if @sale_total > @defined_limit then
      update "act_mst" set "n_tcs_flag" = 1,"d_tcs_auto_activation" = @defa_date where "c_code" = "new_name"."c_code" and "n_customer" = 1 and "n_tds_flag" = 0
    end if end if;
  //TDS
  if @defined_limit_tds > 0 then
    if @pur_total > @defined_limit_tds then
      update "act_mst" set "n_tds_flag" = 1,"d_tds_auto_activation" = @defa_date where "c_code" = "new_name"."c_code" and "n_supplier" = 1
    end if
  end if
end;
CREATE TRIGGER "update_tcs_flag_from_insert_gstin_wise_sale_total" after insert order 1 on
"DBA"."gstin_wise_sale_total"
referencing new as "new_name"
for each row
begin
  declare @defined_limit,@sale_total,@defined_limit_tds,@pur_total numeric(14,2);
  declare @defa_date date;
  declare @consider_dc_sale,@chk_cnt numeric(1);
  declare @gstin char(50);
  set @defa_date = "uf_default_date"();
  select "n_tcs_limit","n_sale_consider_tcs","n_tds_limit" into @defined_limit,@consider_dc_sale,@defined_limit_tds from "system_parameter";
  if @defined_limit is null then
    set @defined_limit = 0
  end if;
  if @defined_limit_tds is null then
    set @defined_limit_tds = 0
  end if;
  if @consider_dc_sale is null then
    set @consider_dc_sale = 0
  end if;
  if @consider_dc_sale = 1 then
    set @sale_total = "new_name"."n_value_dc_sale"
  else
    set @sale_total = "new_name"."n_value"
  end if;
  if @sale_total is null then
    set @sale_total = 0
  end if;
  set @pur_total = "new_name"."n_pur_value";
  if @pur_total is null then
    set @pur_total = 0
  end if;
  if @defined_limit > 0 then
    if @sale_total > @defined_limit then
      update "act_mst" set "n_tcs_flag" = 1,"d_tcs_auto_activation" = @defa_date where "isnull"("c_permanent_gstn_no","c_provisional_gstn_no") = "new_name"."c_code" and "n_customer" = 1 and "n_tds_flag" = 0
    end if end if;
  //TDS
  if @defined_limit_tds > 0 then
    if @pur_total > @defined_limit_tds then
      update "act_mst" set "n_tds_flag" = 1,"d_tds_auto_activation" = @defa_date where "isnull"("c_permanent_gstn_no","c_provisional_gstn_no") = "new_name"."c_code" and "n_supplier" = 1
    end if
  end if
end;
CREATE TRIGGER "update_tcs_flag_from_update" after update order 1 on
"DBA"."sale_till_date"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @defined_limit,@sale_total,@defined_limit_tds,@pur_total numeric(14,2);
  declare @defa_date date;
  declare @consider_dc_sale,@chk_cnt numeric(1);
  declare @gstin char(50);
  set @defa_date = "uf_default_date"();
  select "n_tcs_limit","n_sale_consider_tcs","n_tds_limit" into @defined_limit,@consider_dc_sale,@defined_limit_tds from "system_parameter";
  if @defined_limit is null then
    set @defined_limit = 0
  end if;
  if @defined_limit_tds is null then
    set @defined_limit_tds = 0
  end if;
  if @consider_dc_sale is null then
    set @consider_dc_sale = 0
  end if;
  if @consider_dc_sale = 1 then
    set @sale_total = "new_name"."n_value_dc_sale"
  else
    set @sale_total = "new_name"."n_value"
  end if;
  if @sale_total is null then
    set @sale_total = 0
  end if;
  set @pur_total = "new_name"."n_pur_value";
  if @pur_total is null then
    set @pur_total = 0
  end if;
  if @defined_limit > 0 then
    if @sale_total > @defined_limit then
      update "act_mst" set "n_tcs_flag" = 1,"d_tcs_auto_activation" = @defa_date where "c_code" = "new_name"."c_code" and "n_tcs_flag" = 0 and "n_customer" = 1 and "n_tds_flag" = 0
    else
      --    update act_mst set n_tcs_flag = 0,d_tcs_auto_activation = @defa_date where c_code = new_name.c_code and n_tcs_flag = 1
    end if end if;
  //TDS
  if @defined_limit_tds > 0 then
    if @pur_total > @defined_limit_tds then
      update "act_mst" set "n_tds_flag" = 1,"d_tds_auto_activation" = @defa_date where "c_code" = "new_name"."c_code" and "n_supplier" = 1
    end if
  end if
end;
CREATE TRIGGER "update_tcs_flag_from_update_gstin_wise_sale_total" after update order 1 on
"DBA"."gstin_wise_sale_total"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare @defined_limit,@sale_total,@defined_limit_tds,@pur_total numeric(14,2);
  declare @defa_date date;
  declare @consider_dc_sale,@chk_cnt numeric(1);
  declare @gstin char(50);
  set @defa_date = "uf_default_date"();
  select "n_tcs_limit","n_sale_consider_tcs","n_tds_limit" into @defined_limit,@consider_dc_sale,@defined_limit_tds from "system_parameter";
  if @defined_limit is null then
    set @defined_limit = 0
  end if;
  if @defined_limit_tds is null then
    set @defined_limit_tds = 0
  end if;
  if @consider_dc_sale is null then
    set @consider_dc_sale = 0
  end if;
  if @consider_dc_sale = 1 then
    set @sale_total = "new_name"."n_value_dc_sale"
  else
    set @sale_total = "new_name"."n_value"
  end if;
  if @sale_total is null then
    set @sale_total = 0
  end if;
  set @pur_total = "new_name"."n_pur_value";
  if @pur_total is null then
    set @pur_total = 0
  end if;
  if @defined_limit > 0 then
    if @sale_total > @defined_limit then
      update "act_mst" set "n_tcs_flag" = 1,"d_tcs_auto_activation" = @defa_date where "isnull"("c_permanent_gstn_no","c_provisional_gstn_no") = "new_name"."c_code" and "n_tcs_flag" = 0 and "n_customer" = 1 and "n_tds_flag" = 0
    else
      --   update act_mst set n_tcs_flag = 0,d_tcs_auto_activation = @defa_date where isnull(c_permanent_gstn_no,c_provisional_gstn_no) = new_name.c_code and n_tcs_flag = 1
    end if end if;
  //TDS
  if @defined_limit_tds > 0 then
    if @pur_total > @defined_limit_tds then
      update "act_mst" set "n_tds_flag" = 1,"d_tds_auto_activation" = @defa_date where "isnull"("c_permanent_gstn_no","c_provisional_gstn_no") = "new_name"."c_code" and "n_tds_flag" = 0 and "n_supplier" = 1
    else
      update "act_mst" set "n_tds_flag" = 0,"d_tds_auto_activation" = @defa_date where "isnull"("c_permanent_gstn_no","c_provisional_gstn_no") = "new_name"."c_code" and "n_tds_flag" = 1 and "n_supplier" = 1
    end if
  end if
end;
CREATE TRIGGER "UPDATE_TRAY_LEDGER_FROM_TRAY_MST_INSERT" after insert order 1 on
"DBA"."st_tray_mst"
referencing new as "new_name"
for each row
begin
  declare @c_br_code char(6);
  declare @c_year char(6);
  declare @c_prefix char(6);
  declare @d_srno numeric(18);
  declare @d_ldate date;
  declare @t_ltime "datetime";
  declare @n_pk numeric(18);
  if "new_name"."n_in_out_flag" = 0 then
    select "c_br_code" into @c_br_code from "System_Parameter";
    select "right"("db_name"(),2) into @c_year from "System_Parameter";
    set @d_srno = 0;
    set @c_prefix = 'OT';
    //set @d_srno = @d_srno + 1;
    set @d_ldate = "today"();
    set @t_ltime = "string"(@d_ldate)+''+"string"("substr"("now"(),"length"(@d_ldate)+1,8));
    insert into "tray_ledger"( "c_br_code","c_year","c_prefix","n_srno","c_tray_code","n_qty","t_ltime","n_pk" ) on existing skip values
      ( @c_br_code,@c_year,@c_prefix,@d_srno,"new_name"."c_code",1,@t_ltime,"uf_pk"(@c_br_code,@c_year,@c_prefix,@d_srno,0,0) ) 
  end if
end;
CREATE TRIGGER "update_tray_move_history_from_tray_lock_insert" after insert order 1 on
-------------------------------------------------------------------------------
"DBA"."st_tray_lock"
referencing new as "new_name"
for each row
begin
  update "st_track_tray_move"
    set "n_flag" = 7,"c_user" = "new_name"."c_user"
    where "c_tray_code" = "new_name"."c_tray"
end;
CREATE TRIGGER "Update_Upadte_Purchase_Bal_Amount" after update order 1
on "DBA".supp_pay_det
referencing old as old_name new as new_name
for each row
begin
  update purchase_mst set
    purchase_mst.n_purchase_balance_amt
    =purchase_mst.n_purchase_balance_amt+old_name.n_amount-new_name.n_amount
    where purchase_mst.c_prefix=new_name.c_prefix
    and purchase_mst.n_srno=new_name.n_purchase_no
end;
COMMENT ON TRIGGER "DBA"."supp_pay_det"."Update_Upadte_Purchase_Bal_Amount" IS 'When update supplier payment detail table update the balance amount of purchase.';
CREATE TRIGGER "update_update_transporter_balance_amt" after update order 2 on
"DBA"."transporter_payment_det"
referencing old as "old_name" new as "new_name"
for each row
begin
  update "transporter_payment_ledger" set "transporter_payment_ledger"."n_bal_amount"
     = "transporter_payment_ledger"."n_bal_amount"+"old_name"."n_amount"-"new_name"."n_amount"-"old_name"."n_return_amount"+"new_name"."n_return_amount"
    where "transporter_payment_ledger"."n_doc_no" = "old_name"."n_invoice_no"
end;
CREATE TRIGGER "update_user_pass_from_user_mst_delete" before delete order 3 on
"DBA"."ddds_user_mst"
referencing old as "old_name"
for each row
begin
  delete from "user_pass" where "user_pass"."c_user_id" = "old_name"."c_user_id"
end;
CREATE TRIGGER "update_user_pass_from_user_mst_insert" after insert order 1 on
"DBA"."ddds_user_mst"
referencing new as "new_name"
for each row
begin
  declare "d_count" decimal(6);
  if "new_name"."n_year_end_flag" <> 1 then
    select "count"() into "d_count" from "user_pass" where "user_pass"."c_user_id" = "new_name"."c_user_id";
    if "d_count" = 0 then
      insert into "user_pass"( "c_user_id","c_user_pass","d_ldate","t_ltime" ) values
        ( "new_name"."c_user_id","new_name"."c_user_pass","new_name"."d_ldate","new_name"."t_ltime" ) 
    else
      update "user_pass" set "user_pass"."c_user_pass" = "new_name"."c_user_pass" where "user_pass"."c_user_id" = "new_name"."c_user_id" and "user_pass"."d_ldate" < "new_name"."d_ldate"
    end if
  end if
end;
CREATE TRIGGER "update_user_pass_from_user_mst_update" before update order 2 on
"DBA"."ddds_user_mst"
referencing old as "old_name" new as "new_name"
for each row
begin
  declare "d_count" decimal(6);
  declare @d_def_date date;
  set @d_def_date = "uf_default_date"();
  if "new_name"."c_user_pass" <> "old_name"."c_user_pass" then
    select "count"() into "d_count" from "user_pass" where "user_pass"."c_user_id" = "new_name"."c_user_id";
    if "d_count" = 0 then
      insert into "user_pass"( "c_user_id","c_user_pass","d_ldate","t_ltime" ) values
        ( "new_name"."c_user_id","new_name"."c_user_pass","new_name"."d_ldate","new_name"."t_ltime" ) 
    else
      update "user_pass" set "user_pass"."c_user_pass" = "new_name"."c_user_pass" where "user_pass"."c_user_id" = "new_name"."c_user_id"
    end if end if;
  if "new_name"."n_temp_id_locked" = 1 and "old_name"."n_temp_id_locked" = 0 then
    insert into "user_lock_det"( "c_user_id","d_date","n_lock" ) values( "new_name"."c_user_id",@d_def_date,"new_name"."n_temp_id_locked" ) 
  end if;
  if "old_name"."n_permanent_id_locked" = 1 and "new_name"."n_permanent_id_locked" = 0 then
    delete from "user_lock_det" where "c_user_id" = "old_name"."c_user_id"
  end if;
  if "old_name"."n_temp_id_locked" = 1 and "new_name"."n_temp_id_locked" = 0 then
    delete from "logon_det_temp_lock" where "c_user_id" = "old_name"."c_user_id"
  end if
end;
